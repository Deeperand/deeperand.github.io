<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Markdown 语法速查</title>
    <link href="/2021/05/02/CS-Web-2021-05-02-markdown-syntax-ref/"/>
    <url>/2021/05/02/CS-Web-2021-05-02-markdown-syntax-ref/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;本文并不打算全面地介绍 Markdown, 主要致力于记录一些次常用的 Markdown 语法以备使用.</p><h2 id="图片及超链接"><a href="#图片及超链接" class="headerlink" title="图片及超链接"></a>图片及超链接</h2><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">![<span class="hljs-string">fig name</span>](<span class="hljs-link">path &quot;alt name&quot;</span>)<br>[<span class="hljs-string">link display</span>](<span class="hljs-link">link</span>)<br></code></pre></div></td></tr></table></figure><h2 id="表格-table"><a href="#表格-table" class="headerlink" title="表格 table"></a>表格 <sup><a href="#fn_table" id="reffn_table">table</a></sup></h2><h3 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h3><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">| 表头   | 表头   |<br>|--------|--------|<br>| 单元格 | 单元格 |<br>| 单元格 | 单元格 |<br></code></pre></div></td></tr></table></figure><p>其中可在表头与内容的分割线处通过 <code>:-</code>, <code>-:</code>, <code>:-:</code> 指定对齐方式, 如:</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">| 左对齐 | 右对齐 | 居中对齐 |<br>|:-------|-------:|:--------:|<br>| 单元格 | 单元格 | 单元格   |<br>| 单元格 | 单元格 | 单元格   |<br></code></pre></div></td></tr></table></figure><p>如 Vim 等文本编辑器通常提供有辅助源代码对齐的插件. 对于 Vim 插件 <code>plasticboy/vim-markdown</code> <sup><a href="#fn_vim-markdown" id="reffn_vim-markdown">vim-markdown</a></sup>, 其提供了对齐表格的指令 <code>:TableFormat</code>, 笔者将其设为了 NORMAL 模式下的快捷键 <code>&lt;localleader&gt;la</code>.</p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><div class="table-container"><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:left">左对齐</th><th style="text-align:right">右对齐</th><th style="text-align:center">居中对齐</th></tr></thead><tbody><tr><td style="text-align:left">单元格</td><td style="text-align:right">单元格</td><td style="text-align:center">单元格</td></tr><tr><td style="text-align:left">单元格</td><td style="text-align:right">单元格</td><td style="text-align:center">单元格</td></tr></tbody></table></div><h2 id="复选框-todo-list"><a href="#复选框-todo-list" class="headerlink" title="复选框 todo_list"></a>复选框 <sup><a href="#fn_todo_list" id="reffn_todo_list">todo_list</a></sup></h2><p>&emsp;&emsp;之前 (2021.04.30) 从 macOS 的 <em>Note</em> 中复制复选框列表到 Markdown 源文件时, 意外地发现列表开头自动变为了诸如 <code>[x]</code>, <code>[]</code> 的形式, 这才意识到 Markdown 或许也支持复选框.</p><h3 id="Syntax-1"><a href="#Syntax-1" class="headerlink" title="Syntax"></a>Syntax</h3><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">[x] A<br>[ ] B<br><span class="hljs-bullet">-</span> [x] 已选中<br><span class="hljs-bullet">-</span> [ ] 未选中<br></code></pre></div></td></tr></table></figure><p>应注意 “未选中” 框</p><h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3><p>[x] A<br>[ ] B</p><ul><li>[x] 已选中</li><li>[ ] 未选中</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><blockquote id="fn_table"><sup>table</sup>. <a href="https://www.runoob.com/markdown/md-table.html">Markdown 表格</a><a href="#reffn_table" title="Jump back to footnote [table] in the text."> &#8617;</a></blockquote></li><li><blockquote id="fn_vim-markdown"><sup>vim-markdown</sup>. <a href="https://github.com/plasticboy/vim-markdown">plasticboy/vim-markdown</a><a href="#reffn_vim-markdown" title="Jump back to footnote [vim-markdown] in the text."> &#8617;</a></blockquote></li><li><blockquote id="fn_todo_list"><sup>todo_list</sup>. <a href="http://amwiki.org/doc/?file=020-教程学习篇/005-学习markdown/12-Markdown复选框">Markdown 复选框 (todo list)</a><a href="#reffn_todo_list" title="Jump back to footnote [todo_list] in the text."> &#8617;</a></blockquote></li></ul>]]></content>
    
    
    <categories>
      
      <category>CS Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TODO</tag>
      
      <tag>syntax</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 快速上手</title>
    <link href="/2021/05/02/CS-Hexo-2021-05-02-Hexo-quick-start/"/>
    <url>/2021/05/02/CS-Hexo-2021-05-02-Hexo-quick-start/</url>
    
    <content type="html"><![CDATA[<p>本文绝大部分内容参考自 Hexo 的官方参考文档 <sup><a href="#fn_official_doc" id="reffn_official_doc">official_doc</a></sup>, 旨在记录笔者本人建立博客过程中觉得比较实用的东西亦即个人体会.</p><h2 id="建站及-Hexo-目录结构-build"><a href="#建站及-Hexo-目录结构-build" class="headerlink" title="建站及 Hexo 目录结构 build"></a>建站及 Hexo 目录结构 <sup><a href="#fn_build" id="reffn_build">build</a></sup></h2><p>&emsp;&emsp;类似于 <code>git</code> 使用时需要进行初始化, 使用 Hexi 建站时同样需要进行初始化. 如</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">$ hexo init &lt;folder&gt;<br>$ <span class="hljs-built_in">cd</span> &lt;folder&gt;<br>$ npm install<br></code></pre></div></td></tr></table></figure><p>其中第一行是 <code>hexo</code> 的初始化语句, 第二行是跳转至建站的路径, 第三行是在路径下使用 <code>npm</code> 安装所需插件. 新建完成后的目录结构为</p><figure class="highlight sqf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sqf">.<br>├── <span class="hljs-variable">_config</span>.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── <span class="hljs-variable">_drafts</span><br>|   └── <span class="hljs-variable">_posts</span><br>└── themes<br></code></pre></div></td></tr></table></figure><p>各个路径的简介如下 (详细介绍见官方文档 <sup><a href="#fn_build" id="reffn_build">build</a></sup>)</p><ul><li><code>_config.yml</code>: Hexo 的 (全局) 配置文件</li><li><code>package.json</code>: 通过 <code>npm install</code> 安装的包</li><li><code>scaffolds</code>: 模板文件夹. 如使用指令 <code>hexo new [layout] &lt;title&gt;</code> <sup><a href="#fn_write" id="reffn_write">write</a></sup>, 将按照 <code>scaffolds</code> 中的模板文件 <code>[layout].md</code> 在当前目录下建立标题为 <code>&lt;title&gt;</code> 的新文件. (如果设置了资源文件夹<sup><a href="#fn_Asset" id="reffn_Asset">Asset</a></sup>, 除了建立 <code>&lt;title&gt;.md</code> 以外, 还会在当前位置建立名为 <code>&lt;title&gt;</code> 的文件夹)</li><li><code>source</code>: 存放博客的核心—Markdown 文件及图片等资源的地方.</li><li><code>theme</code>: 主题文件</li></ul><h2 id="Markdown-写作"><a href="#Markdown-写作" class="headerlink" title="Markdown 写作"></a>Markdown 写作</h2><p>&emsp;&emsp;采用 Hexo 等博客框架的一大优势就是可以直接使用 Markdown 进行写作, 并自动生成最终所需的 HTML 文件, 而无需直接面对 HTML 文件. 相比通常的 Markdown 语法, Hexo 有自己独有的一些特点. 笔者将简单介绍如下</p><h3 id="Front-Matter-FrontMatter"><a href="#Front-Matter-FrontMatter" class="headerlink" title="Front Matter FrontMatter"></a>Front Matter <sup><a href="#fn_FrontMatter" id="reffn_FrontMatter">FrontMatter</a></sup></h3><p>&emsp;&emsp;相比于一般的 Markdonw 语法, Hexo 提供了 Front Matterh 用以指定每篇文章的变量. 如标题名, 建立日期, 分类, 标签等. Front Matter 区域在 Markdonw 文件开头, 以两条三横线分隔, 如</p><figure class="highlight md"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">---<br>title: <br>math: true<br>data: 2021-05-02<br>categories:<br><span class="hljs-bullet">-</span> <br>tags: <br>---<br></code></pre></div></td></tr></table></figure><p>其中若有项目没有指定值. 将采用默认值. 部分参数控制的功能如下</p><ul><li><code>layout</code>: 文章布局, 默认为 <code>config.default_layout</code></li><li><code>title</code>: 文章标题, 默认为文章的文件名</li><li><code>date</code>: 文章的建立日期, 默认为文件建立日期.</li><li><code>update</code>: 文章更新日期</li><li><code>comments</code>: 是否开启文章评论</li><li><code>tags</code>: 标签. 若希望有多个标签, 可采取类似 Markdown list 的形式, 如  <figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">tags:<br><span class="hljs-bullet">-</span> CS<br><span class="hljs-bullet">-</span> TODO<br></code></pre></div></td></tr></table></figure></li><li><code>categories:</code>文章的分类. 采用类似 Markdown list 的形式, 前一个分类为后一个分类的父分类. 如  <figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">categories:<br><span class="hljs-bullet">-</span> Diary<br><span class="hljs-bullet">-</span> Life<br></code></pre></div></td></tr></table></figure>  其含义为: 该文件属于父分类 <code>Diary</code> 的子分类 <code>Life</code>. 关于为文章添加多个分类的方法详见官方参考文档 <sup><a href="#fn_Front Matter" id="reffn_Front Matter">Front Matter</a></sup>.</li></ul><p>部分主题 <code>theme</code> 提供了更丰富的 Front Matter. 如 Fluid 主题 <sup><a href="#fn_Fluid" id="reffn_Fluid">Fluid</a></sup> 提供了 <code>math</code>, <code>mermaid</code> 等来控制数学公式和 <code>mermaid</code> 流程图 <sup><a href="#fn_mermaid" id="reffn_mermaid">mermaid</a></sup> 的渲染开关.</p><h3 id="Tag-插件"><a href="#Tag-插件" class="headerlink" title="Tag 插件"></a>Tag 插件</h3><p>&emsp;&emsp;官方文档直接翻译的是 “标签插件 <sup><a href="#fn_tag_plugin" id="reffn_tag_plugin">tag_plugin</a></sup>“. 这个名字一开始让我有些不明所以. 后来才认识到, 这个词语应分为两部分: “标签 (Tag)” 与 “插件 (Plugin)”, 亦即这是一类插件, 不过是比较特殊的一类插件. “Plugin” 表明, 这类功能的实现往往需要一些第三方程序—-也就是插件提供; “Tag” 表明, 这类功能的实现主要是由一种被称为 “标签 (Tag)” 的特殊语法来实现. 其与 “HTML 标签” 在使用上有相似之处, 但毕竟是不同的东西, 要注意与 “HTML 标签” 进行区分. 当然, 这一节的标题特意将前半部分用英文、而后半部分用中文, 亦是为了强调对这个名词的正确断句.</p><p>&emsp;&emsp;标签的基本形式形如 <code>&#123;% <syntax> %&#125;</code>, 其中 <code>&lt;syntax&gt;</code> 部分没有特别统一的形式, 需要根据使用的具体插件进行学习. 官方文档 <sup><a href="#fn_tag_plugin" id="reffn_tag_plugin">tag_plugin</a></sup> 中给出了一些插件的例子.</p><p>&emsp;&emsp;值得主要, 既然这些东西属于 “插件”, 自然必须安装了对应的第三方程序才能使用. 如果你发现一段代码在其他人的文章介绍里可以进行渲染, 但在自己的 Hexo 却无法实现, 就得怀疑是否是因为没有安装相应插件了.</p><h2 id="资源-Asset-文件夹-Asset"><a href="#资源-Asset-文件夹-Asset" class="headerlink" title="资源 (Asset) 文件夹 Asset"></a>资源 (Asset) 文件夹 <sup><a href="#fn_Asset" id="reffn_Asset">Asset</a></sup></h2><p>&emsp;&emsp;相比于在 <code>source</code> 文件夹下建立诸如 <code>fig</code> 文件夹来统一管理文章所用到的资源 (如图片插入), 笔者更喜欢采取 “project” 的范式来撰写文章. 亦即将每一篇视为一个独立的 “project”, 不同 “project” 的资源彼此独立存储, 以减少不同 “project” 之间的耦合, 增强各自的独立性. 为在 Hexo 中实现此目的, 可在 <code>_config.yml</code> 中配置</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><p>当该选项开启后, 可在与文章同名的文件夹中放置资源, 并在对应文章中通过相对该文件夹的路径来引用资源. 例如, <code>source/</code> 下有博客 <code>hello.md</code>, 以及文件夹 <code>source/hello/</code>, 该文件夹中有子文件夹 <code>fig/</code>, 其中有图片 <code>test.png</code>. 那么在 <code>hello.md</code> 中使用该图片时, 可以直接使用相对与 <code>source/hello/</code> 的路径 <code>fig/test.png</code>, 而非相对 <code>source</code> 的路径. </p><p>&emsp;&emsp;在官方中文文档中, 资源文件夹对应的是 Asset 文件夹, 而非 Source 文件夹. 笔者个人认为, Asset 文件夹的功效其实更接近英文 “Assistant”, 亦即辅助. 实际上, 官方文档中将 “Asset” 诠释为 “<code>source</code> 文件夹中除了文章以外的所有文件”. 从这个角度来说, 将此文件夹理解为 “使博客内容更加丰富的辅助文件” 也颇为贴切.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><blockquote id="fn_official_doc"><sup>official_doc</sup>. <a href="https://hexo.io/zh-cn/docs/index.html">Hexo 官方中文文档</a><a href="#reffn_official_doc" title="Jump back to footnote [official_doc] in the text."> &#8617;</a></blockquote></li><li><blockquote id="fn_build"><sup>build</sup>. <a href="https://hexo.io/zh-cn/docs/setup">建站</a><a href="#reffn_build" title="Jump back to footnote [build] in the text."> &#8617;</a></blockquote></li><li><blockquote id="fn_write"><sup>write</sup>. <a href="https://hexo.io/zh-cn/docs/writing">写作</a><a href="#reffn_write" title="Jump back to footnote [write] in the text."> &#8617;</a></blockquote></li><li><blockquote id="fn_tag_plugin"><sup>tag_plugin</sup>. <a href="https://hexo.io/zh-cn/docs/tag-plugins.html">标签插件（Tag Plugins）</a><a href="#reffn_tag_plugin" title="Jump back to footnote [tag_plugin] in the text."> &#8617;</a></blockquote></li><li><blockquote id="fn_Asset"><sup>Asset</sup>. <a href="https://hexo.io/zh-cn/docs/asset-folders">资源文件夹</a><a href="#reffn_Asset" title="Jump back to footnote [Asset] in the text."> &#8617;</a></blockquote></li><li><blockquote id="fn_FrontMatter"><sup>FrontMatter</sup>. <a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter</a><a href="#reffn_FrontMatter" title="Jump back to footnote [FrontMatter] in the text."> &#8617;</a></blockquote></li><li><blockquote id="fn_mermaid"><sup>mermaid</sup>. <a href="https://mermaid-js.github.io/mermaid/#/">Mermaid</a><a href="#reffn_mermaid" title="Jump back to footnote [mermaid] in the text."> &#8617;</a></blockquote></li></ul>]]></content>
    
    
    <categories>
      
      <category>CS Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 macOS 上使用 Firefox 运行 Flash</title>
    <link href="/2021/05/02/CS-Web-2021-05-02-Firefox-flash/"/>
    <url>/2021/05/02/CS-Web-2021-05-02-Firefox-flash/</url>
    
    <content type="html"><![CDATA[<h2 id="Flash-插件的兼容性"><a href="#Flash-插件的兼容性" class="headerlink" title="Flash 插件的兼容性"></a>Flash 插件的兼容性</h2><p>&emsp;&emsp;从不久前开始, 几乎所有浏览器都取消了对 Flash 的支持. 但鉴于部分老旧网页的服务仍需 Flash 插件 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Adobe Flash Playerhttps://www.flash.cn">[1]</span></a></sup> (比如新建网站时公安备案的网站 <sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="全国互联网安全管理平台">[2]</span></a></sup>, 目前其在填写网站备案信息时会提示需要 Flash 插件), 保留一款支持 Flash 的浏览器很有必要.</p><p>&emsp;&emsp;Firefox 的较新版本是不支持 Flash 的. 想要正确运行 Flash 插件, 需要安装较旧的版本. 根据插件兼容性说明 (见 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Adobe Flash Playerhttps://www.flash.cn">[1]</span></a></sup> 主页面), 其对 macOS 的支持情况为:</p><ul><li>系统要求:Mac OS X 10.10 版或更高版本</li><li>浏览器要求: 低于14版本的Safari、低于85版本的Mozilla Firefox、低于88版本内核的Google Chrome</li></ul><p>安装方式同一般的 macOS App 一致: 在网站上 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Adobe Flash Playerhttps://www.flash.cn">[1]</span></a></sup> 下载对应的 <code>.dmg</code> 文件, 并根据提示安装即可.</p><h2 id="关闭-Flash-插件的自动更新"><a href="#关闭-Flash-插件的自动更新" class="headerlink" title="关闭 Flash 插件的自动更新"></a>关闭 Flash 插件的自动更新</h2><p>&emsp;&emsp;笔者在下载旧版本后一开始可能正常运行 Flash 插件, 但等一段时间以后就又无法运行了. 经检查发现, 关键原因在于 Firefox 默认进行自动更新.</p><p>&emsp;&emsp;Firefox 本身是无法直接关闭自动更新的. 欲停止自动更新, 需配置 Firefox 的策略文件 <sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="禁用 Firefox 自动更新（macOS 版）">[3]</span></a></sup>. 首先打开文件 (没有则自行新建. 其本质上是一个文本文件)</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">Firefox.app<span class="hljs-regexp">/Contents/</span>Resources<span class="hljs-regexp">/distribution/</span>policies.json<br></code></pre></div></td></tr></table></figure><p>并向其中写入如下内容以禁止自动更新</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&#123;<br>  <span class="hljs-string">&quot;policies&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;DisableAppUpdate&quot;</span>: <span class="hljs-literal">true</span><br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>操作完成后在 <em>Firefox</em> 菜单栏 <code>Firefox</code> -&gt; <code>关于 Firefox</code> 界面可看见 <code>更新已被系统管理员禁用</code> 的字样.</p><p><img src="forbid_update.png" alt="禁用更新成功后" title="禁用更新成功后"></p><p>&emsp;&emsp;注意, 一旦 Firefox 已经自动更新, 目前笔者尚未发现直接降级的方法, 此时最好卸载当前 Firefox 后重新安装旧版</p><h2 id="打开本地-Flash-文件"><a href="#打开本地-Flash-文件" class="headerlink" title="打开本地 Flash 文件"></a>打开本地 Flash 文件</h2><h3 id="获取-Flash-文件-swf"><a href="#获取-Flash-文件-swf" class="headerlink" title="获取 Flash 文件 (.swf)"></a>获取 Flash 文件 (<code>.swf</code>)</h3><p>&emsp;&emsp;Flash 文件的后缀一般为 <code>.swf</code>. 一般来说, 如果想要下载网页上的某个 Flash 资源 (如一个 Flash 小游戏), 可通过开发者页面 (如 Chrome 下按 <code>F12</code>) 以查看对应的 HTML 源码. 在源码中搜索 <code>.swf</code>, 找到想要下载的 Flash 文件链接后, 下载对应文件即可 (如 <em>Safari</em> 中可通过右击鼠标, 找到 <code>Download Linked File</code> 并点击来实现)</p><h3 id="使用-Firefox-打开本地-swf-文件"><a href="#使用-Firefox-打开本地-swf-文件" class="headerlink" title="使用 Firefox 打开本地 .swf 文件"></a>使用 Firefox 打开本地 <code>.swf</code> 文件</h3><p>&emsp;&emsp;对 <em>Firefox</em>, 打开本地文件时 Flash 插件默认是不启用的. 欲对本地文件启用 Flash 插件 <sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="火狐始终打不开本地swf文件">[4]</span></a></sup>, 在地址栏中输入 <code>about:config</code>, 搜索找到 <code>plugins.http_https_only</code> 项, 双击将其设置为 <code>flase</code> 即可.</p><p><strong>关于选项名的理解 :</strong> 选项名 <code>plugins.http_https_only</code> 可理解为 “只在打开 http/https 启用 (Firefox 的) 插件”. 由于 <code>http/https</code> 是不同计算机进行通信时的通信协议, 该选项若为 <code>ture</code>, 则意味着只有在和其它计算机进行通信时才能启用 Firefox 插件. 换而言之, 该选项若打开, 则在访问本地资源时无法启用 Firefox 插件, 因而要将其设置为 <code>false</code> 以实现启用 Flash 插件打开本地 <code>.swf</code> 文件的需求.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="link">Adobe Flash Player</a><a href="https://www.flash.cn">https://www.flash.cn</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="http://www.beian.gov.cn/portal/index.do">全国互联网安全管理平台</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://blog.csdn.net/netgc/article/details/107593377">禁用 Firefox 自动更新（macOS 版）</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://blog.csdn.net/pkowner/article/details/79416652">火狐始终打不开本地swf文件</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS Web</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 插件简介</title>
    <link href="/2021/04/19/CS-Hexo-2021-04-19-plugin-introduce/"/>
    <url>/2021/04/19/CS-Hexo-2021-04-19-plugin-introduce/</url>
    
    <content type="html"><![CDATA[<blockquote><p>写这篇文章的目的是为了记录使用 HEXO 的过程中了解到的插件</p></blockquote><h2 id="hexo-pdf"><a href="#hexo-pdf" class="headerlink" title="hexo-pdf"></a><code>hexo-pdf</code></h2><blockquote><p>(2021-04-19) </p></blockquote><ul><li><strong>Introduce:</strong> Hexo tag for embeded pdf</li><li><strong>Install:</strong>  <figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">npm install --save hexo-pdf<br></code></pre></div></td></tr></table></figure></li><li><strong>Example:</strong>  <figure class="highlight django"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">pdf</span> http://7xov2f.com1.z0.glb.clouddn.com/bash_freshman.pdf %&#125;</span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name">pdf</span> ./bash_freshman.pdf %&#125;</span><br></code></pre></div></td></tr></table></figure></li></ul><p><strong>Reference :</strong> </p><ul><li><a href="https://github.com/superalsrk/hexo-pdf">superalsrk/hexo-pdf</a></li><li><a href="https://www.jianshu.com/p/111452a36e94">HEXO博客中插入PDF</a></li></ul><h2 id="fluid-dev-hexo-theme-fluid"><a href="#fluid-dev-hexo-theme-fluid" class="headerlink" title="fluid-dev/hexo-theme-fluid"></a><code>fluid-dev/hexo-theme-fluid</code></h2><blockquote><p>(2021-04-18) </p></blockquote><ul><li><strong>Introduce:</strong> Hexo theme plugin</li></ul><p><strong>Reference :</strong></p><ul><li><a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid-dev/hexo-theme-fluid</a></li><li><a href="https://zhuanlan.zhihu.com/p/137679728">一款被大厂选用的 Hexo 博客主题</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>CS Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ref</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 的文件命名格式</title>
    <link href="/2021/04/19/CS-Hexo-2021-04-19-name-rule-of-hexo-markdown/"/>
    <url>/2021/04/19/CS-Hexo-2021-04-19-name-rule-of-hexo-markdown/</url>
    
    <content type="html"><![CDATA[<h2 id="日期开头的分隔符问题"><a href="#日期开头的分隔符问题" class="headerlink" title="日期开头的分隔符问题"></a>日期开头的分隔符问题</h2><p>&emsp;&emsp;今天尝试在文件名开头使用以下划线分隔的日期, 如 <code>2020_12_05_DG_in_spherical_coordinate</code>, 在网页渲染时会出现无法渲染的情况. 但之后因不明原因, 该情况又自己消失了.</p><h2 id="asset-文件夹的分隔符问题"><a href="#asset-文件夹的分隔符问题" class="headerlink" title="asset 文件夹的分隔符问题"></a><code>asset</code> 文件夹的分隔符问题</h2><p>&emsp;&emsp;另一个关于文件命名的问题是, 使用指令 <code>hexo new &lt;file_name&gt;</code> 时, 如果 <code>&lt;file_name&gt;</code> 中含有下划线, 则自动生成的 <code>asset</code> 文件夹的名字中下划线将全被替换为短横线.</p>]]></content>
    
    
    <categories>
      
      <category>CS Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TODO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/04/17/hello-world/"/>
    <url>/2021/04/17/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></div></td></tr></table></figure><p>More info: [Writin]<a href="https://hexo.io/docs/writing.html">https://hexo.io/docs/writing.html</a>)</p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo server<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo generate<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="中文测试"><a href="#中文测试" class="headerlink" title="中文测试"></a>中文测试</h3><p>&emsp;&emsp;这是一句中文</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>球面坐标系中的微分几何及其应用</title>
    <link href="/2020/12/08/MATH-differentail-geometry-2020-12-05-DG-DG-in-spherical-coordinate/"/>
    <url>/2020/12/08/MATH-differentail-geometry-2020-12-05-DG-DG-in-spherical-coordinate/</url>
    
    <content type="html"><![CDATA[<p><img src="/fig/cover/cover.png" alt=""></p><blockquote><p>前几个月一直忙着保研的事情, 好像已经好几个月没写成形一些的 note 了… 算一算上一次在知乎上传 note 好像是上学期期末? 话说这学期也快到期末了, 没想到鸽一下一个学期就没了 <code>┑(￣Д ￣)┍</code>.</p><p>今后上传的笔记在相比以往会有一些调整. 最显注的可能是封面选择. 主要是考虑到文风似乎过于严肃了一些, 所以向其它一些文章作者学习一下, 封面干脆换成可爱的二次元妹子, 希望能吸引更多的 (lsp) 读者 <code>(⊙ω⊙)</code> (虽然我有点怀疑是不是因为前面的大半年压力太大, 导致现在整个人变宅了一点…). 其二是之前上传笔记的动机是为了复习四大力学以应对理论所的面试, 但后来我将专栏名称改成了 “冬季银河的理论物理笔记”, 因此只要是和物理相关的一些内容应该都会上传. 其三是之前的笔记内容上更专一一些, 基本上每一篇都是来自某本教材的某一节或某几节, 今后的笔记应该会以平时碰到的问题为主干来组织内容, 因而可能会混杂好几门教材或好几门课的内容的情况 (比如这次的就混杂了微分几何, 数学物理方法, 量子力学三门课程的内容. 之所以想到计算球面坐标系的 Christoff 符号, 也是因为看宇宙学的时候计算了 FRW 度规下的 Christoff 符号, 打算再找个算 Christoff 符号的例子练习一下.). 最近一段时间主要是在看场论和宇宙学, 之后可能这些方面的内容会多一点. 最后一点是笔记上传格式的变化, 之前的时候都是把 LaTeX 编译的 pdf 文件导出后拼接成一整张长图, 但现在看来不拼接可能阅读体验会好一些, 而且也便于有需要的读者将每页图片保存后重新整合为单独的 pdf 文件. 所以今后除了将多余的页边剪裁一下以外, 不再将图片进行拼接.</p><blockquote><p>写这篇文章的主要动机是前不久在写数理方法的作业的参考答案的时候, 刚好碰到了球坐标下 Laplace 算符的问题, 加之高量考试又有径向角动量算符的题目, 以及一直想算一个微分几何的具体算例, 所以就写了这篇 note.</p></blockquote><p>这次的封面是藤原大佬 (pid: 27517) 的画中我最喜欢的一张, 算是入坑作吧 (最早好像在贴吧时代就看见过了).</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>&emsp;&emsp;正文部分一开始先计算了球面坐标系下的度规张量, 并由此计算了相应的 Christoff 符号. 随后利用相应的计算结果, 讨论了 Laplace 算符和角动量算符在球面坐标系下的形式. 其中在 Laplace 算符的部分, 简单讨论了分离变量的问题. 在角动量算符的部分, 简单阐述了协变导数在动量及角动量算符中的必要性, 随后分别利用抽象指标和具体指标进行了计算, 并定义了径向动量模方算符, 以及能过对比证明了了角向 Laplace 算符与角动量算符只相差一个常系数. 文章的最后, 还从径向动量算符的定义出发, 证明了该算符的平方正是之前所定义的径向动量模方算符.</p><p>&emsp;&emsp;附录部分是笔记的手稿, 内有具体的计算过程. 用英文主要是因为英文写起来比较省力 <code>_(:з」∠)_</code>. (注意手稿的每一页是从左往右的, 水印的位置是每一页的右上角)</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><img src="figure/main_body-1.jpg" alt=""><br><img src="figure/main_body-2.jpg" alt=""><br><img src="figure/main_body-3.jpg" alt=""><br><img src="figure/main_body-4.jpg" alt=""><br><img src="figure/main_body-5.jpg" alt=""><br><img src="figure/main_body-6.jpg" alt=""><br><img src="figure/main_body-7.jpg" alt=""></p><h2 id="附录-手稿"><a href="#附录-手稿" class="headerlink" title="附录 (手稿)"></a>附录 (手稿)</h2><p><img src="figure/handwriting_1.jpg" alt=""><br><img src="figure/handwriting_2.jpg" alt=""><br><img src="figure/handwriting_3.jpg" alt=""><br><img src="figure/handwriting_4.jpg" alt=""><br><img src="figure/handwriting_5.jpg" alt=""><br><img src="figure/handwriting_6.jpg" alt=""><br><img src="figure/handwriting_7.jpg" alt=""><br><img src="figure/handwriting_8.jpg" alt=""><br><img src="figure/handwriting_9.jpg" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>Differential Geometry</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>流形的基本概念</title>
    <link href="/2020/05/08/PHYS-general-relativity-2020-05-08-GR-basic-conception-of-manifold/"/>
    <url>/2020/05/08/PHYS-general-relativity-2020-05-08-GR-basic-conception-of-manifold/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本来是在看《物理学中的群论》中的第四章的, 奈何实在看不懂里面对李群的介绍, 于是开始看梁灿彬的《微分几何入门与广义相对论》中册的附录中关于李群的部分. 不得不说, 有微分几何基础的话看这部分相当的舒畅. 看的过程中顺带复习了一些关于微分几何的基本概念.</p><p>这篇文章对应《微分几何入门与广义相对论》第 2.1 节的内容.</p></blockquote><p><img src="./2.1_basic_conception_about_manifold.png" alt="outline"></p><h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1 基本概念"></a>1 基本概念</h2><p>&emsp;&emsp;首先给出流形的定义:</p><ul><li><u><strong>微分流形:</strong></u><br>对于拓扑空间 $M$, 若其有开覆盖 $\left\{ O_\alpha \right\}$ (即 $M = \bigcap_{\alpha} O_\alpha$) 满足下列条件, 则可称为 $n$ 维微分流形, 或简称 $n$ 维流形:<ol><li>$\forall\ O_\alpha$, $\exists$ 拓扑同胚映射 $\psi_\alpha: O_\alpha \to V_\alpha$ ($V_\alpha$ 是用通常拓扑衡量的开子集);</li><li>若 $O_\alpha \cap O_\beta$, 则复合映射 $\psi_\beta \circ \psi_\alpha^{-1}$ 是 $C^{\infty}$ 光滑的;</li></ol></li></ul><p>粗略地说, $n$ 维流形是带有微分结构的拓扑空间, 其局部地像 $\mathbb{R}^n$ (体现在可以局部地构建该集合与 $\mathbb{R}^n$ 的同胚关系), 但整体不一定像 $\mathbb{R}^n$. 具体而言, 定义的第一条表明, 微分流形是由一片一片的开集构成的, 每一片 $n$ 维微分流形上的开集, 都可通过某种映射, 使得其与 $R^{n}$ 上的某个开集同胚. 而定义的第二条表明, 如果 $M$ 的两个开集有交, 则可诱导出一个 $R^{n}$ 的某个开区域到 $R^{n}$ 的另一开区域的映射, 这个映射按照通常在数学分析中的定义是 $C^{\infty}$ 的.</p><h2 id="2-坐标系与图"><a href="#2-坐标系与图" class="headerlink" title="2 坐标系与图"></a>2 坐标系与图</h2><p>&emsp;&emsp;由于流形上每一片开集都可和 $\mathbb{R}^n$ 上的某个开区域对应, 因此可以借助这个开区域定义坐标系:</p><ul><li><u><strong>流形上的坐标系:</strong></u><br>设映射 $\psi_\alpha: O_\alpha \to \psi_\alpha[O_\alpha] \subset \mathbb{R}^n$ 是流形上的某个开集 $O_\alpha$ 到 $\mathbb{R}^n$ 的某个开区域的拓扑同胚映射, 则任一 $p \in O_\alpha$ 自然地通过这个映射与 $n$ 个数对应, 称这 $n$ 个数是点 $p$ 对应的坐标, 称 $(O_\alpha, \psi_\alpha)$ 构成一个坐标系.</li></ul><p>坐标系的取法往往不是唯一的. 试想流形上有交集的两个开区域 $O_\alpha$ 与 $O_\beta$, 其分别对应映射 $\psi_\alpha$ 与 $\psi_\beta$. 则在交集 $O_\alpha \cap O_\beta$ 中, 即可使用坐标系 $(O_\alpha, \psi_\alpha$, 也可使用坐标系 $(O_\beta, \psi_\beta)$. 于是同一个点对应两个 $\mathbb{R}^{n}$ 上的点, 由此可诱导出联系则两个点的一个的映射 (或者说 $n$ 个 $n$ 元函数):</p><script type="math/tex; mode=display">    x'^{\mu} = \phi^{\mu}(x^{\nu}),\ \mu, \nu = 1, \dots , n</script><p>称这个映射 (或者说 $n$ 个 $n$ 元函数) 为一个 <strong>坐标变换</strong>. 此外, 通常也将对应的 $n$ 个数 $\left\{ x^{\mu} \right\}$ 称为坐标系, 以及将坐标变换简记为:</p><script type="math/tex; mode=display">    x'^{\mu} = x'^{\mu}(x^{\nu}),\ \mu, \nu = 1, \dots , n</script><p>&emsp;&emsp;接下来介绍数学上另一种看待坐标系的观点:</p><ul><li><u><strong>图:</strong></u><br>坐标系 $(O_\alpha, \psi_\alpha)$ 在数学上又叫 <strong>图</strong>. 若图中的映射满足微分流形定义中对映射的要求, 则将这样的图的集合 $\left\{ (O_\alpha, \psi_\alpha) \right\}$ 称为 <strong>图册</strong>. 其中定义第二个要求又叫相容性条件, 因此图册中任意两个图都是相容的.</li></ul><p>对于同一个微分流形, 可以两个图册并不一定是相容的, 此时说两个图册代表不同的 <strong>微分结构</strong>.</p><h2 id="3-流形间的映射"><a href="#3-流形间的映射" class="headerlink" title="3 流形间的映射"></a>3 流形间的映射</h2><p>&emsp;&emsp;流形与拓扑不同的是, 除了具有拓扑结构以外, 还具有微分结构 (可以视为通过 $\mathbb{R}^n$ 上的函数来间接体现的). 对于流形间的映射, 除了一般的连续性以外, 还可谈论高阶的连续性. 具体定义如下:</p><ul><li><u><strong>流形间映射的连续性:</strong></u><br>  设 $f: M \to M’$ 是流形间的映射, 则可诱导出一个多元函数 $\psi’_\beta \circ f \circ \psi_\alpha^{-1}$ ($\psi’_\beta$ 与 $\psi’_\alpha$ 分别是 $M’$ 与 $M$ 上的坐标系). 若对于任意 $p \in M$, 该多元函数是 $C^{r}$ 的, 则称映射 $f$ 是 $C^{r}$ 类映射.</li></ul><p>&emsp;&emsp;类似与之前定义的拓扑同胚, 这里可以定义微分同胚, 反映两个流形微分结构的一致性:</p><ul><li><u><strong>微分同胚:</strong></u><br>  若存在 $f: M \to M’$, 满足:<ol><li>$f$ 是一一到上的;</li><li>$f$ 及 $f^{-1}$ 是 $C^{\infty}$ 的;<br>则称 $f$ 是 $M$ 到 $M’$ 的微分同胚映射, 且称 $M$ 与 $M’$ 互为微分同胚.</li></ol></li></ul><p>流形间的映射 $f: M \to M’$ 有一个特例, 即 $M’$ 为 $\mathbb{R}$ 的情形, 此时流形 $M$ 的每一点都对应着一个实数, 由此可引出第一个关于 “场” 的概念:</p><ul><li><u><strong>流形上的标量场:</strong></u><br>  称映射 $f: M \to \mathbb{R}$ 为流形 $M$ 上的 <strong>函数</strong>, 或 $M$ 上的 <strong>标量场</strong>. 若 $f$ 为 $C^{\infty}$ 的, 则称该标量场是 <strong>光滑的</strong>. 将 $M$ 上全体光滑标量场的集合记为 $\mathscr{F}_{M}$ 或 $\mathscr{F}$.</li></ul>]]></content>
    
    
    <categories>
      
      <category>General Relativity</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
