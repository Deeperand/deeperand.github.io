<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>[DEBUG] 个人博客访问出现 404 问题</title>
    <link href="/CS_web/2021-05-19_DEBUG_404_problem/"/>
    <url>/CS_web/2021-05-19_DEBUG_404_problem/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文介绍了 404 问题的基本概念, 以及对今天处理的一个 404 问题发生原因的分析.</p></blockquote><span id="more"></span><p>&emsp;&emsp;<code>404</code> 问题是常见的网络问题, 其基本原因是访问的服务器路径上不存在可供访问的文件.</p><p>&emsp;&emsp;今天访问个人博客时突然发现分类 <code>CS Web</code> 和 <code>CS Hexo</code> 下的文章在进行访问时出现了 404 问题. 经分析, 可能是因为前两天改变了 <code>Hexo</code> 目录中两个文件夹 <code>CS_Web</code> 和 <code>CS_Hexo</code> 中字母的大小写 (分别改为了 <code>CS_web</code> 和 <code>CS_hexo</code>). 而我自己的电脑为 macOS 系统, 其文件名是对大小写不敏感的, 于是我自己的电脑判定文件夹名称没有变化, 在上传远程服务器时文件夹名称亦没有改变. 而远程服务器为 Ubuntu 系统, 其文件名可能是大小写敏感的, 于是通过原本的大写字母路径无法访问实际的小写字母路径.</p>]]></content>
    
    
    <categories>
      
      <category>CS Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TRICK] Hexo 中设置永久链接</title>
    <link href="/CS_hexo/2021-05-17_TRICK_hexo_permalink/"/>
    <url>/CS_hexo/2021-05-17_TRICK_hexo_permalink/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文介绍了 Hexo 中永久链接的概念和相应设置方法</p></blockquote><span id="more"></span><p>&emsp;&emsp;对于 Hexo 来说, 永久链接的格式控制着生成的文件相对于 <code>public</code> 的路径. 基本设置格式如<br>    <figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">permalink:</span> <span class="hljs-string">:category/:title/</span><br></code></pre></div></td></tr></table></figure><br>于是文件名称为 <code>hello.md</code> 分类为 <code>test</code> 的 markdown 文档生成的对应 HTML 文件将在 <code>public/test/</code> 下. 值得注意的是, <code>:title</code> 是相对 <code>source</code> 的路径而非文件的名称. 例如, 若 markdown 文件在 <code>source</code> 的子目录下, 如 <code>source/test1/hello.md</code>, 则生成的对应 HTML 文件在目录 <code>public/test1/hello</code> 下. 所以<em>如果已经利用子目录进行文章分类, 在使用 <code>:title</code> 时不再需要加上 <code>:category</code></em>, 或者采用 <code>:name</code> 来代替 <code>:title</code>. 此外, <em>末尾的斜杠 <code>/</code> 不能省略</em></p><p>&emsp;&emsp;具体而言, 其中可选的参数为 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Hexo: 永久链接">[1]</span></a></sup></p><div class="table-container"><table><thead><tr><th>item</th><th>meaning</th></tr></thead><tbody><tr><td><code>:year</code></td><td>文章的发表年份（4 位数）</td></tr><tr><td><code>:month</code></td><td>文章的发表月份（2 位数）</td></tr><tr><td><code>:i_month</code></td><td>文章的发表月份（去掉开头的零）</td></tr><tr><td><code>:day</code></td><td>文章的发表日期 (2 位数)</td></tr><tr><td><code>:i_day</code></td><td>文章的发表日期（去掉开头的零）</td></tr><tr><td><code>:hour</code></td><td>文章发表时的小时 (2 位数)</td></tr><tr><td><code>:minute</code></td><td>文章发表时的分钟 (2 位数)</td></tr><tr><td><code>:second</code></td><td>文章发表时的秒钟 (2 位数)</td></tr><tr><td><code>:title</code></td><td>文件名称 (relative to “source/_posts/“ folder)</td></tr><tr><td><code>:name</code></td><td>文件名称</td></tr><tr><td><code>:post_title</code></td><td>文章标题</td></tr><tr><td><code>:id</code></td><td>文章 ID (not persistent across cache reset)</td></tr><tr><td><code>:category</code></td><td>分类。如果文章没有分类，则是 default_category 配置信息。</td></tr><tr><td><code>:hash</code></td><td>SHA1 hash of filename (same as :title) and date (12-hexadecimal)</td></tr></tbody></table></div><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://hexo.io/zh-cn/docs/permalinks.html">Hexo: 永久链接</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>TRICK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用 convert 将 PDF 转化为图片并调整分辩率</title>
    <link href="/CS_linux/2021-05-16_convert_pdf/"/>
    <url>/CS_linux/2021-05-16_convert_pdf/</url>
    
    <content type="html"><![CDATA[<p>本文介绍了如何利用 <code>ImageMagick</code> 提供的 <code>conver</code> 指令将 PDF 转化为图片, 以及如何调整图片的分辨率. 其中 PDF 转换为图片的部分最早记录于 2020.05.19, 分辨率调整的部分最早记录于 2020.07.08.</p><span id="more"></span><h2 id="PDF-与图片的转化"><a href="#PDF-与图片的转化" class="headerlink" title="PDF 与图片的转化"></a>PDF 与图片的转化</h2><p>&emsp;&emsp;PDF 与图片的转化可以使用 <code>ImageMagick</code> 提供的 <code>convert</code> 指令来实现 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Linux下使用ImageMagick将pdf转换为jpg">[1]</span></a></sup> (<code>ImageMagick</code> 一般在安装 LaTeX 时会一起安装). 下面的代码先将图片转化, 随后纵向拼接:</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">$ convert -density 400 input.pdf out.jpg<br>$ convert -append out-*.jpg out.jpg <span class="hljs-comment"># vertical joint</span><br></code></pre></div></td></tr></table></figure><p>如果 PDF 源文件 <code>input.pdf</code> 有三页, 则转化出的图片名称为 <code>out-0,jpg</code>, <code>out-1.jpg</code>. 第二行代码中的 <code>*</code> 是通配符. 此外, 也可实现向 <code>.png</code> 的转化:<br><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">$ convert -density 150 input.pdf -quality 90 output.png<br></code></pre></div></td></tr></table></figure></p><p>以及横向拼接:</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">$ convert in-1.jpg in-5.jpg in-N.jpg +append out.jpg <span class="hljs-comment"># horizontal joint</span><br></code></pre></div></td></tr></table></figure><p>值得注意的是, 在 LaTeX 的 <code>ctex</code> 类的文档类中, 如果选择了 <code>hyperref</code>, 则交叉引用会自动建立超链接, 且在 PDF 浏览时会看见红框. 但这些红框在将 PDF 转化为图片时不会出现, 因此不必刻意消去那些红框.</p><h2 id="利用-convert-调整图像分辨率"><a href="#利用-convert-调整图像分辨率" class="headerlink" title="利用 convert 调整图像分辨率"></a>利用 <code>convert</code> 调整图像分辨率</h2><p>&emsp;&emsp;利用 <code>convert</code> 调整图像分辨率的指令如 <sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="Linux 下处理图片分辨率的神器">[2]</span></a></sup> :</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">convert -resize 720x720 image.jpg image_1.jpg<br></code></pre></div></td></tr></table></figure><p>上面的指令在转换时是保比例的, 亦即如果图片的原始比例是 3:2, 那么经上面的指令转化后仍然是 3:2, 而非 1:1 (估计是取转化尺寸的最小或最大值作为转化后图片长或宽的尺寸?)</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://blog.csdn.net/lpwmm/article/details/83067698">Linux下使用ImageMagick将pdf转换为jpg</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.jianshu.com/p/5977674430c2">Linux 下处理图片分辨率的神器</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>音阶弹奏助记表</title>
    <link href="/MUSIC_piano/2021-05-16_music_scale_play/"/>
    <url>/MUSIC_piano/2021-05-16_music_scale_play/</url>
    
    <content type="html"><![CDATA[<p>本文主要记录了大调音阶的关键指法, 以及大调音阶的关系小调音阶 (旋律) 的对应升音.</p><span id="more"></span><h2 id="大调音阶关键指法"><a href="#大调音阶关键指法" class="headerlink" title="大调音阶关键指法"></a>大调音阶关键指法</h2><p><img src="scale_1.jpg" alt=""></p><h2 id="旋律小调音阶的升音"><a href="#旋律小调音阶的升音" class="headerlink" title="旋律小调音阶的升音"></a>旋律小调音阶的升音</h2><p><img src="scale_2.jpg" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>MUSIC Piano</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MUSIC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[DEBUG] 撰写毕业论文中遇到的 LaTeX 相关问题汇总</title>
    <link href="/CS_latex/2021-05-13_DEBUG_bug_in_undergraduate_paper/"/>
    <url>/CS_latex/2021-05-13_DEBUG_bug_in_undergraduate_paper/</url>
    
    <content type="html"><![CDATA[<p>这篇文章用于记录撰写毕业论文时遇到的与 LaTeX 相关的问题</p><span id="more"></span><h2 id="LaTeX-mathscr-字体上下标几乎对齐"><a href="#LaTeX-mathscr-字体上下标几乎对齐" class="headerlink" title="[LaTeX] \mathscr 字体上下标几乎对齐"></a>[LaTeX] <code>\mathscr</code> 字体上下标几乎对齐</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>使用 <code>\mathscr</code> 字体时, 指令 <code>\tensor</code> 生成的上标与下标几乎对齐</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>在 <code>\mathscr</code> 的符号后加上小间隔 <code>\,</code>, 如<br>    <figure class="highlight tex"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tex"><span class="hljs-built_in">$</span><span class="hljs-keyword">\tensor</span>&#123;&#123;<span class="hljs-keyword">\mathscr</span>&#123;G&#125;<span class="hljs-keyword">\,</span>&#125;&#125;&#123;<span class="hljs-built_in">^</span>&#123;i&#125;<span class="hljs-built_in">_</span>&#123;j&#125;&#125;<span class="hljs-built_in">$</span><br></code></pre></div></td></tr></table></figure></p><h2 id="Vim-vimtex-无法识别文件为主文件的子文件"><a href="#Vim-vimtex-无法识别文件为主文件的子文件" class="headerlink" title="[Vim] vimtex 无法识别文件为主文件的子文件"></a>[Vim] <code>vimtex</code> 无法识别文件为主文件的子文件</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><ul><li>对于子文件, 原本会在状态栏 (<code>airline</code> 提供) 下显示 <code>&#123;m&#125;</code>, 但之前一直没显示 </li><li>在子文件中打开目录 (<code>vimtex</code> 提供) 时为空</li><li>子文件中代码高亮无法把 <code>align</code> 环境识别为数学类环境, 除非在子文件中再一次使用 <code>\usepackage&#123;amsmath&#125;</code></li><li>子文件发生变化并保存时, 即使处于 <code>contimue mode</code> 也无法自动编绎</li></ul><p>经分析, 背后的原因是 <code>vimtex</code> 没有将这些文件识别为主文件的子文件.</p><h3 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h3><p>&emsp;&emsp;最终发现是 <code>\documentclass</code> 的格式问题. 将原本 <code>cquthesis</code> 主文件 <code>main.tex</code> 中默认的<br>    <figure class="highlight tex"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tex"><span class="hljs-keyword">\documentclass</span><span class="hljs-comment">%</span><br>    [type=bachelor, bilinguallist=apart,]&#123;cquthesis&#125;<span class="hljs-comment">%</span><br></code></pre></div></td></tr></table></figure><br>改为<br>    <figure class="highlight tex"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tex"><span class="hljs-keyword">\documentclass</span>[type=bachelor, bilinguallist=apart,]&#123;cquthesis&#125;<span class="hljs-comment">%</span><br></code></pre></div></td></tr></table></figure><br>后问题解决.</p><h2 id="LaTeX-附录部分公式编号没有附录的节名"><a href="#LaTeX-附录部分公式编号没有附录的节名" class="headerlink" title="[LaTeX] 附录部分公式编号没有附录的节名"></a>[LaTeX] 附录部分公式编号没有附录的节名</h2><h3 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h3><ul><li>附录中的公式编号形如 “(.1)”, 而预期的应形如 “(A.1)”</li><li>使用 <code>\eqref</code> 引用公式时也形如 “式 (.1)”</li></ul><h3 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h3><p>在 <code>\appendix</code> 指令后显式设置公式编号格式, 如<br>    <figure class="highlight tex"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tex"><span class="hljs-keyword">\renewcommand</span><span class="hljs-keyword">\theequation</span>&#123;<span class="hljs-comment">%</span><br>    <span class="hljs-keyword">\thechapter</span>.<span class="hljs-keyword">\arabic</span>&#123;equation&#125;&#125;<br></code></pre></div></td></tr></table></figure></p><h2 id="Vim-vimtex-目录中不显示注释中的-TODO"><a href="#Vim-vimtex-目录中不显示注释中的-TODO" class="headerlink" title="[Vim] vimtex 目录中不显示注释中的 TODO"></a>[Vim] <code>vimtex</code> 目录中不显示注释中的 <code>TODO</code></h2><h3 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h3><p>理论上来说, 在 <code>.tex</code> 的注释中包含了 <code>TODO</code> 的部分会在 <code>vimtex</code> 的目录指令中显示出来, 但在使用 <code>% TODO</code> 时该条目不显示</p><h3 id="解决方法-3"><a href="#解决方法-3" class="headerlink" title="解决方法"></a>解决方法</h3><p>经测试, <code>TODO</code> 后必须包含文字才可以, 且其后跟着的冒号不会在目录中额外显示. 如, 下面两种写法是等效的<br>    <figure class="highlight tex"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tex"><span class="hljs-comment">% <span class="hljs-doctag">TODO:</span> introduction for GW</span><br><span class="hljs-comment">% TODO introduction for GW</span><br></code></pre></div></td></tr></table></figure><br>均会在 <code>vimtex</code> 提供的目录 <em>顶端</em> 中显示该 <code>TODO</code> 条目, 后面会跟随相应的文字描述</p><p><img src="content_TODO.png" alt=""></p><p>另一方面, 若只使用<br>    <figure class="highlight tex"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tex"><span class="hljs-comment">% TODO</span><br></code></pre></div></td></tr></table></figure><br>则在 <code>vimtex</code> 的目录中不会有任何显示.</p>]]></content>
    
    
    <categories>
      
      <category>CS LaTeX</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>DEBUG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LaTeX 中的计数器</title>
    <link href="/CS_latex/2021-05-13_counter/"/>
    <url>/CS_latex/2021-05-13_counter/</url>
    
    <content type="html"><![CDATA[<p>本文用于记录了 LaTeX 中的计数器相关的知识. 包括计数器的名称, 格式指定及一些相关应用. 主要参考刘海洋的 LaTeX 教材 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="刘海洋. 2013. LaTeX 入门.">[1]</span></a></sup>.</p><span id="more"></span><h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2><ul><li>计数器名称:<ul><li>section type: <code>chapter</code>, <code>section</code>, <code>subsection</code> …</li><li>enemerate type: <code>enumi</code>, <code>enumii</code>, <code>enumiii</code>, <code>enumiv</code></li></ul></li><li>格式指定: <code>\arabic</code>, <code>\roman</code>, <code>\Roman</code>, <code>\alpha</code>, <code>Alph</code>, <code>fnsymbol</code></li><li>计数器输出:<ul><li>section type: <code>\thechapter</code>, <code>\thesection</code>, <code>\thesubsection</code> …</li><li>enemerate type: <code>\theenumi</code>, <code>\theenumii</code>, <code>\theenumiii</code>, <code>\theenumiv</code></li></ul></li></ul><h2 id="计数器编程"><a href="#计数器编程" class="headerlink" title="计数器编程"></a>计数器编程</h2><figure class="highlight tex"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tex"><span class="hljs-comment">% define</span><br><span class="hljs-keyword">\newcounter</span>&#123;cnt&#125;    <span class="hljs-comment">% define a new counter</span><br><span class="hljs-keyword">\setcounter</span>&#123;cnt&#125;&#123;0&#125; <span class="hljs-comment">% define and assign</span><br><br><span class="hljs-comment">% claculation</span><br><span class="hljs-keyword">\stepcounter</span>&#123;cnt&#125;<span class="hljs-keyword">\thecnt</span>     <span class="hljs-comment">% add 1 (self-add) to `cnt` and display</span><br><span class="hljs-keyword">\addtocounter</span>&#123;cnt&#125;&#123;3&#125;<span class="hljs-keyword">\thecnt</span> <span class="hljs-comment">% add 3 to counter cnt and display it</span><br></code></pre></div></td></tr></table></figure><p> Note add an optional parameter like <code>\newcounter&#123;cnt&#125;[section]</code> will define a new counter <code>cnt</code>  which reset when counter <code>section</code> self-add.</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>刘海洋. 2013. <em>LaTeX 入门</em>.<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS LaTeX</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[READ] Chapter 2 Special Relativity and Extra Dimensions</title>
    <link href="/PHYS_string_theory/BOOK_a_first_course_in_string_theory/2021-05-10_READ_chapter_2_special_relativity_and_extra_dimensions/"/>
    <url>/PHYS_string_theory/BOOK_a_first_course_in_string_theory/2021-05-10_READ_chapter_2_special_relativity_and_extra_dimensions/</url>
    
    <content type="html"><![CDATA[<p>This eassy is a reading notes of <em>A First Course in String Theory</em>, <em>Chapter 2 Special relativity and extra dimensions</em> <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Zwiebach, Barton. “A First Course in String Theory,” 2009">[1]</span></a></sup></p><span id="more"></span><h2 id="2-1-Units-and-parameters"><a href="#2-1-Units-and-parameters" class="headerlink" title="2.1 Units and parameters"></a>2.1 Units and parameters</h2><ul><li>Units: a fixed quantities that we use for purposses of reference (e.g.: time, length, mass)</li><li>unit of charge<ul><li>Gaussian unit (esu)<script type="math/tex; mode=display">  [\mathrm{esu}^{2}] = [\mathrm{N}\cdot \mathrm{m}^{2}]</script></li><li>SI unit (coulombs)</li></ul></li><li>dimensionful parameters and dimensionless parameters</li></ul><h2 id="2-2-Intervals-and-Lorentz-transformation"><a href="#2-2-Intervals-and-Lorentz-transformation" class="headerlink" title="2.2 Intervals and Lorentz transformation"></a>2.2 Intervals and Lorentz transformation</h2><ul><li>4-coordinate</li><li>interval (sign: $(+,-,-,-)$, so time-like means $\mathrm{d} s^2 &gt; 0$)<ul><li>finite</li><li>infinitesimal</li><li>Einstein’s summation convention</li></ul></li><li>metric<ul><li>lower indices</li><li>scalar product</li><li>inverse of $\eta_{\mu\nu}$</li></ul></li><li>Lorentz transformation and boost<ul><li>the corresponding matric transformation of coordinate transformation $x’^\mu = L^{\mu}_{~~~\nu} x^\nu$</li><li>determinant of $L$ ($\det L = \pm 1$)</li></ul></li><li>other types of Lorentz transformation (spatial rotation)</li><li>Lorentz vector<ul><li>timelike ($v^2 &lt; 0$), spacelike ($v^2 &gt; 0$), <em>null</em> ($v^2 = 0$)</li></ul></li></ul><h2 id="2-3-Light-cone-coordinates"><a href="#2-3-Light-cone-coordinates" class="headerlink" title="2.3 Light-cone coordinates"></a>2.3 Light-cone coordinates</h2><ul><li>usage: quantization of the relativistic string</li><li>$x^+$ and $x^-$:<ul><li>definition<script type="math/tex; mode=display">  \begin{align}      & x^+ \equiv \dfrac{1}{\sqrt{2}} (x^0 + x^1) \\      & x^- \equiv \dfrac{1}{\sqrt{2}} (x^0 - x^1).  \end{align}</script></li><li>property: for special light rays, light-cone time will freeze</li><li>index: $+, -, 2, 3$</li></ul></li><li>light-cone components of Lorentz vector</li><li>example: light-cone velocity</li><li>note: light-cone coordinate can’t be got from Lorentz transformation</li></ul><h2 id="2-4-Relativistic-energy-and-momentum"><a href="#2-4-Relativistic-energy-and-momentum" class="headerlink" title="2.4 Relativistic energy and momentum"></a>2.4 Relativistic energy and momentum</h2><ul><li>review of relativistic energy and momentum<script type="math/tex; mode=display">  \dfrac{E^{2}}{c^{2}} - \boldsymbol{p} \cdot \boldsymbol{p} = m^2 c^2</script>  there $m$, $c$ are both constant</li><li>4-momentum</li><li>proper time<ul><li>differential relation<script type="math/tex; mode=display">  \dfrac{\mathrm{d} t}{\mathrm{d} s} = \dfrac{\gamma}{c}</script></li></ul></li><li>4-velocity</li><li>relationship between 4-velocity and 4-momentum<script type="math/tex; mode=display">  p^\mu = m u^\mu</script></li></ul><h2 id="2-5-Light-cone-energy-and-momentum"><a href="#2-5-Light-cone-energy-and-momentum" class="headerlink" title="2.5 Light-cone energy and momentum"></a>2.5 Light-cone energy and momentum</h2><ul><li>$p^+$ and $p^-$</li><li>physical enengy in light-cone coordinate:<script type="math/tex; mode=display">  -p_+ = p^- = \frac{E_\mathrm{cl}}{c}</script></li></ul><h2 id="2-6-Lorentz-invariance-with-extral-dimensions"><a href="#2-6-Lorentz-invariance-with-extral-dimensions" class="headerlink" title="2.6 Lorentz invariance with extral dimensions"></a>2.6 Lorentz invariance with extral dimensions</h2><ul><li>5 spatial + 1 time: 10 rotations + 5 boosts</li></ul><h2 id="2-7-Compact-extra-dimensions"><a href="#2-7-Compact-extra-dimensions" class="headerlink" title="2.7 Compact extra dimensions"></a>2.7 Compact extra dimensions</h2><ul><li>identification turned a noncompact dimension into a compact one</li><li>fundamental domain</li><li>coordinate choose (in fact, one can choose any period function $f$ of distance $x$ as a new coordinate)</li><li>torus</li></ul><h2 id="2-8-Orbifolds"><a href="#2-8-Orbifolds" class="headerlink" title="2.8 Orbifolds"></a>2.8 Orbifolds</h2><ul><li>orbifold: a space obtained by identification that have fixed points<ul><li>example 1: $\mathbb{R}^1 / \mathbb{Z}_2$</li><li>example 2: $\mathbb{C} / \mathbb{Z}_N$</li></ul></li><li>Chapter 13: quantum strings on an orbifold</li></ul><h2 id="2-9-Quantum-mechanics-and-the-square-well"><a href="#2-9-Quantum-mechanics-and-the-square-well" class="headerlink" title="2.9 Quantum mechanics and the square well"></a>2.9 Quantum mechanics and the square well</h2><ul><li>plank constant</li><li>commutation relation of $x^i$ and $p_j$</li><li>Schrodinger equation with square well potential<ul><li>energy<script type="math/tex; mode=display">  E_k = \dfrac{\hbar^2}{2m} \left( \dfrac{k \pi}{a} \right)^{2}</script></li></ul></li></ul><h2 id="2-10-Square-well-with-an-extra-dimension"><a href="#2-10-Square-well-with-an-extra-dimension" class="headerlink" title="2.10 Square well with an extra dimension"></a>2.10 Square well with an extra dimension</h2><ul><li>Schrodinger equation with $(x, y) \sim (x, y+ 2 \pi R)$<ul><li>energy<script type="math/tex; mode=display">  E_{k, l} = \dfrac{\hbar^2}{2m} \left[ \left( \dfrac{k \pi}{a} \right)^{2} + \left( \dfrac{l}{R} \right)^{2} \right]</script></li><li>extra dimension hidden in high energy scale</li></ul></li><li>chapter 17: new low-lying states appears when dimension much smaller than string length $\mathscr{l}_\mathrm{s}$</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>Zwiebach, Barton. “A First Course in String Theory,” 2009<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>PHYS String Theory</category>
      
      <category>BOOK A First Course in String Theory</category>
      
    </categories>
    
    
    <tags>
      
      <tag>READ</tag>
      
      <tag>PHYS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[READ] Chapter 4 论技术训练</title>
    <link href="/MUSIC_piano/BOOK_art_of_piano_performance/2021-05-10_READ_chapter_4_technique_practice/"/>
    <url>/MUSIC_piano/BOOK_art_of_piano_performance/2021-05-10_READ_chapter_4_technique_practice/</url>
    
    <content type="html"><![CDATA[<p>本文为 <em>论钢琴表演艺术 (涅高兹)</em> 第四章的读书笔记.</p><span id="more"></span><h2 id="4-1-概论"><a href="#4-1-概论" class="headerlink" title="4.1 概论"></a>4.1 概论</h2><ul><li>调用一切可用的身体资源</li><li>从使琴键发声的角度来看 (即便是 FF), 弹琴是一件轻松的事</li><li>肖邦的教学理念<ul><li>第一课: E, F#, E#, G#, A#, B#, 半断奏 (portamento) 而非边奏 (legato)</li><li>黑键更适合手指弹奏<ul><li>音阶练习黑键由多到少</li><li>钢琴弹奏理论具有不同于一般音乐理论的特点 (乐理上简单等同弹奏简单!)</li></ul></li></ul></li><li>钢琴的机械性及击键过程的物理描述<ul><li>F: 手指力度</li><li>h: 手抬起的高度</li><li>v: 手的击键速度</li><li>m: 手臂质量</li><li>“他越是善于把自己的知识归纳为具有规律作用的精确定义, 他的知识也就越巩固, 深刻.”</li></ul></li></ul><h2 id="4-2-信心是放松的基础"><a href="#4-2-信心是放松的基础" class="headerlink" title="4-2 信心是放松的基础"></a>4-2 信心是放松的基础</h2><ul><li>“放松” 是 “任意” 的对立面</li><li>放松的先决条件是 “信心”</li><li>巴赫: 技术练习与音乐性相结合</li><li>“弹得聚精会神, 结实有力, ‘深刻’ 和准确”<ul><li>整只手完全放松</li><li>完全平静, 非必要动作不用</li><li>“金属之声” 的获得</li></ul></li></ul><h2 id="4-3-动作器官"><a href="#4-3-动作器官" class="headerlink" title="4-3 动作器官"></a>4-3 动作器官</h2><ul><li>钢琴演奏中的 “手指力量”: 实质为承受某一重量时的稳定性<ul><li>“钢琴家本来应该能够做到这样的体育锻炼: 把十个手指支撑在地板上, 然后整个身体倒竖起来 —- 这就是手指 (支持着手的拱门的那些圆柱或弧形支柱) 所应支持的整个重量”</li></ul></li><li>基本功: 弹得均匀</li><li>利用手指差异演奏</li></ul><h2 id="4-4-论放松"><a href="#4-4-论放松" class="headerlink" title="4-4 论放松"></a>4-4 论放松</h2><ul><li>能力差的学生的共同缺点: 一点也不放松<ul><li>“我给他们的帮助很少, 而他们却给我带来难以忍受的痛苦.”</li><li>“手腕抬起, 手放松地下垂, 用手指从上面在琴上弹出音来, 然后用平稳的动作慢慢地把手腕放到尽可能低的地位, 接着又一次, 把手腕抬到手指己经不能按住琴琴的高度, 再用平稳的动作使手腕和整个手部一起向上 ‘离去’.”</li><li>“但是我想, 在上课时, 我由于痛苦而引起的大喊大叫, 比我的尚处于萌芽状态的体系所起的做用可能大些.”</li><li>让手自然下落的练习</li></ul></li><li>“吊桥” 比喻<ul><li>“手在钢琴上的最好位置应该是最容易迅速变化的位置.”</li></ul></li><li>灵活性及其练习<ul><li>灵活性问题源于手的移动</li><li>音阶的手型: 3, 4, 5 上越拇指而不是拇指下移 (如右手下行音阶)</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>MUSIC Piano</category>
      
      <category>BOOK 论钢琴表演艺术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MUSIC</tag>
      
      <tag>READ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TRICK] 插件 vimtex 中的 Text Objects</title>
    <link href="/CS_vim/20021-05-08_TRICK_text_objects_in_vimtex/"/>
    <url>/CS_vim/20021-05-08_TRICK_text_objects_in_vimtex/</url>
    
    <content type="html"><![CDATA[<p>本文记录了插件 <code>vimtex</code> 中定义的的文本对象 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label=":h vimtex.txt">[1]</span></a></sup></p><span id="more"></span><p><code>vimtex</code> 中的文本对象如下</p><ul><li><code>ic</code> <code>ac</code>: Commands</li><li><code>id</code> <code>ad</code>: Delimiters</li><li><code>ie</code> <code>ae</code>: LaTeX environments</li><li><code>i$</code> <code>a$</code>: Inline math structures</li><li><code>iP</code> <code>aP</code>: Sections</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><code>:h vimtex.txt</code><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS Vim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>TRICK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[READ] Chapter 1 A Brief Introduction</title>
    <link href="/PHYS_string_theory/BOOK_a_first_course_in_string_theory/2021-05-08_READ_chapter_1_introduction/"/>
    <url>/PHYS_string_theory/BOOK_a_first_course_in_string_theory/2021-05-08_READ_chapter_1_introduction/</url>
    
    <content type="html"><![CDATA[<p>This eassy is a reading notes of <em>A First Course in String Theory</em>, <em>Chapter 1 A brief introduction</em> <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Zwiebach, Barton. “A First Course in String Theory,” 2009">[1]</span></a></sup></p><span id="more"></span><h2 id="1-1-The-road-to-unification"><a href="#1-1-The-road-to-unification" class="headerlink" title="1.1 The road to unification"></a>1.1 The road to unification</h2><ul><li>review of four basic forces</li><li>quantization of electric force, week force, strong force (include unification of electric and weekforce)</li><li>particles in <em>Standard Model (SM)</em> (60 types)<ul><li>bosons (12 types): force carriers, 8 (QCD) + 4 (QED)</li><li>fermions (48 types): matter particle, lepton (12) + quarks (36)</li></ul></li><li>problem of Standard Model<ul><li>does not include gravity</li><li>too many parameters (twenty)</li></ul></li></ul><h2 id="1-2-String-theory-as-a-unified-theory-of-physics"><a href="#1-2-String-theory-as-a-unified-theory-of-physics" class="headerlink" title="1.2 String theory as a unified theory of physics"></a>1.2 String theory as a unified theory of physics</h2><ul><li>view phoints of decay process $\alpha \to \beta + \gamma$ of string theory</li><li>only parameter in string theory: $\mathscr{l}_s$</li><li>spatial dimension of string theory: 26 for bosonic string, 10 for superstring</li><li>types of string (open, close, bosonic, superstring)</li><li>five ten-dimensional superstring and M-theory</li></ul><h2 id="1-3-String-theory-and-its-verification"><a href="#1-3-String-theory-and-its-verification" class="headerlink" title="1.3 String theory and its verification"></a>1.3 String theory and its verification</h2><ul><li>lenth scale of string: less than $10^{-16} \mathrm{cm}$ (ref: Plank scale $\mathscr{l}_p \sim 10^{-33} \mathrm{cm}$)</li><li>chapter 3: D-brane</li><li>chapter 7: cosmic string</li><li>supersymmetry</li><li>Standard Model can emerge from string theory</li><li>solution selection problems and the <em>landscape</em> of string theory</li><li>gravity from quantum vibrations of relativistic string</li></ul><h2 id="1-4-Developments-and-outlook"><a href="#1-4-Developments-and-outlook" class="headerlink" title="1.4 Developments and outlook"></a>1.4 Developments and outlook</h2><ul><li>use string theory to understand conventional problems<ul><li>Chapter 15: D-branes</li><li>Chapter 23: Ads/CFT</li></ul></li><li>black hole entropy and string theory (chapter 22)</li><li>inflation and string theory</li><li>string theory have no complete formulation (e.g., had no similar equations like Einstein’s gravity field equation in GR)</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>Zwiebach, Barton. “A First Course in String Theory,” 2009<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>PHYS String Theory</category>
      
      <category>BOOK A First Course in String Theory</category>
      
    </categories>
    
    
    <tags>
      
      <tag>READ</tag>
      
      <tag>PHYS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TRICK] Fluid 主题中的日期显示</title>
    <link href="/CS_hexo/2021-05-06_TRICK_date_in_Fluid/"/>
    <url>/CS_hexo/2021-05-06_TRICK_date_in_Fluid/</url>
    
    <content type="html"><![CDATA[<p>Fluid 主题的配置文件中有配置项 <code>post: date:</code>, 但这并不是控制日期的输入格式的, 而是控制输出格式的.</p><span id="more"></span><p>&emsp;&emsp;Fluid 主题的配置文件中有配置项 <code>post: date:</code>, 但这并不是控制日期的输入格式的, 而是控制输出格式的. 基本配置为</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">date:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 格式参照 ISO-8601 日期格式化</span><br>    <span class="hljs-comment"># See: http://momentjs.cn/docs/#/parsing/string-format/</span><br>    <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;YYYY.MM.DD, HH:mm&quot;</span><br></code></pre></div></td></tr></table></figure><p>如注释中所述, 日期格式化标准为 ISO-8601 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Moment.js 文档 (moment(String))">[1]</span></a></sup> . 要注意, 该设置 <strong>并不影响在 Front-matter 中的日期输入格式</strong>. 不论该设置如何改变, Front-matter 中的日期输入方式始终不变. 例如, 在 Front-matter 中写入</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">title: &#x27;[TRICK] Fluid 主题中的日期显示&#x27;<br>data: 2021-05-06 22:55<br></code></pre></div></td></tr></table></figure><p>则输出的日期形如 <code>2021.05.06, 22:54</code> (可参考本文标题下方的显示效果).</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="http://momentjs.cn/docs/#/parsing/string-format/">Moment.js 文档 (moment(String))</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>TRICK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[DEBUG] 运行 brew clean 时碰到权限问题</title>
    <link href="/CS_macOS/2021-05-06_DEBUG_brew_clean_permisson/"/>
    <url>/CS_macOS/2021-05-06_DEBUG_brew_clean_permisson/</url>
    
    <content type="html"><![CDATA[<p>之前执行 <code>brew cleanup</code> 时多次碰到权限问题, 这可通过参考这篇文章中的权限设置方式解决.</p><span id="more"></span><p>&emsp;&emsp;之前执行 <code>brew cleanup</code> 时多次碰到权限问题</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">brew cleanup: Error: Permission denied<br></code></pre></div></td></tr></table></figure><p>这可通过参考这篇文章 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="使用brew遇到的update和cleanup问题">[1]</span></a></sup> 中的权限设置方式解决. 不过个人感觉 <code>777</code> 权限有点大, 不知道有没有更合适的处理方法.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://blog.csdn.net/qq_40177015/article/details/111591809?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&amp;spm=1001.2101.3001.4242">使用brew遇到的update和cleanup问题</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS macOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>DEBUG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TRICK] Hexo 中的草稿</title>
    <link href="/CS_hexo/2021-05-06_TRICK_drafts_in_Hexo/"/>
    <url>/CS_hexo/2021-05-06_TRICK_drafts_in_Hexo/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;Hexo 中 <code>source</code> 文件夹下的特殊文件夹除了 <code>_posts</code> 以外还有 <code>_drafts</code>. 其中的内容在通常的 <code>hexo g</code>, <code>hexo s</code> 指令下并不会被渲染, 只有加上参数 <code>--draft</code> 才会被渲染并在网页中显示.</p><span id="more"></span><p>&emsp;&emsp;Hexo 中 <code>source</code> 文件夹下的特殊文件夹除了 <code>_posts</code> 以外还有 <code>_drafts</code>. 其中的内容在通常的 <code>hexo g</code>, <code>hexo s</code> 指令下并不会被渲染, 只有加上参数 <code>--draft</code> 才会被渲染并在网页中显示. 如</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">hexo s --draft<br>hexo g --draft<br></code></pre></div></td></tr></table></figure><p>利用该特性, 可以避免作为草稿的文章被发布到网站上.</p><p>&emsp;&emsp;Hexo 实际上提供了更丰富的 <code>hexo publish</code> 指令等来辅助进行草稿的发布 (详见官方参考文档 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://hexo.io/zh-cn/docs/writing#草稿">[1]</span></a></sup>), 不过笔者并不太喜欢这种范式. 相较而言, 我更青睐于给未完成的文章打上 <code>TODO</code> 的 tag.</p><p>test</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://hexo.io/zh-cn/docs/writing#草稿">https://hexo.io/zh-cn/docs/writing#草稿</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>TRICK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 CDN 为网站加速</title>
    <link href="/CS_web/2021-05-06_cdn/"/>
    <url>/CS_web/2021-05-06_cdn/</url>
    
    <content type="html"><![CDATA[<p>本文简要介绍了 CDN 的基本概念, 以及使用腾讯云 CDN 服务的基本配置流程.</p><span id="more"></span><h2 id="1-CDN-概述"><a href="#1-CDN-概述" class="headerlink" title="1 CDN 概述"></a>1 CDN 概述</h2><p>&emsp;&emsp;一般而言, 个人网站的服务器在带宽选择上基本是 1 到数 M. 换算成下载速度, 基本只有几百 Kb/s. 这还是总的下载速度, 如果考虑到多人同时访问网站, 速度只会更慢.</p><p>&emsp;&emsp;为了解决静态资源的访问速度问题, 可以考虑使用 CDN 进行加速. CDN 全称是 <em>内容分发网络 (Content Delivery Network)</em> <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="CDN是什么？使用CDN有什么优势？">[1]</span></a></sup> . 粗率来说, 其运行机制可以被理解为: 静态资源被复制到 CDN 的服务器, 用户访问静态资源时, 优先根据离其较近的服务器选择访问节点进行访问. 可见, 用户在访问资源时并不直接访问网站服务器. 因此不占用网站带宽, 且访问速度是由 CDN 服务器带宽来决定的. 另一面, CDN 在同带宽下相较服务器更为低廉, 因此是网站加速的首选技术. 此外, 对于纯静态的网站, 原则上连服务器都不需要, 直接采用 cos-cdn 方案即可 (Hexo 中有对应的插件 <code>hexo-deployer-cos-cdn</code> <sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="Hexo-deployer-cos-cdn 插件安装使用指南">[2]</span></a></sup> ).</p><h2 id="2-使用腾讯云的-CDN-服务"><a href="#2-使用腾讯云的-CDN-服务" class="headerlink" title="2 使用腾讯云的 CDN 服务"></a>2 使用腾讯云的 CDN 服务</h2><p>&emsp;&emsp;笔者使用的是腾讯云的 CDN 服务, 其配置方式有详细的参考文档 <sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="从零开始配置 CDN">[3]</span></a></sup> , 在此仅进行概述. 腾讯云的 CDN 服务是针对域名进行加速的, 在购买了 CDN 服务后, 受限要添加上需要加速的域名 <sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="接入域名">[4]</span></a></sup>, 之后可找到生成的 CDN 域名. 将该域名加入 DNS 列表 (这一步需要在自己的域名供应商处操作), 类型为 <code>CNAME</code>, 其意义是解析到域名.</p><h2 id="3-升级至-HTTPS"><a href="#3-升级至-HTTPS" class="headerlink" title="3 升级至 HTTPS"></a>3 升级至 HTTPS</h2><p>&emsp;&emsp;略. 这一步只需要在 CDN 服务中的控制台找到相应配置项并上传 HTTPS 证书即可, 整个过程比从头为服务器配置 HTTPS 更简单.</p><h2 id="4-其它注意事项"><a href="#4-其它注意事项" class="headerlink" title="4 其它注意事项"></a>4 其它注意事项</h2><h3 id="域名解析流程分析"><a href="#域名解析流程分析" class="headerlink" title="域名解析流程分析"></a>域名解析流程分析</h3><p>&emsp;&emsp;简单来说, 如果你在域名解析处将 <code>www.example.com</code> 设置为解析到 CDN 域名, 则访问时将先由该域名解析到对应 CDN 域名, 再由根据用户所处位置访问具体的某一个 CDN 服务器.</p><h3 id="检验域名解析结果"><a href="#检验域名解析结果" class="headerlink" title="检验域名解析结果"></a>检验域名解析结果</h3><p>&emsp;&emsp;可通过指令 <sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="配置 CNAME">[5]</span></a></sup></p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">nslookup -qt=cname &lt;domain_name&gt;<br></code></pre></div></td></tr></table></figure><p>查看域名解析情况. 如果 CDN 域名加速成功, 理论上结果会返回多个 IP. 如果域名解析对应的是服务器 IP, 则该指令会返回服务器 IP.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.zhihu.com/question/36514327/answer/1604554133">CDN是什么？使用CDN有什么优势？</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.lixl.cn/2020/020936412.html">Hexo-deployer-cos-cdn 插件安装使用指南</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://cloud.tencent.com/document/product/228/3149">从零开始配置 CDN</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://cloud.tencent.com/document/product/228/41215">接入域名</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://cloud.tencent.com/document/product/228/3121?from=information.detail.腾讯云cname配置">配置 CNAME</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[DEBUG] ERROR Deployer not found: git</title>
    <link href="/CS_hexo/2021-05-04_DEBUG_deployer_not_found/"/>
    <url>/CS_hexo/2021-05-04_DEBUG_deployer_not_found/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;今天上午在折腾完站内引用后, 发现运行 <code>hexo g -d</code> 后出现报错</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">ERROR Deployer not found: git<br></code></pre></div></td></tr></table></figure><p>经查阅 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="hexo d命令报错 ERROR Deployer not found: git">[1]</span></a></sup> 发现这是由于缺少 <code>hexo-deployer-git</code> 插件. 因此为解决此 Bug, 使用 <code>npm</code> 按照该插件即可</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">npm install hexo-deployer-git --save<br></code></pre></div></td></tr></table></figure><p>PS: 之前为了 debug 无法站内引用的问题, 新建了一个 Hexo 文件夹, 之后用这个文件夹中的 <code>node_modules/</code> 文件夹替换了旧 Hexo 文件夹中的 <code>node_modules/</code>. 看起来这个插件并不是 Hexo 自带的, 可能之前在第一次搭建 Hexo 博客时无意中已经装上了此插件, 所以才没有感觉.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://blog.csdn.net/qq_21808961/article/details/84476504">hexo d命令报错 ERROR Deployer not found: git</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>DEBUG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 Hexo 中引用站内文章</title>
    <link href="/CS_hexo/2021-05-04_cite_local_post/"/>
    <url>/CS_hexo/2021-05-04_cite_local_post/</url>
    
    <content type="html"><![CDATA[<h2 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1 基本使用"></a>1 基本使用</h2><p>&emsp;&emsp;Hexo 中使用 Tag 插件实现站内文章的引用. 基本格式为</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">&#123;% post<span class="hljs-emphasis">_link <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">path</span>&gt;</span></span> [title] %&#125;</span><br></code></pre></div></td></tr></table></figure><p>其中 <code>&lt;path&gt;</code> 是站内文章的路径 (无 <code>.md</code> 后缀名), 其是相对于 <code>$HEXO/source/_post</code> 的. 可选项 <code>[title]</code> 是最终渲染出的超链接显示的文字, 默认为文章标题. 例如, 文件 <code>hello_world.md</code> 位于 <code>_post/hello-world</code>, 引用它可通过</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> &#123;% post<span class="hljs-emphasis">_link hello-world %&#125;</span><br><span class="hljs-emphasis">- &#123;% post_</span>link hello-world 站内引用示例 %&#125;<br></code></pre></div></td></tr></table></figure><p>渲染结果为</p><ul><li><a href="/hello-world/" title="Hello World">Hello World</a></li><li><a href="/hello-world/" title="站内引用示例">站内引用示例</a></li></ul><p>实际撰写博客时, 笔者个人习惯在 <code>_post</code> 下按分类建立子文件夹, 此时可在 <code>&lt;path&gt;</code> 的位置加上子文件夹路径. 如我们有一篇文章位于</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">_post</span>/CS_Web/<span class="hljs-number">2021</span>-<span class="hljs-number">05</span>-<span class="hljs-number">04</span>_http_and_https<br></code></pre></div></td></tr></table></figure><p>引用时可采用</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> &#123;% post<span class="hljs-emphasis">_link CS_</span>Web/2021-05-04<span class="hljs-emphasis">_http_</span>and<span class="hljs-emphasis">_https %&#125;</span><br></code></pre></div></td></tr></table></figure><p>最终效果为</p><ul><li><a href="#">Post not found: CS_Web/2021-05-04_http_and_https</a></li></ul><h2 id="2-文件名含空格"><a href="#2-文件名含空格" class="headerlink" title="2 文件名含空格"></a>2 文件名含空格</h2><p>&emsp;&emsp;原则上来说, 对于编程时可能会引用到的文件, 其路径中最好不要含有空格等特殊字符. 由于笔者在 Hexo 的写作中特别注意这一点, 目前还没有碰到这种情况. 对于这种情况, 文章 “<a href="https://blog.jijian.link/2020-01-08/hexo-anchor-link/">hexo 链接到站内文章指定锚点</a>“ 中给出了一个例子, 这里文件为 <code>_post/hexo blog.md</code></p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">&#123;% post<span class="hljs-emphasis">_link &#x27;hexo blog&#x27; %&#125;</span><br></code></pre></div></td></tr></table></figure><p>亦即可尝试通过加上单引号来实现引用.</p><h2 id="3-Debug"><a href="#3-Debug" class="headerlink" title="3 Debug"></a>3 Debug</h2><h3 id="无法引用子目录中的文件"><a href="#无法引用子目录中的文件" class="headerlink" title="无法引用子目录中的文件"></a>无法引用子目录中的文件</h3><p>&emsp;&emsp;今早在尝试该功能时, 发现无法引用 <code>_post</code> 的子目录下的文件, 并在本应出现超链接的位置一直显示 <code>Post not found</code>. 通过一番测试, 发现了两个原因.</p><p>&emsp;&emsp;第一个是之前笔者作死把 <code>_config.yml</code> 中的 <code>new_post_name</code> 选项进行了修改</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># modified</span><br><span class="hljs-attr">new_post_name:</span> <span class="hljs-string">:year-:month-:day_:title.md</span> <span class="hljs-comment"># File name of new posts</span><br><br><span class="hljs-comment"># original</span><br><span class="hljs-attr">new_post_name:</span> <span class="hljs-string">:title.md</span> <span class="hljs-comment"># File name of new posts</span><br></code></pre></div></td></tr></table></figure><p>将内容从 <code>modified</code> 中的调整回默认的 <code>original</code> 中的后, 才可正确引用.</p><p>&emsp;&emsp;第二个原因至今不明确. 笔者在 debug 时在空文件夹 (不妨以 <code>$HEXO_NEW</code> 表示) 中重新使用 <code>hexo init</code> 以及安装主题后, 采用相同的配置文件可以正常进行站内引用. 但之前的博客文件夹 (不妨以 <code>$HEXO</code> 表示) 中死活无法正确引用. 后将 <code>$HEXO/node_modules</code> 文件夹以 <code>$HEXO_NEW/node_modules</code> 替换后, 站内引用回复正常. 个人猜测可能是昨天调试模块时把什么弄炸了… 所以如果你在检查完第一步后仍无法修复 bug, 可以尝试重装 Hexo.</p><p>&emsp;&emsp;最后提一下怀疑是该 bug 产生原因, 但事实证明无关的因素:</p><ul><li>Fluid 插件: 装上插件后可正常引用</li><li>Asset 文件夹: 无论是否开启, 无论 <code>marked: prependRoot:</code> 与 <code>marked: postAsset</code> 如何设置, 都不影响站内引用.</li></ul>]]></content>
    
    
    <categories>
      
      <category>CS Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>什么是 HTTP 与 HTTPS 协议?</title>
    <link href="/CS_web/2021-05-04_http_and_https/"/>
    <url>/CS_web/2021-05-04_http_and_https/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;简单来说, HTTP 与 HTTPS <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="HTTP和HTTPS有什么区别？">[1]</span></a></sup> 都是是通信协议. 但二者最大的区别在于, HTTP 是通过明文进行数据传输, 而 HTTPS 在传输过程中进行加密 (通过 SSL/TLS 协议). 试想这样一个过程: 在数据传输途中, 其被第三方进行了截获. 如果是采用的 HTTP 协议, 则截获者可以直接读懂传输的数据; 但如果采用的是 HTTPS 协议, 截获者必须找到正确的破译方法才能读懂其中的数据. 由此可见, 为了网站数据通信的安全性—-特别是设计密码输入时, 采用 HTTPS 协议很有必要.</p><p>&emsp;&emsp;那么如何区分自己平时访问的网页是 HTTP 协议还是 HTTPS 协议呢? 设我们有一个名为 <code>11.11.11.11</code> 的公网 IP, 使用 HTTP 对其进行访问时, 基本格式为 </p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">11.11</span>.<span class="hljs-number">11.11</span><br></code></pre></div></td></tr></table></figure><p>而使用 HTTPS 协议进行访问时, 基本格式为 </p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span><span class="hljs-number">11.11</span>.<span class="hljs-number">11.11</span><br></code></pre></div></td></tr></table></figure><p>可见, 二者的区别在于域名前指定通信协议的字符.</p><p>&emsp;&emsp;另一方面, 现在的浏览器都会自动检测协议的安全性. 一般来说, 如果浏览器地址栏中提示 “Not Secure”, 则一般为 HTTP 协议; 如果有一个类似锁的图标 (或显示 “Secure” 等), 则一般为 HTTPS 协议. 此外, 采用 HTTP 协议时, 地址栏中一般不会把 <code>http://</code> 字段显示出来, 而采用 HTTPS 协议时,  <code>https://</code> 字段一般会被显示出来.</p><p><img src="http_1.png" alt="HTTP 协议: 浏览器提示 &quot;Not Secure&quot;" title="HTTP 协议: 浏览器提示 &quot;Not Secure&quot;"></p><p><img src="https_1.png" alt="HTTPS 协议: 无 &quot;Not Secure&quot; 提示" title="HTTP 协议: 无 &quot;Not Secure&quot; 提示"></p><p><img src="http_2.png" alt="HTTP 协议: 不显示通信协议" title="HTTP 协议: 不显示通信协议"></p><p><img src="https_2.png" alt="HTTPS 协议: 地址栏显示通信协议" title="HTTPS 协议: 地址栏显示通信协议"></p><p>&emsp;&emsp;由于 HTTPS 通常通过 SSL/TLS 协议, 因此开启 HTTPS 协议需要相应的证书. 不过现在这类证书一般都可以免费申请 (如笔者是直接在腾讯云申请的证书).</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/151764515">HTTP和HTTPS有什么区别？</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用腾讯云和 Hexo 搭建个人博客</title>
    <link href="/CS_hexo/2021-05-03_build_blog_with_tencent_and_hexo/"/>
    <url>/CS_hexo/2021-05-03_build_blog_with_tencent_and_hexo/</url>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>&emsp;&emsp;基本思路 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="将hexo个人博客部署到个人云服务器—最详细踩坑教程">[1]</span></a></sup> 是在本地先进行 Hexo 的配置 (可参考我的这篇文章: <a href="#">Post not found: CS_Hexo/2021-05-02_hexo_quick_start</a>) 后, 在远程服务器搭建远程 git 库. 每次 <code>deploy</code> 时, 通过 <code>hexo-deployer-git</code> 插件先将本地的 <code>hexo</code> 生成的 <code>public</code> 内容推送到服务器上的远程库, 再通过 <code>hook</code> 自动将远程库中的内容拉取到网站存储的目录. 其中远程服务器采用 <code>Nginx</code> <sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="8分钟带你深入浅出搞懂Nginx">[2]</span></a></sup></p><h2 id="1-云服务器的带宽选择"><a href="#1-云服务器的带宽选择" class="headerlink" title="1 云服务器的带宽选择"></a>1 云服务器的带宽选择</h2><p>&emsp;&emsp;带宽选择方面 <sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="云服务器1M的带宽到底多大？90%的网站够用了">[3]</span></a></sup>, 如果是静态博客, 通过 CDN 加速后可获得相当满意的访问速度, 因此一般来说不需要太大 (对于纯静态博客, 甚至可以只使用 <code>cos-cdn</code> 而不需要服务器! Hexo 有插件 <code>hexo-deployer-cos-cdn</code> 来辅助实现 <sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="Hexo-deployer-cos-cdn 插件安装使用指南">[4]</span></a></sup> ). 对于以静态资源小型博客, 配置 CDN 加速的情况下, 1M 量级的带宽就足够了. 笔者自己选用的是3M 带宽的腾讯云服务器.</p><h2 id="2-配置-Git-远程仓库"><a href="#2-配置-Git-远程仓库" class="headerlink" title="2 配置 Git 远程仓库"></a>2 配置 Git 远程仓库</h2><h3 id="1-新建用户"><a href="#1-新建用户" class="headerlink" title="(1) 新建用户"></a>(1) 新建用户</h3><p>&emsp;&emsp;习惯上最好不要直接使用 <code>root</code> 用户进行网站的文件管理, 而一般创建一个 <code>git</code> 用户来运行 <code>git</code> 服务 <sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="搭建Git服务器">[5]</span></a></sup> . Linux 中有两种创建用户的指令, <code>adduser</code> 和 <code>useradd</code> <sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="一天一点linux(18):adduser和useradd的区别">[6]</span></a></sup> . 这里我们使用</p><h3 id="2-Hook-设置"><a href="#2-Hook-设置" class="headerlink" title="(2) Hook 设置"></a>(2) Hook 设置</h3><p>&emsp;&emsp;进行 <code>deploy</code> 以后, <code>public</code> 中的文件并非直接上传到服务器上的目标文件夹 <code>/var/www</code> 中. 因此需要自动化工具将内容拉取到目标文件 </p><p>这期间可能会碰到因文件权限问题而无法正常运行 hook 的情况, 这时要记得修改拉取所涉及到的文件夹的权限, 使当前用户具有操作权限 <sup id="fnref:7" class="footnote-ref"><a href="#fn:7" rel="footnote"><span class="hint--top hint--rounded" aria-label="git钩子函数允许的权限目录记得设置为git组的权限">[7]</span></a></sup> .</p><h3 id="3-DEBUG-权限问题"><a href="#3-DEBUG-权限问题" class="headerlink" title="(3) DEBUG: 权限问题"></a>(3) DEBUG: 权限问题</h3><p>&emsp;&emsp;笔者在配置完远程仓库, 并在 <code>deploy</code> 设置好推送至的远程库地址 <code>repo</code> 后, 执行 <code>hexo g -d</code> 时发现出现 <code>unpack failed</code> 的错误 <sup id="fnref:8" class="footnote-ref"><a href="#fn:8" rel="footnote"><span class="hint--top hint--rounded" aria-label="【Git服务器】搭建Git服务器（源码安装）">[8]</span></a></sup> <sup id="fnref:9" class="footnote-ref"><a href="#fn:9" rel="footnote"><span class="hint--top hint--rounded" aria-label="【Git学习】解决git push操作的时候出错，提示 error: unpack failed: unable to create temporary object directory">[9]</span></a></sup>. 经排查, 该问题的出现不在于 <code>hexo</code>, 而是由于笔者登录帐号是使用的 <code>git</code>, 其不具有将文件写入远程库的权限. 使用指令 <code>chmod</code> 修改远程库权限后, 该 bug 被消除.</p><h2 id="3-启用-HTTPS"><a href="#3-启用-HTTPS" class="headerlink" title="3 启用 HTTPS"></a>3 启用 HTTPS</h2><p>&emsp;&emsp;关于 HTTP/HTTPS 协议的简介可以参考我的这篇博客: <a href="#">Post not found: CS_Web/2021-05-04_http_and_https</a></p><h3 id="1-获取-SSL-证书"><a href="#1-获取-SSL-证书" class="headerlink" title="(1) 获取 SSL 证书"></a>(1) 获取 SSL 证书</h3><p>&emsp;&emsp;笔者自己是选用的腾讯云的服务器, 所以为了部署方便, 也是在腾讯云上申请的 SSL 证书. 对于域名型 (DV) 证书, 可免费进行申请 <sup id="fnref:10" class="footnote-ref"><a href="#fn:10" rel="footnote"><span class="hint--top hint--rounded" aria-label="域名型（DV）免费 SSL 证书申请流程">[10]</span></a></sup></p><h3 id="2-为-Nginx-服务器进行配置"><a href="#2-为-Nginx-服务器进行配置" class="headerlink" title="(2) 为 Nginx 服务器进行配置"></a>(2) 为 Nginx 服务器进行配置</h3><p>&emsp;&emsp;配置方式可参考文章 <sup id="fnref:11" class="footnote-ref"><a href="#fn:11" rel="footnote"><span class="hint--top hint--rounded" aria-label="hexo 博客开启 https (SSL 证书)">[11]</span></a></sup> . 要注意, 文中提到的配置文件 <code>/etc/nginx/nginx.conf</code> 可能默认并不存在, 需要自己手动创建. 另外可通过 <code>nginx -t</code> 指令来查看配置文件的位置.</p><p>&emsp;&emsp;另一面, 该文中强制全局 HTTPS 是采用在 <code>listen 80</code> 的 <code>server</code> 中添加语句 (自己操作时记得把域名字段改为自己的域名)</p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span> default_server;<br><span class="hljs-attribute">listen</span>       [::]:<span class="hljs-number">80</span> default_server;<br><span class="hljs-attribute">server_name</span>  staunchkai.com;<br><span class="hljs-attribute">root</span>         /home/hexo;<br><br><span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^(.*)</span> https://staunchkai.com<span class="hljs-variable">$1</span> <span class="hljs-literal">permanent</span>;   <span class="hljs-comment"># 添加的语句</span><br></code></pre></div></td></tr></table></figure><p>从字面上看, 应该是强制将用户在地址栏输入的内容加上 <code>https://</code> 后重新进行解析. 但如果你使用了 CDN 服务 (如腾讯云等), 可能会导致反复进入 CDN 域名而非进入服务器域名 (造成 “递归访问”), 从而 <strong>导致网站无法通过 CDN 域名访问</strong>. 因此, 如果采用了 CDN 服务, 请在 CDN 服务供应商处启用 HTTPS (往往比这里的操作更简单).</p><h2 id="4-启用-SSH-密钥"><a href="#4-启用-SSH-密钥" class="headerlink" title="4 启用 SSH 密钥*"></a>4 启用 SSH 密钥*</h2><p>&emsp;&emsp;一般进入服务器时可以通过输入帐号密码来实现. 但在每次推送时, 如果都要输入密码, 未免有些麻烦. 为实现免密登录及推送, 可考虑使用密钥.</p><h2 id="5-CC-知识共享-协议"><a href="#5-CC-知识共享-协议" class="headerlink" title="5 CC (知识共享) 协议"></a>5 CC (知识共享) 协议</h2><p>&emsp;&emsp;一般写博客时会附加上一定的版权声明, 通常采用 CC (Creat Commons, 知识共享) 协议. CC 协议下有不同的类型, 如本站博客默认采用的 <code>CC BY-NC-SA</code> 就相当于声明了署名, 非商业, 传递时保持一致性. 对于 CC 协议的详细介绍可参考这篇文章 <sup id="fnref:12" class="footnote-ref"><a href="#fn:12" rel="footnote"><span class="hint--top hint--rounded" aria-label="“知识共享”（CC协议）简单介绍">[12]</span></a></sup>.</p><h2 id="6-备案"><a href="#6-备案" class="headerlink" title="6 备案"></a>6 备案</h2><p>&emsp;&emsp;个人网站除了进行 ICP 备案外还要进行公安备案 <sup id="fnref:13" class="footnote-ref"><a href="#fn:13" rel="footnote"><span class="hint--top hint--rounded" aria-label="个人网站域名备案之后,需不需要到公安局备案?">[13]</span></a></sup>. 备案过程中会遇到 “前置许可” 一项, 对于不涉及没涉及新闻、出版、教育、尾声、药监、文化、广电等的一般博客而言是不需要勾选的, 一般只有大型企业的网站才会涉及前置审批, 且勾选后要上传相关审批文件 <sup id="fnref:14" class="footnote-ref"><a href="#fn:14" rel="footnote"><span class="hint--top hint--rounded" aria-label="公安备案不通过是怎么回事?公安备案通不过怎么办?">[14]</span></a></sup>.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/120743882">将hexo个人博客部署到个人云服务器—最详细踩坑教程</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/34943332">8分钟带你深入浅出搞懂Nginx</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/359335446">云服务器1M的带宽到底多大？90%的网站够用了</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://www.lixl.cn/2020/020936412.html">Hexo-deployer-cos-cdn 插件安装使用指南</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://www.liaoxuefeng.com/wiki/896043488029600/899998870925664">搭建Git服务器</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span><a href="https://segmentfault.com/a/1190000007316406">一天一点linux(18):adduser和useradd的区别</a><a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span><a href="https://blog.csdn.net/weixin_34342992/article/details/91874625">git钩子函数允许的权限目录记得设置为git组的权限</a><a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:8" class="footnote-text"><span><a href="https://hexo.wwxiong.com/hexo_blog/2018/01/03/2018/2018-01-03-git-server-install/">【Git服务器】搭建Git服务器（源码安装）</a><a href="#fnref:8" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:9" class="footnote-text"><span><a href="https://blog.csdn.net/ouyang_peng/article/details/81431208">【Git学习】解决git push操作的时候出错，提示 error: unpack failed: unable to create temporary object directory</a><a href="#fnref:9" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:10" class="footnote-text"><span><a href="https://cloud.tencent.com/document/product/400/6814">域名型（DV）免费 SSL 证书申请流程</a><a href="#fnref:10" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:11" class="footnote-text"><span><a href="https://blog.csdn.net/StaunchKai/article/details/82901437">hexo 博客开启 https (SSL 证书)</a><a href="#fnref:11" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:12" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/20641764">“知识共享”（CC协议）简单介绍</a><a href="#fnref:12" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:13" class="footnote-text"><span><a href="https://www.zhihu.com/question/22891465">个人网站域名备案之后,需不需要到公安局备案?</a><a href="#fnref:13" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:14" class="footnote-text"><span><a href="https://www.chaicp.com/list/442.html">公安备案不通过是怎么回事?公安备案通不过怎么办?</a><a href="#fnref:14" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TODO</tag>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过 Fluid 主题为 Hexo 博客添加评论功能及站点统计</title>
    <link href="/CS_hexo/2021-05-03_add_comment_with_fluid/"/>
    <url>/CS_hexo/2021-05-03_add_comment_with_fluid/</url>
    
    <content type="html"><![CDATA[<h2 id="1-在主题配置文件中开启评论"><a href="#1-在主题配置文件中开启评论" class="headerlink" title="1 在主题配置文件中开启评论"></a>1 在主题配置文件中开启评论</h2><p>&emsp;&emsp;首先在主题的 <code>post</code> 选项下开启主题并选择想启用的评论插件 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Fluid: 评论">[1]</span></a></sup> . 在 <code>_config.fluid.yml</code> 下设置</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">comments:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">valine</span><br></code></pre></div></td></tr></table></figure><p>由于本博客搭建时采用的是 <code>Valine</code> <sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="Valine Docs">[2]</span></a></sup>, 这里也以 <code>Valine</code> 为例. 在 <code>type</code> 中支持的类型请查看官方参考文档 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Fluid: 评论">[1]</span></a></sup> . 这里笔者个人比较青睐于 Valine, 主要原因如下:</p><ol><li>轻量级, 简洁</li><li>其是基于 LeanCloud <sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="LeanCloud">[3]</span></a></sup> 的, 而配置站点访问统计时同样可以使用 LeanCloud </li><li>后续有一个名为 <code>Waline</code> <sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="Waline">[4]</span></a></sup> 的评论系统. 其实基于 <code>Valine</code> 的, 但增加了后端. 如果想要评论系统具备后端, 从 <code>Valine</code> 到 <code>Waline</code> 的转换会比较顺畅,  <code>Waline</code> 的官方文档也提供了<a href="https://waline.js.org/migration.html#迁移至-cloudbase">迁移指南</a> .</li></ol><h2 id="2-通过-Valine-开启评论功能"><a href="#2-通过-Valine-开启评论功能" class="headerlink" title="2 通过 Valine 开启评论功能"></a>2 通过 Valine 开启评论功能</h2><p>&emsp;&emsp;在进行了上一节的基本设置以后, 下面介绍如何 (借助 <code>Fluid</code>) 开始使用 Valine <sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="Valine: 快速开始">[5]</span></a></sup> . </p><h3 id="第一步-注册-LeanCloud-帐号"><a href="#第一步-注册-LeanCloud-帐号" class="headerlink" title="第一步: 注册 LeanCloud 帐号"></a>第一步: 注册 <code>LeanCloud</code> 帐号</h3><p>&emsp;&emsp;首先要注册一个 <code>LeanCloud</code> <sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="LeanCloud">[3]</span></a></sup> 帐号, 进入进入控制台后点击左下角创建应用 (应用名按自己喜好起即可, 笔者直接起的是 <code>Valine</code>)</p><p><img src="create_app.jpg" alt="创建应用" title="创建应用"></p><p>之后进入刚刚创建的应用, 选择左下角的 <code>设置</code> -&gt; <code>应用Key</code>, 即可看到 ID 及Key</p><p><img src="app_key.jpg" alt="查看应用 ID 及 Key" title="查看应用 ID 及 Key"></p><h3 id="第二步-将新应用信息写入-Fluid-的配置文件"><a href="#第二步-将新应用信息写入-Fluid-的配置文件" class="headerlink" title="第二步: 将新应用信息写入 Fluid 的配置文件"></a>第二步: 将新应用信息写入 Fluid 的配置文件</h3><p>&emsp;&emsp;首先在 <code>_config.fluid.yml</code> (理论上原始配置源于 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">hexo-theme-fluid/_config.yml</a>. 关于评论插件的配置方式详见下一节) 中搜索 <code>valine:</code>, 按照上一步获得的信息填写好 <code>appid</code>, <code>appkey</code>, <code>serverURLs</code> 即可.</p><h3 id="第三部-重启并生成评论界面"><a href="#第三部-重启并生成评论界面" class="headerlink" title="第三部: 重启并生成评论界面"></a>第三部: 重启并生成评论界面</h3><p>&emsp;&emsp;重启 Hexo 后即可.</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment"># local</span><br>$ hexo clean &amp;&amp; hexo s <span class="hljs-comment"># local</span><br><br><span class="hljs-comment"># deploy to server</span><br>$ hexo clean &amp;&amp; hexo g -d<br></code></pre></div></td></tr></table></figure><h2 id="3-配置插件选项"><a href="#3-配置插件选项" class="headerlink" title="3 配置插件选项"></a>3 配置插件选项</h2><p>&emsp;&emsp;插件选项同样在 <code>_config.fluid.yml</code> 中进行配置, 不同插件的可选项详见 Fluid 官方参考文档的相关连接 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Fluid: 评论">[1]</span></a></sup>. 值得注意的是, 评论插件的可选项是 <strong>一级选项</strong>, 亦即是与 <code>post</code> 等同级的选项. 另外, 在官方配置文件靠末尾的地方, 已经给出了相应插件的基本配置信息, 因此 <strong>不必自己新建立插件选项</strong>. 如在原始的 <code>config.fluid.yml</code> (亦即 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">hexo-theme-fluid/_config.yml</a>) 中搜索 <code>valine:</code>, 将会找到</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># Valine</span><br><span class="hljs-comment"># 基于 LeanCloud</span><br><span class="hljs-comment"># Based on LeanCloud</span><br><span class="hljs-comment"># See: https://valine.js.org/configuration.html</span><br><span class="hljs-attr">valine:</span><br>  <span class="hljs-attr">appid:</span><br>  <span class="hljs-attr">appkey:</span><br>  <span class="hljs-attr">placeholder:</span> <span class="hljs-string">说点什么</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">retro</span><br>  <span class="hljs-attr">meta:</span> [<span class="hljs-string">&#x27;nick&#x27;</span>, <span class="hljs-string">&#x27;mail&#x27;</span>, <span class="hljs-string">&#x27;link&#x27;</span>]<br>  <span class="hljs-attr">pageSize:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">lang:</span> <span class="hljs-string">zh-CN</span><br>  <span class="hljs-attr">highlight:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">recordIP:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">serverURLs:</span><br></code></pre></div></td></tr></table></figure><p>插件 <code>Valine</code> 支持的选项可参考: <a href="https://valine.js.org/configuration.html#visitor">Valine: 配置项</a>.</p><h2 id="4-开启站点统计"><a href="#4-开启站点统计" class="headerlink" title="4 开启站点统计"></a>4 开启站点统计</h2><p>&emsp;&emsp;作为站主, 当然会想知道自己的网站的访问情况. 站点统计分为两类, 一类是网站的总访问量与访客数, 另一类是单篇文章的浏览量, 下面分别介绍.</p><h3 id="开启-PV-与-UV-统计"><a href="#开启-PV-与-UV-统计" class="headerlink" title="开启 PV 与 UV 统计"></a>开启 PV 与 UV 统计</h3><p>&emsp;&emsp;Fluid 目前支持两种方式进行 PV 与 UV 统计 <code>LeanCloud</code> 与<a href="http://busuanzi.ibruce.info">不蒜子</a>. 由于前面在使用 <code>Valine</code> 时已经注册过<code>LeanCloud</code> 了. 为了方便, 笔者在  PV 与 UV 统计上同样是通过 <code>LeanCloud</code> 的方式.  第一步要在 <code>_config.fluid.yml</code> 中开启统计并设置使用的工具</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">web_analytics:</span> <span class="hljs-comment"># 网页访问统计</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 默认为false，启用网页统计改为true即可</span><br>  <span class="hljs-attr">leancloud:</span><br>    <span class="hljs-attr">app_id:</span>     <span class="hljs-comment"># 可用之前 Valine 所用的 id</span><br>    <span class="hljs-attr">app_key:</span>    <span class="hljs-comment"># 可用之前 Valine 所用的 key</span><br>    <span class="hljs-attr">server_url:</span> <span class="hljs-comment"># 可用之前 Valine 所用的 url</span><br></code></pre></div></td></tr></table></figure><p>第二步设置统计的显示形式</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">footer:</span><br>  <span class="hljs-attr">statistics:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;busuanzi&quot;</span>           <span class="hljs-comment"># 可选 leancloud | busuanzi  根据自己需求选择</span><br>    <span class="hljs-attr">pv_format:</span> <span class="hljs-string">&quot;总访问量 &#123;&#125; 次&quot;</span>  <span class="hljs-comment"># 显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同</span><br>    <span class="hljs-attr">uv_format:</span> <span class="hljs-string">&quot;总访客数 &#123;&#125; 人&quot;</span><br></code></pre></div></td></tr></table></figure><p>最终将在网页底部显示访问信息</p><p><img src="PV_UV.png" alt="网站总访客数与访问人次" title="网站总访客数与访问人次"></p><h3 id="文章浏览量"><a href="#文章浏览量" class="headerlink" title="文章浏览量"></a>文章浏览量</h3><p>&emsp;&emsp;经过之前对 <code>web_analytics</code> 的配置后, 文章阅读数的功能可直接在 <code>_config.fluid.yma</code> 的 <code>post</code> 中开启 <sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="Fluid: 日期/字数/阅读时长/阅读数">[6]</span></a></sup></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">meta:</span><br>    <span class="hljs-attr">views:</span>  <span class="hljs-comment"># 阅读次数</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;leancloud&quot;</span>  <span class="hljs-comment"># 统计数据来源，可选：leancloud | busuanzi</span><br>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;&#123;&#125; 次&quot;</span><br></code></pre></div></td></tr></table></figure><p>效果如下</p><p><img src="page_view.png" alt="文章浏览量" title="文章浏览量"></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://hexo.fluid-dev.com/docs/guide/#评论">Fluid: 评论</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://valine.js.org">Valine Docs</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://www.leancloud.cn">LeanCloud</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://waline.js.org">Waline</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://valine.js.org/quickstart.html">Valine: 快速开始</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span><a href="https://hexo.fluid-dev.com/docs/guide/#日期-字数-阅读时长-阅读数">Fluid: 日期/字数/阅读时长/阅读数</a><a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 Hexo 的 Fluid 主题中使用 LaTeX 公式</title>
    <link href="/CS_hexo/2021-05-03_hexo_with_LaTeX/"/>
    <url>/CS_hexo/2021-05-03_hexo_with_LaTeX/</url>
    
    <content type="html"><![CDATA[<h2 id="1-在-Fluid-主题中开启数学公式"><a href="#1-在-Fluid-主题中开启数学公式" class="headerlink" title="1 在 Fluid 主题中开启数学公式"></a>1 在 Fluid 主题中开启数学公式</h2><p>&emsp;&emsp;Hexo 主题 Fluid 中提供了数学公式支持 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="LaTeX 数学公式">[1]</span></a></sup>, 主要流程分为如下几步</p><ol><li><strong>在主题配置文件中开启数学公式:</strong> 这需要在 Fluid 主题的配置文件 <code>_config.fluid.yml</code> 中进行配置 (摘录于主题默认配置文件 <sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="hexo-theme-fluid/_config.yml">[2]</span></a></sup>) <figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br><span class="hljs-attr">math:</span><br>    <span class="hljs-comment"># 开启后文章默认可用，自定义页面如需使用，需在 Front-matter 中指定 `math: true`</span><br>    <span class="hljs-comment"># If you want to use math on the custom page, you need to set `math: true` in Front-matter</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 开启后，只有在文章 Front-matter 里指定 `math: true` 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度</span><br>    <span class="hljs-comment"># If true, only set `math: true` in Front-matter will enable math, to load faster when the page does not contain math</span><br>    <span class="hljs-attr">specific:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># Options: mathjax | katex</span><br>    <span class="hljs-attr">engine:</span> <span class="hljs-string">mathjax</span><br></code></pre></div></td></tr></table></figure> 关于 mathjax 与 katex 引擎的比较见 Fluid 主题的参考文档 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="LaTeX 数学公式">[1]</span></a></sup>.</li><li><strong>更换 Markdown 渲染器:</strong> 第一步先卸载默认渲染器 <figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">npm uninstall hexo-renderer-marked --save<br></code></pre></div></td></tr></table></figure> 第二步根据需要安装如下两个渲染器<strong>之一</strong> (<strong>不能同时存在两个渲染器!</strong>)<ul><li>使用 mathjax 渲染:  <figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">npm install hexo-renderer-kramed --save<br></code></pre></div></td></tr></table></figure></li><li>使用 katex 渲染:  <figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">npm install @upupming/hexo-renderer-markdown-it-plus --save<br></code></pre></div></td></tr></table></figure></li></ul></li></ol><h2 id="2-解决-mathjax-无法渲染行间公式的问题"><a href="#2-解决-mathjax-无法渲染行间公式的问题" class="headerlink" title="2 解决 mathjax 无法渲染行间公式的问题"></a>2 解决 mathjax 无法渲染行间公式的问题</h2><p>&emsp;&emsp;在按照上面步骤中执行操作后, 如果使用 mathjax 进行渲染, 可能会发现通过通常的诸如 <script type="math/tex">F = ma</script> 的的行内公式无法渲染的问题. 经调查, 这是由 markdown 渲染时转义字符的设置引起的 <sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="在Hexo中渲染MathJax数学公式">[3]</span></a></sup>. 目前笔者仅配置过 mathjax 的渲染, 如果使用 katex 渲染时同样出现此问题, 或可考虑一下是否同样存在转义字符的问题.</p><p>&emsp;&emsp;解决方式是调整插件 <code>kramed</code> 中关于行间的字符转义配置. 以 <code>$HEXO</code> 代表 Hexo 博客的根目录, (比如说配置 Hexo 的配置文件就应该在 <code>$HEXO/_config.ylm</code>). 打开文件 <code>$HEXO/node_modules\kramed\lib\rules\inline.js</code>, 取消 <code>\,&#123;,&#125;</code> 的转义. 具体而言, 分下面两步进行修改 <sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="在Hexo中渲染MathJax数学公式">[3]</span></a></sup> :</p><ol><li>修改的 <code>escape</code> 变量值 (在第 11 行左右): <figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//  escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/,</span><br><span class="hljs-built_in">escape</span>: <span class="hljs-regexp">/^\\([`*\[\]()#$+\-.!_&gt;])/</span><br></code></pre></div></td></tr></table></figure></li><li>修改 <code>em</code> 变量值 (在第 20 行左右): <figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//  em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br>em: <span class="hljs-regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span> <br></code></pre></div></td></tr></table></figure></li></ol><h2 id="3-公式使用"><a href="#3-公式使用" class="headerlink" title="3 公式使用"></a>3 公式使用</h2><p>&emsp;&emsp;经过上述配置后理论上就可以按照通常的 Markdown 中的 LaTeX 公式语法来输入公式了. 如:</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 行内公式 (一对单美元符号): $F = ma$<br><span class="hljs-bullet">-</span> 行间公式 (一对双美元符号):<br><span class="hljs-code">    $$</span><br><span class="hljs-code">    G_&#123;\mu\nu&#125; = R_&#123;\mu\nu&#125; - \dfrac&#123;1&#125;&#123;2&#125; R g_&#123;\mu\nu&#125; = 8 \pi T_&#123;\mu\nu&#125;</span><br><span class="hljs-code">    $$</span><br></code></pre></div></td></tr></table></figure><p>效果为:</p><ul><li>行内公式 (一对单美元符号): $F = ma$</li><li>行间公式 (一对双美元符号):<script type="math/tex; mode=display">  G_{\mu\nu} = R_{\mu\nu} - \dfrac{1}{2} R g_{\mu\nu} = 8 \pi G T_{\mu\nu}</script></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://hexo.fluid-dev.com/docs/guide/#latex-数学公式">LaTeX 数学公式</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">hexo-theme-fluid/_config.yml</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://www.jianshu.com/p/7ab21c7f0674">在Hexo中渲染MathJax数学公式</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown 语法速查</title>
    <link href="/CS_web/2021-05-02_markdown_syntax_ref/"/>
    <url>/CS_web/2021-05-02_markdown_syntax_ref/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;本文并不打算全面地介绍 Markdown, 主要致力于记录一些次常用的 Markdown 语法以备使用.</p><h2 id="图片及超链接"><a href="#图片及超链接" class="headerlink" title="图片及超链接"></a>图片及超链接</h2><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">![<span class="hljs-string">fig name</span>](<span class="hljs-link">path &quot;alt name&quot;</span>)<br>[<span class="hljs-string">link display</span>](<span class="hljs-link">link</span>)<br></code></pre></div></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><h3 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h3><p>&emsp;&emsp;表格基本格式为 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Markdown 表格">[1]</span></a></sup></p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">| item 1 | item 2 |<br>|--------|--------|<br>| cell   | cell   |<br>| cell   | cell   |<br></code></pre></div></td></tr></table></figure><p>注意<em>如果处于同一缩进级, 表格与前面的文字部分要空一行</em>. 其中可在表头与内容的分割线处通过 <code>:-</code>, <code>-:</code>, <code>:-:</code> 指定对齐方式, 如:</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">| left | right | center |<br>|:-----|------:|:------:|<br>| cell | cell  | cell   |<br>| cell | cell  | cell   |<br></code></pre></div></td></tr></table></figure><p>如 Vim 等文本编辑器通常提供有辅助源代码对齐的插件. 对于 Vim 插件 <code>plasticboy/vim-markdown</code> <sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="plasticboy/vim-markdown">[2]</span></a></sup>, 其提供了对齐表格的指令 <code>:TableFormat</code>, 笔者将其设为了 NORMAL 模式下的快捷键 <code>&lt;localleader&gt;la</code>.</p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><div class="table-container"><table><thead><tr><th>item 1</th><th>item 2</th></tr></thead><tbody><tr><td>cell</td><td>cell</td></tr><tr><td>cell</td><td>cell</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:left">left</th><th style="text-align:right">right</th><th style="text-align:center">center</th></tr></thead><tbody><tr><td style="text-align:left">cell</td><td style="text-align:right">cell</td><td style="text-align:center">cell</td></tr><tr><td style="text-align:left">cell</td><td style="text-align:right">cell</td><td style="text-align:center">cell</td></tr></tbody></table></div><h2 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h2><p>&emsp;&emsp;之前 (2021.04.30) 从 macOS 的 <em>Note</em> 中复制复选框列表到 Markdown 源文件时, 意外地发现列表开头自动变为了诸如 <code>[x]</code>, <code>[]</code> 的形式, 这才意识到部分 Markdown 或许也支持复选框 <sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="Markdown 复选框 (todo list)">[3]</span></a></sup>.</p><h3 id="Syntax-1"><a href="#Syntax-1" class="headerlink" title="Syntax"></a>Syntax</h3><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">[x] A<br>[ ] B<br><span class="hljs-bullet">-</span> [x] 已选中<br><span class="hljs-bullet">-</span> [ ] 未选中<br></code></pre></div></td></tr></table></figure><p>应注意 “未选中” 框中间有一个空格. (由于本网站的 Markdown 渲染器尚未部署该功能, 故这里不给出效果预览)</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.runoob.com/markdown/md-table.html">Markdown 表格</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://github.com/plasticboy/vim-markdown">plasticboy/vim-markdown</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="http://amwiki.org/doc/?file=020-教程学习篇/005-学习markdown/12-Markdown复选框">Markdown 复选框 (todo list)</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TODO</tag>
      
      <tag>syntax</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 快速上手</title>
    <link href="/CS_hexo/2021-05-02_hexo_quick_start/"/>
    <url>/CS_hexo/2021-05-02_hexo_quick_start/</url>
    
    <content type="html"><![CDATA[<p>本文绝大部分内容参考自 Hexo 的官方参考文档 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Hexo 官方中文文档">[1]</span></a></sup>, 旨在记录笔者本人建立博客过程中觉得比较实用的东西亦即个人体会.</p><h2 id="建站及-Hexo-目录结构"><a href="#建站及-Hexo-目录结构" class="headerlink" title="建站及 Hexo 目录结构"></a>建站及 Hexo 目录结构</h2><p>&emsp;&emsp;类似于 <code>git</code> 使用时需要进行初始化, 使用 Hexi 建站时同样需要进行初始化 <sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="Hexo 建站">[2]</span></a></sup>. 如</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">$ hexo init &lt;folder&gt;<br>$ <span class="hljs-built_in">cd</span> &lt;folder&gt;<br>$ npm install<br></code></pre></div></td></tr></table></figure><p>其中第一行是 <code>hexo</code> 的初始化语句, 第二行是跳转至建站的路径, 第三行是在路径下使用 <code>npm</code> 安装所需插件. 新建完成后的目录结构为</p><figure class="highlight sqf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sqf">.<br>├── <span class="hljs-variable">_config</span>.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── <span class="hljs-variable">_drafts</span><br>|   └── <span class="hljs-variable">_posts</span><br>└── themes<br></code></pre></div></td></tr></table></figure><p>各个路径的简介如下 (详细介绍见官方文档 <sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="Hexo 建站">[2]</span></a></sup>)</p><ul><li><code>_config.yml</code>: Hexo 的 (全局) 配置文件</li><li><code>package.json</code>: 通过 <code>npm install</code> 安装的包</li><li><code>scaffolds</code>: 模板文件夹. 如使用指令 <code>hexo new [layout] &lt;title&gt;</code> <sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="Hexo 写作">[3]</span></a></sup>, 将按照 <code>scaffolds</code> 中的模板文件 <code>[layout].md</code> 在当前目录下建立标题为 <code>&lt;title&gt;</code> 的新文件. (如果设置了资源文件夹<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="资源文件夹">[5]</span></a></sup>, 除了建立 <code>&lt;title&gt;.md</code> 以外, 还会在当前位置建立名为 <code>&lt;title&gt;</code> 的文件夹)</li><li><code>source</code>: 存放博客的核心—Markdown 文件及图片等资源的地方. 该文件夹中除了 <code>_posts</code> 文件夹以外的以下划线 <code>_</code> 开头的文件夹将被忽略, 你可以利用此特性在 <code>source</code> 文件夹下额外建立一个 <code>_draft</code> 的文件夹来存放草稿 <sup id="fnref:8" class="footnote-ref"><a href="#fn:8" rel="footnote"><span class="hint--top hint--rounded" aria-label="Hexo 草稿">[8]</span></a></sup> .</li><li><code>theme</code>: 主题文件</li></ul><h2 id="Markdown-写作"><a href="#Markdown-写作" class="headerlink" title="Markdown 写作"></a>Markdown 写作</h2><p>&emsp;&emsp;采用 Hexo 等博客框架的一大优势就是可以直接使用 Markdown 进行写作, 并自动生成最终所需的 HTML 文件, 而无需直接面对 HTML 文件. 相比通常的 Markdown 语法, Hexo 有自己独有的一些特点. 笔者将简单介绍如下</p><h3 id="Front-Matter"><a href="#Front-Matter" class="headerlink" title="Front Matter"></a>Front Matter</h3><p>&emsp;&emsp;相比于一般的 Markdonw 语法, Hexo 提供了 Front Matter <sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="Front-matter">[6]</span></a></sup>用以指定每篇文章的变量. 如标题名, 建立日期, 分类, 标签等. Front Matter 区域在 Markdonw 文件开头, 以两条三横线分隔, 如</p><figure class="highlight md"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">---<br>title: <br>math: true<br>data: 2021-05-02<br>categories:<br><span class="hljs-bullet">-</span> <br>tags: <br>---<br></code></pre></div></td></tr></table></figure><p>其中若有项目没有指定值. 将采用默认值. 部分参数控制的功能如下</p><ul><li><code>layout</code>: 文章布局, 默认为 <code>config.default_layout</code></li><li><code>title</code>: 文章标题, 默认为文章的文件名</li><li><code>date</code>: 文章的建立日期, 默认为文件建立日期.</li><li><code>update</code>: 文章更新日期</li><li><code>comments</code>: 是否开启文章评论</li><li><p><code>tags</code>: 标签. 若希望有多个标签, 可采取类似 Markdown list 的形式, 如</p>  <figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">tags:<br><span class="hljs-bullet">-</span> CS<br><span class="hljs-bullet">-</span> TODO<br></code></pre></div></td></tr></table></figure></li><li><p><code>categories:</code>文章的分类. 采用类似 Markdown list 的形式, 前一个分类为后一个分类的父分类. 如</p>  <figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">categories:<br><span class="hljs-bullet">-</span> Diary<br><span class="hljs-bullet">-</span> Life<br></code></pre></div></td></tr></table></figure><p>  其含义为: 该文件属于父分类 <code>Diary</code> 的子分类 <code>Life</code>. 关于为文章添加多个分类的方法详见官方参考文档 <sup><a href="#fn_Front Matter" id="reffn_Front Matter">Front Matter</a></sup>.</p></li></ul><p>部分主题 <code>theme</code> 提供了更丰富的 Front Matter. 如 Fluid 主题 <sup><a href="#fn_Fluid" id="reffn_Fluid">Fluid</a></sup> 提供了 <code>math</code>, <code>mermaid</code> 等来控制数学公式和 <code>mermaid</code> 流程图 <sup id="fnref:7" class="footnote-ref"><a href="#fn:7" rel="footnote"><span class="hint--top hint--rounded" aria-label="Mermaid">[7]</span></a></sup> 的渲染开关.</p><h3 id="Tag-插件"><a href="#Tag-插件" class="headerlink" title="Tag 插件"></a>Tag 插件</h3><p>&emsp;&emsp;官方文档直接翻译的是 “标签插件 <sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="标签插件（Tag Plugins）">[4]</span></a></sup>“. 这个名字一开始让我有些不明所以. 后来才认识到, 这个词语应分为两部分: “标签 (Tag)” 与 “插件 (Plugin)”, 亦即这是一类插件, 不过是比较特殊的一类插件. “Plugin” 表明, 这类功能的实现往往需要一些第三方程序—-也就是插件提供; “Tag” 表明, 这类功能的实现主要是由一种被称为 “标签 (Tag)” 的特殊语法来实现. 其与 “HTML 标签” 在使用上有相似之处, 但毕竟是不同的东西, 要注意与 “HTML 标签” 进行区分. 当然, 这一节的标题特意将前半部分用英文、而后半部分用中文, 亦是为了强调对这个名词的正确断句.</p><p>&emsp;&emsp;标签的基本形式形如 <code>&#123;% <syntax> %&#125;</code>, 其中 <code>&lt;syntax&gt;</code> 部分没有特别统一的形式, 需要根据使用的具体插件进行学习. 官方文档 <sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="标签插件（Tag Plugins）">[4]</span></a></sup> 中给出了一些插件的例子.</p><p>&emsp;&emsp;值得主要, 既然这些东西属于 “插件”, 自然必须安装了对应的第三方程序才能使用. 如果你发现一段代码在其他人的文章介绍里可以进行渲染, 但在自己的 Hexo 却无法实现, 就得怀疑是否是因为没有安装相应插件了.</p><h2 id="资源-Asset-文件夹"><a href="#资源-Asset-文件夹" class="headerlink" title="资源 (Asset) 文件夹"></a>资源 (Asset) 文件夹</h2><p>&emsp;&emsp;相比于在 <code>source</code> 文件夹下建立诸如 <code>fig</code> 文件夹来统一管理文章所用到的资源 (如图片插入), 笔者更喜欢采取 “project” 的范式来撰写文章. 亦即将每一篇视为一个独立的 “project”, 不同 “project” 的资源彼此独立存储, 以减少不同 “project” 之间的耦合, 增强各自的独立性. 为在 Hexo 中实现此目的, 可在 <code>_config.yml</code> 中配置 <sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="资源文件夹">[5]</span></a></sup></p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">marked:</span><br>  <span class="hljs-attr">prependRoot:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">postAsset:</span> <span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><p>当这些选项开启后, 可在与文章同名的文件夹中放置资源, 并在对应文章中通过相对该文件夹的路径来引用资源. 例如, <code>source/</code> 下有博客 <code>hello.md</code>, 以及文件夹 <code>source/hello/</code>, 该文件夹中有子文件夹 <code>fig/</code>, 其中有图片 <code>test.png</code>. 那么在 <code>hello.md</code> 中使用该图片时, 可以直接使用相对与 <code>source/hello/</code> 的路径 <code>fig/test.png</code>, 而非相对 <code>source</code> 的路径. </p><p>&emsp;&emsp;在官方中文文档中, 资源文件夹对应的是 Asset 文件夹, 而非 Source 文件夹. 笔者个人认为, Asset 文件夹的功效其实更接近英文 “Assistant”, 亦即辅助. 实际上, 官方文档中将 “Asset” 诠释为 “<code>source</code> 文件夹中除了文章以外的所有文件”. 从这个角度来说, 将此文件夹理解为 “使博客内容更加丰富的辅助文件” 也颇为贴切.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://hexo.io/zh-cn/docs/index.html">Hexo 官方中文文档</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://hexo.io/zh-cn/docs/setup">Hexo 建站</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://hexo.io/zh-cn/docs/writing">Hexo 写作</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://hexo.io/zh-cn/docs/tag-plugins.html">标签插件（Tag Plugins）</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://hexo.io/zh-cn/docs/asset-folders">资源文件夹</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span><a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter</a><a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span><a href="https://mermaid-js.github.io/mermaid/#/">Mermaid</a><a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:8" class="footnote-text"><span><a href="https://hexo.io/zh-cn/docs/writing#草稿">Hexo 草稿</a><a href="#fnref:8" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 macOS 上使用 Firefox 运行 Flash</title>
    <link href="/CS_web/2021-05-02_Firefox_flash/"/>
    <url>/CS_web/2021-05-02_Firefox_flash/</url>
    
    <content type="html"><![CDATA[<h2 id="Flash-插件的兼容性"><a href="#Flash-插件的兼容性" class="headerlink" title="Flash 插件的兼容性"></a>Flash 插件的兼容性</h2><p>&emsp;&emsp;从不久前开始, 几乎所有浏览器都取消了对 Flash 的支持. 但鉴于部分老旧网页的服务仍需 Flash 插件 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Adobe Flash Playerhttps://www.flash.cn">[1]</span></a></sup> (比如新建网站时公安备案的网站 <sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="全国互联网安全管理平台">[2]</span></a></sup>, 目前其在填写网站备案信息时会提示需要 Flash 插件), 保留一款支持 Flash 的浏览器很有必要.</p><p>&emsp;&emsp;Firefox 的较新版本是不支持 Flash 的. 想要正确运行 Flash 插件, 需要安装较旧的版本. 根据插件兼容性说明 (见 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Adobe Flash Playerhttps://www.flash.cn">[1]</span></a></sup> 主页面), 其对 macOS 的支持情况为:</p><ul><li>系统要求:Mac OS X 10.10 版或更高版本</li><li>浏览器要求: 低于14版本的Safari、低于85版本的Mozilla Firefox、低于88版本内核的Google Chrome</li></ul><p>安装方式同一般的 macOS App 一致: 在网站上 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Adobe Flash Playerhttps://www.flash.cn">[1]</span></a></sup> 下载对应的 <code>.dmg</code> 文件, 并根据提示安装即可.</p><h2 id="关闭-Flash-插件的自动更新"><a href="#关闭-Flash-插件的自动更新" class="headerlink" title="关闭 Flash 插件的自动更新"></a>关闭 Flash 插件的自动更新</h2><p>&emsp;&emsp;笔者在下载旧版本后一开始可能正常运行 Flash 插件, 但等一段时间以后就又无法运行了. 经检查发现, 关键原因在于 Firefox 默认进行自动更新.</p><p>&emsp;&emsp;Firefox 本身是无法直接关闭自动更新的. 欲停止自动更新, 需配置 Firefox 的策略文件 <sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="禁用 Firefox 自动更新（macOS 版）">[3]</span></a></sup>. 首先打开文件 (没有则自行新建. 其本质上是一个文本文件)</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">Firefox.app<span class="hljs-regexp">/Contents/</span>Resources<span class="hljs-regexp">/distribution/</span>policies.json<br></code></pre></div></td></tr></table></figure><p>并向其中写入如下内容以禁止自动更新</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&#123;<br>  <span class="hljs-string">&quot;policies&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;DisableAppUpdate&quot;</span>: <span class="hljs-literal">true</span><br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>操作完成后在 <em>Firefox</em> 菜单栏 <code>Firefox</code> -&gt; <code>关于 Firefox</code> 界面可看见 <code>更新已被系统管理员禁用</code> 的字样.</p><p><img src="forbid_update.png" alt="禁用更新成功后" title="禁用更新成功后"></p><p>&emsp;&emsp;注意, 一旦 Firefox 已经自动更新, 目前笔者尚未发现直接降级的方法, 此时最好卸载当前 Firefox 后重新安装旧版</p><h2 id="打开本地-Flash-文件"><a href="#打开本地-Flash-文件" class="headerlink" title="打开本地 Flash 文件"></a>打开本地 Flash 文件</h2><h3 id="获取-Flash-文件-swf"><a href="#获取-Flash-文件-swf" class="headerlink" title="获取 Flash 文件 (.swf)"></a>获取 Flash 文件 (<code>.swf</code>)</h3><p>&emsp;&emsp;Flash 文件的后缀一般为 <code>.swf</code>. 一般来说, 如果想要下载网页上的某个 Flash 资源 (如一个 Flash 小游戏), 可通过开发者页面 (如 Chrome 下按 <code>F12</code>) 以查看对应的 HTML 源码. 在源码中搜索 <code>.swf</code>, 找到想要下载的 Flash 文件链接后, 下载对应文件即可 (如 <em>Safari</em> 中可通过右击鼠标, 找到 <code>Download Linked File</code> 并点击来实现)</p><h3 id="使用-Firefox-打开本地-swf-文件"><a href="#使用-Firefox-打开本地-swf-文件" class="headerlink" title="使用 Firefox 打开本地 .swf 文件"></a>使用 Firefox 打开本地 <code>.swf</code> 文件</h3><p>&emsp;&emsp;对 <em>Firefox</em>, 打开本地文件时 Flash 插件默认是不启用的. 欲对本地文件启用 Flash 插件 <sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="火狐始终打不开本地swf文件">[4]</span></a></sup>, 在地址栏中输入 <code>about:config</code>, 搜索找到 <code>plugins.http_https_only</code> 项, 双击将其设置为 <code>flase</code> 即可.</p><p><strong>关于选项名的理解 :</strong> 选项名 <code>plugins.http_https_only</code> 可理解为 “只在打开 http/https 启用 (Firefox 的) 插件”. 由于 <code>http/https</code> 是不同计算机进行通信时的通信协议, 该选项若为 <code>ture</code>, 则意味着只有在和其它计算机进行通信时才能启用 Firefox 插件. 换而言之, 该选项若打开, 则在访问本地资源时无法启用 Firefox 插件, 因而要将其设置为 <code>false</code> 以实现启用 Flash 插件打开本地 <code>.swf</code> 文件的需求.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="link">Adobe Flash Player</a><a href="https://www.flash.cn">https://www.flash.cn</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="http://www.beian.gov.cn/portal/index.do">全国互联网安全管理平台</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://blog.csdn.net/netgc/article/details/107593377">禁用 Firefox 自动更新（macOS 版）</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://blog.csdn.net/pkowner/article/details/79416652">火狐始终打不开本地swf文件</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS Web</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 插件简介</title>
    <link href="/CS_hexo/2021-04-19_hexo_plugin_introduce/"/>
    <url>/CS_hexo/2021-04-19_hexo_plugin_introduce/</url>
    
    <content type="html"><![CDATA[<blockquote><p>写这篇文章的目的是为了记录使用 HEXO 的过程中了解到的插件</p></blockquote><h2 id="hexo-pdf"><a href="#hexo-pdf" class="headerlink" title="hexo-pdf"></a><code>hexo-pdf</code></h2><blockquote><p>(2021-04-19) </p></blockquote><ul><li><strong>Introduce:</strong> Hexo tag for embeded pdf</li><li><strong>Install:</strong>  <figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">npm install --save hexo-pdf<br></code></pre></div></td></tr></table></figure></li><li><strong>Example:</strong>  <figure class="highlight django"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">pdf</span> http://7xov2f.com1.z0.glb.clouddn.com/bash_freshman.pdf %&#125;</span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name">pdf</span> ./bash_freshman.pdf %&#125;</span><br></code></pre></div></td></tr></table></figure></li></ul><p><strong>Reference :</strong> </p><ul><li><a href="https://github.com/superalsrk/hexo-pdf">superalsrk/hexo-pdf</a></li><li><a href="https://www.jianshu.com/p/111452a36e94">HEXO博客中插入PDF</a></li></ul><h2 id="fluid-dev-hexo-theme-fluid"><a href="#fluid-dev-hexo-theme-fluid" class="headerlink" title="fluid-dev/hexo-theme-fluid"></a><code>fluid-dev/hexo-theme-fluid</code></h2><blockquote><p>(2021-04-18) </p></blockquote><ul><li><strong>Introduce:</strong> Hexo theme plugin</li></ul><p><strong>Reference :</strong></p><ul><li><a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid-dev/hexo-theme-fluid</a></li><li><a href="https://zhuanlan.zhihu.com/p/137679728">一款被大厂选用的 Hexo 博客主题</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>CS Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ref</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 的文件命名格式</title>
    <link href="/CS_hexo/2021-04-19-name_rule_of_hexo_markdown/"/>
    <url>/CS_hexo/2021-04-19-name_rule_of_hexo_markdown/</url>
    
    <content type="html"><![CDATA[<h2 id="日期开头的分隔符问题"><a href="#日期开头的分隔符问题" class="headerlink" title="日期开头的分隔符问题"></a>日期开头的分隔符问题</h2><p>&emsp;&emsp;今天尝试在文件名开头使用以下划线分隔的日期, 如 <code>2020_12_05_DG_in_spherical_coordinate</code>, 在网页渲染时会出现无法渲染的情况. 但之后因不明原因, 该情况又自己消失了.</p><h2 id="asset-文件夹的分隔符问题"><a href="#asset-文件夹的分隔符问题" class="headerlink" title="asset 文件夹的分隔符问题"></a><code>asset</code> 文件夹的分隔符问题</h2><p>&emsp;&emsp;另一个关于文件命名的问题是, 使用指令 <code>hexo new &lt;file_name&gt;</code> 时, 如果 <code>&lt;file_name&gt;</code> 中含有下划线, 则自动生成的 <code>asset</code> 文件夹的名字中下划线将全被替换为短横线.</p>]]></content>
    
    
    <categories>
      
      <category>CS Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TODO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/hello-world/"/>
    <url>/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></div></td></tr></table></figure><p>More info: [Writin]<a href="https://hexo.io/docs/writing.html">https://hexo.io/docs/writing.html</a>)</p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo server<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo generate<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="中文测试"><a href="#中文测试" class="headerlink" title="中文测试"></a>中文测试</h3><p>&emsp;&emsp;这是一句中文</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>球面坐标系中的微分几何及其应用</title>
    <link href="/MATH_differentail_geometry/2020-12-05_(DG)_DG_in_spherical_coordinate/"/>
    <url>/MATH_differentail_geometry/2020-12-05_(DG)_DG_in_spherical_coordinate/</url>
    
    <content type="html"><![CDATA[<p><img src="/fig/cover/cover.png" alt=""></p><blockquote><p>前几个月一直忙着保研的事情, 好像已经好几个月没写成形一些的 note 了… 算一算上一次在知乎上传 note 好像是上学期期末? 话说这学期也快到期末了, 没想到鸽一下一个学期就没了 <code>┑(￣Д ￣)┍</code>.</p><p>今后上传的笔记在相比以往会有一些调整. 最显注的可能是封面选择. 主要是考虑到文风似乎过于严肃了一些, 所以向其它一些文章作者学习一下, 封面干脆换成可爱的二次元妹子, 希望能吸引更多的 (lsp) 读者 <code>(⊙ω⊙)</code> (虽然我有点怀疑是不是因为前面的大半年压力太大, 导致现在整个人变宅了一点…). 其二是之前上传笔记的动机是为了复习四大力学以应对理论所的面试, 但后来我将专栏名称改成了 “冬季银河的理论物理笔记”, 因此只要是和物理相关的一些内容应该都会上传. 其三是之前的笔记内容上更专一一些, 基本上每一篇都是来自某本教材的某一节或某几节, 今后的笔记应该会以平时碰到的问题为主干来组织内容, 因而可能会混杂好几门教材或好几门课的内容的情况 (比如这次的就混杂了微分几何, 数学物理方法, 量子力学三门课程的内容. 之所以想到计算球面坐标系的 Christoff 符号, 也是因为看宇宙学的时候计算了 FRW 度规下的 Christoff 符号, 打算再找个算 Christoff 符号的例子练习一下.). 最近一段时间主要是在看场论和宇宙学, 之后可能这些方面的内容会多一点. 最后一点是笔记上传格式的变化, 之前的时候都是把 LaTeX 编译的 pdf 文件导出后拼接成一整张长图, 但现在看来不拼接可能阅读体验会好一些, 而且也便于有需要的读者将每页图片保存后重新整合为单独的 pdf 文件. 所以今后除了将多余的页边剪裁一下以外, 不再将图片进行拼接.</p><blockquote><p>写这篇文章的主要动机是前不久在写数理方法的作业的参考答案的时候, 刚好碰到了球坐标下 Laplace 算符的问题, 加之高量考试又有径向角动量算符的题目, 以及一直想算一个微分几何的具体算例, 所以就写了这篇 note.</p></blockquote><p>这次的封面是藤原大佬 (pid: 27517) 的画中我最喜欢的一张, 算是入坑作吧 (最早好像在贴吧时代就看见过了).</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>&emsp;&emsp;正文部分一开始先计算了球面坐标系下的度规张量, 并由此计算了相应的 Christoff 符号. 随后利用相应的计算结果, 讨论了 Laplace 算符和角动量算符在球面坐标系下的形式. 其中在 Laplace 算符的部分, 简单讨论了分离变量的问题. 在角动量算符的部分, 简单阐述了协变导数在动量及角动量算符中的必要性, 随后分别利用抽象指标和具体指标进行了计算, 并定义了径向动量模方算符, 以及能过对比证明了了角向 Laplace 算符与角动量算符只相差一个常系数. 文章的最后, 还从径向动量算符的定义出发, 证明了该算符的平方正是之前所定义的径向动量模方算符.</p><p>&emsp;&emsp;附录部分是笔记的手稿, 内有具体的计算过程. 用英文主要是因为英文写起来比较省力 <code>_(:з」∠)_</code>. (注意手稿的每一页是从左往右的, 水印的位置是每一页的右上角)</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><img src="figure/main_body-1.jpg" alt=""><br><img src="figure/main_body-2.jpg" alt=""><br><img src="figure/main_body-3.jpg" alt=""><br><img src="figure/main_body-4.jpg" alt=""><br><img src="figure/main_body-5.jpg" alt=""><br><img src="figure/main_body-6.jpg" alt=""><br><img src="figure/main_body-7.jpg" alt=""></p><h2 id="附录-手稿"><a href="#附录-手稿" class="headerlink" title="附录 (手稿)"></a>附录 (手稿)</h2><p><img src="figure/handwriting_1.jpg" alt=""><br><img src="figure/handwriting_2.jpg" alt=""><br><img src="figure/handwriting_3.jpg" alt=""><br><img src="figure/handwriting_4.jpg" alt=""><br><img src="figure/handwriting_5.jpg" alt=""><br><img src="figure/handwriting_6.jpg" alt=""><br><img src="figure/handwriting_7.jpg" alt=""><br><img src="figure/handwriting_8.jpg" alt=""><br><img src="figure/handwriting_9.jpg" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>Differential Geometry</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>流形的基本概念</title>
    <link href="/PHYS_general_relativity/2020-05-08_(GR)_basic_conception_of_manifold/"/>
    <url>/PHYS_general_relativity/2020-05-08_(GR)_basic_conception_of_manifold/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本来是在看《物理学中的群论》中的第四章的, 奈何实在看不懂里面对李群的介绍, 于是开始看梁灿彬的《微分几何入门与广义相对论》中册的附录中关于李群的部分. 不得不说, 有微分几何基础的话看这部分相当的舒畅. 看的过程中顺带复习了一些关于微分几何的基本概念.</p><p>这篇文章对应《微分几何入门与广义相对论》第 2.1 节的内容.</p></blockquote><p><img src="./2.1_basic_conception_about_manifold.png" alt="outline"></p><h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1 基本概念"></a>1 基本概念</h2><p>&emsp;&emsp;首先给出流形的定义:</p><ul><li><u><strong>微分流形:</strong></u><br>对于拓扑空间 $M$, 若其有开覆盖 $\left\{ O_\alpha \right\}$ (即 $M = \bigcap_{\alpha} O_\alpha$) 满足下列条件, 则可称为 $n$ 维微分流形, 或简称 $n$ 维流形:<ol><li>$\forall\ O_\alpha$, $\exists$ 拓扑同胚映射 $\psi_\alpha: O_\alpha \to V_\alpha$ ($V_\alpha$ 是用通常拓扑衡量的开子集);</li><li>若 $O_\alpha \cap O_\beta$, 则复合映射 $\psi_\beta \circ \psi_\alpha^{-1}$ 是 $C^{\infty}$ 光滑的;</li></ol></li></ul><p>粗略地说, $n$ 维流形是带有微分结构的拓扑空间, 其局部地像 $\mathbb{R}^n$ (体现在可以局部地构建该集合与 $\mathbb{R}^n$ 的同胚关系), 但整体不一定像 $\mathbb{R}^n$. 具体而言, 定义的第一条表明, 微分流形是由一片一片的开集构成的, 每一片 $n$ 维微分流形上的开集, 都可通过某种映射, 使得其与 $R^{n}$ 上的某个开集同胚. 而定义的第二条表明, 如果 $M$ 的两个开集有交, 则可诱导出一个 $R^{n}$ 的某个开区域到 $R^{n}$ 的另一开区域的映射, 这个映射按照通常在数学分析中的定义是 $C^{\infty}$ 的.</p><h2 id="2-坐标系与图"><a href="#2-坐标系与图" class="headerlink" title="2 坐标系与图"></a>2 坐标系与图</h2><p>&emsp;&emsp;由于流形上每一片开集都可和 $\mathbb{R}^n$ 上的某个开区域对应, 因此可以借助这个开区域定义坐标系:</p><ul><li><u><strong>流形上的坐标系:</strong></u><br>设映射 $\psi_\alpha: O_\alpha \to \psi_\alpha[O_\alpha] \subset \mathbb{R}^n$ 是流形上的某个开集 $O_\alpha$ 到 $\mathbb{R}^n$ 的某个开区域的拓扑同胚映射, 则任一 $p \in O_\alpha$ 自然地通过这个映射与 $n$ 个数对应, 称这 $n$ 个数是点 $p$ 对应的坐标, 称 $(O_\alpha, \psi_\alpha)$ 构成一个坐标系.</li></ul><p>坐标系的取法往往不是唯一的. 试想流形上有交集的两个开区域 $O_\alpha$ 与 $O_\beta$, 其分别对应映射 $\psi_\alpha$ 与 $\psi_\beta$. 则在交集 $O_\alpha \cap O_\beta$ 中, 即可使用坐标系 $(O_\alpha, \psi_\alpha$, 也可使用坐标系 $(O_\beta, \psi_\beta)$. 于是同一个点对应两个 $\mathbb{R}^{n}$ 上的点, 由此可诱导出联系则两个点的一个的映射 (或者说 $n$ 个 $n$ 元函数):</p><script type="math/tex; mode=display">    x'^{\mu} = \phi^{\mu}(x^{\nu}),\ \mu, \nu = 1, \dots , n</script><p>称这个映射 (或者说 $n$ 个 $n$ 元函数) 为一个 <strong>坐标变换</strong>. 此外, 通常也将对应的 $n$ 个数 $\left\{ x^{\mu} \right\}$ 称为坐标系, 以及将坐标变换简记为:</p><script type="math/tex; mode=display">    x'^{\mu} = x'^{\mu}(x^{\nu}),\ \mu, \nu = 1, \dots , n</script><p>&emsp;&emsp;接下来介绍数学上另一种看待坐标系的观点:</p><ul><li><u><strong>图:</strong></u><br>坐标系 $(O_\alpha, \psi_\alpha)$ 在数学上又叫 <strong>图</strong>. 若图中的映射满足微分流形定义中对映射的要求, 则将这样的图的集合 $\left\{ (O_\alpha, \psi_\alpha) \right\}$ 称为 <strong>图册</strong>. 其中定义第二个要求又叫相容性条件, 因此图册中任意两个图都是相容的.</li></ul><p>对于同一个微分流形, 可以两个图册并不一定是相容的, 此时说两个图册代表不同的 <strong>微分结构</strong>.</p><h2 id="3-流形间的映射"><a href="#3-流形间的映射" class="headerlink" title="3 流形间的映射"></a>3 流形间的映射</h2><p>&emsp;&emsp;流形与拓扑不同的是, 除了具有拓扑结构以外, 还具有微分结构 (可以视为通过 $\mathbb{R}^n$ 上的函数来间接体现的). 对于流形间的映射, 除了一般的连续性以外, 还可谈论高阶的连续性. 具体定义如下:</p><ul><li><u><strong>流形间映射的连续性:</strong></u><br>  设 $f: M \to M’$ 是流形间的映射, 则可诱导出一个多元函数 $\psi’_\beta \circ f \circ \psi_\alpha^{-1}$ ($\psi’_\beta$ 与 $\psi’_\alpha$ 分别是 $M’$ 与 $M$ 上的坐标系). 若对于任意 $p \in M$, 该多元函数是 $C^{r}$ 的, 则称映射 $f$ 是 $C^{r}$ 类映射.</li></ul><p>&emsp;&emsp;类似与之前定义的拓扑同胚, 这里可以定义微分同胚, 反映两个流形微分结构的一致性:</p><ul><li><u><strong>微分同胚:</strong></u><br>  若存在 $f: M \to M’$, 满足:<ol><li>$f$ 是一一到上的;</li><li>$f$ 及 $f^{-1}$ 是 $C^{\infty}$ 的;<br>则称 $f$ 是 $M$ 到 $M’$ 的微分同胚映射, 且称 $M$ 与 $M’$ 互为微分同胚.</li></ol></li></ul><p>流形间的映射 $f: M \to M’$ 有一个特例, 即 $M’$ 为 $\mathbb{R}$ 的情形, 此时流形 $M$ 的每一点都对应着一个实数, 由此可引出第一个关于 “场” 的概念:</p><ul><li><u><strong>流形上的标量场:</strong></u><br>  称映射 $f: M \to \mathbb{R}$ 为流形 $M$ 上的 <strong>函数</strong>, 或 $M$ 上的 <strong>标量场</strong>. 若 $f$ 为 $C^{\infty}$ 的, 则称该标量场是 <strong>光滑的</strong>. 将 $M$ 上全体光滑标量场的集合记为 $\mathscr{F}_{M}$ 或 $\mathscr{F}$.</li></ul>]]></content>
    
    
    <categories>
      
      <category>General Relativity</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
