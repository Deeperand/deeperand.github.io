<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>[DEBUG] Convert pdf into picture but Black Background Appear</title>
    <link href="/CS_linux/2021-09-17_DEBUG_convert_pdf_but_black_bg_appear/"/>
    <url>/CS_linux/2021-09-17_DEBUG_convert_pdf_but_black_bg_appear/</url>
    
    <content type="html"><![CDATA[<p>Yestarday, when I try to convert a <code>.pdf</code> file which contains a picture into <code>.jpg</code> with <code>conver</code>, I found the background of the output picture becames black</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">convert -density 400  QFT\ 1\ \(Homework\).pdf handwriting.jpg<br></code></pre></div></td></tr></table></figure><p><img src="black_bg.jpg" alt=""></p><p>I guess the problem might raise from the existing of a picture in the <code>.pdf</code> file itself, which lead other area became transparency. To solve the problme, one can add parameter <code>-alpha remove</code> <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Replace transparency in PNG images with white background">[1]</span></a></sup> , e.g.</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">convert -density 400  QFT\ 1\ \(Homework\).pdf -alpha remove handwriting.jpg<br></code></pre></div></td></tr></table></figure><p>then the problem is solved</p><p><img src="normal_bg.jpg" alt=""></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://stackoverflow.com/questions/2322750/replace-transparency-in-png-images-with-white-background">Replace transparency in PNG images with white background</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>DEBUG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TRICK] Let Key Holding and Repeating in VSCode</title>
    <link href="/CS_GUI_software/VSCode/2021-09-17_TRICK_hold_and_repeat/"/>
    <url>/CS_GUI_software/VSCode/2021-09-17_TRICK_hold_and_repeat/</url>
    
    <content type="html"><![CDATA[<p>When hold a key for a while (e.g. <code>#</code>), one except the same key will repeat automatically (i.e. <code>############</code>). However, the method doesn’t work by default with VSCode of macOS. To disable <em>Apple Press</em>, one need run the command in command line <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="How do I press and hold a key and have it repeat in VSCode?">[1]</span></a></sup> and re-open VSCode</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">defaults write com.microsoft.VSCode ApplePressAndHoldEnabled -bool <span class="hljs-literal">false</span><br></code></pre></div></td></tr></table></figure><p>if you want to enable again</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">defaults write com.microsoft.VSCode ApplePressAndHoldEnabled -bool <span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://stackoverflow.com/questions/39972335/how-do-i-press-and-hold-a-key-and-have-it-repeat-in-vscode">How do I press and hold a key and have it repeat in VSCode?</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS GUI Software</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>TRICK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TRICK] Find Directory GoodNotes Documents in macOS</title>
    <link href="/CS_macOS/2021-09-17_TRICK_find_GoodNotes_docs_at_macOS/"/>
    <url>/CS_macOS/2021-09-17_TRICK_find_GoodNotes_docs_at_macOS/</url>
    
    <content type="html"><![CDATA[<p>The documents of <em>GoodNotes</em> of macOS aren’t some single files which stored at iCould folder. To find these directories, one can use <em>TencentLemon</em>.</p><ul><li><p>1st step: open <em>TencentLemon</em>, click <code>App Uninstall</code> (note which doesn’t means we really want to delete <em>GoodNotes</em> !)</p><p>  <img src="app_uninstall_1.png" alt=""></p></li><li><p>2ed step: find <code>GoodNotes</code>, click <code>Details</code></p><p>  <img src="app_uninstall_2.png" alt=""></p></li><li><p>3rd step: check each type of files, the largest item is the documents of <em>GoodNotes</em></p><p>  <img src="sand_box.png" alt=""></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>CS macOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>TRICK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TRICK] Open Current Directory in iTerm from Finder</title>
    <link href="/CS_macOS/2021-09-17_TRICK_open_dir_in_iterm/"/>
    <url>/CS_macOS/2021-09-17_TRICK_open_dir_in_iterm/</url>
    
    <content type="html"><![CDATA[<p>The software <code>Go2Shell</code> <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Go2Shell">[1]</span></a></sup> can help user open current directory in iTerm from Finder. To open in new tab rather than new window, set <code>Open terminal in</code> as <code>New Tab (Experimental)</code></p><p><img src="open_in_new_tab.png" alt=""></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://zipzapmac.com/Go2Shell">Go2Shell</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS macOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>TRICK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TRICK] Sync Personal Configuration of VSCode</title>
    <link href="/CS_GUI_software/VSCode/2021-09-17_TRICK_sync_config/"/>
    <url>/CS_GUI_software/VSCode/2021-09-17_TRICK_sync_config/</url>
    
    <content type="html"><![CDATA[<p>VSCode now support personal configuration syncing by it self, so the extension <code>Settings Sync</code> is no need now. To turn on syncing, click the gear icon at the left-down corner, then click <code>Turn on Setting Sync</code></p><p><img src="sync_config.png" alt=""></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://zhuanlan.zhihu.com/p/353856858">Settings Sync——同步VSCode配置</a></p>]]></content>
    
    
    <categories>
      
      <category>CS GUI Software</category>
      
      <category>VSCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>TRICK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TRICK] Common Used Shortcut of Musescore</title>
    <link href="/CS_GUI_software/Musescore/2021-09-17_TRICK_musescore_shortcut/"/>
    <url>/CS_GUI_software/Musescore/2021-09-17_TRICK_musescore_shortcut/</url>
    
    <content type="html"><![CDATA[<h1 id="Note-Edit"><a href="#Note-Edit" class="headerlink" title="Note Edit"></a>Note Edit</h1><ul><li><p>augmentation dot</p><p>  <img src="augmentation_dot.png" alt=""></p></li><li><p>accident</p><p>  <img src="accidental.png" alt=""></p></li><li><p>tied</p><p>  <img src="tied.png" alt=""></p></li><li><p>change staff without change voice part: <code>&lt;cmd-S-up&gt;</code>, <code>&lt;cmd-S-down&gt;</code> <sup><a href="#fn_2" id="reffn_2">2</a></sup></p></li><li>change voices: <code>&lt;cmd-M-1&gt;</code>, <code>&lt;cmd-M-2&gt;</code>, <code>&lt;cmd-M-3&gt;</code>, <code>&lt;cmd-M-4&gt;</code> <sup><a href="#fn_3" id="reffn_3">3</a></sup></li></ul><h1 id="Measure"><a href="#Measure" class="headerlink" title="Measure"></a>Measure</h1><ul><li><p>insert measure: <code>&lt;S-I&gt;</code></p><p>  <img src="insert_measure.png" alt=""></p></li><li><p>delete measure: <code>&lt;cmd-fn-backspace&gt;</code> <sup><a href="#fn_1" id="reffn_1">1</a></sup></p></li></ul><h1 id="Rhythm"><a href="#Rhythm" class="headerlink" title="Rhythm"></a>Rhythm</h1><ul><li><p>triplet</p><p>  <img src="triplet.png" alt=""></p></li></ul><h1 id="Type-Setting"><a href="#Type-Setting" class="headerlink" title="Type Setting"></a>Type Setting</h1><ul><li><p>position of elements</p><p>  <img src="elements_position.png" alt=""></p></li></ul><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><sup><a href="#fn_1" id="reffn_1">1</a></sup> <a href="https://musescore.org/en/node/71">Measure operations</a><br><sup><a href="#fn_2" id="reffn_2">2</a></sup> <a href="https://musescore.org/en/handbook/2/cross-staff-notation">Cross-staff notation</a><br><sup><a href="#fn_3" id="reffn_3">3</a></sup> <a href="https://musescore.org/en/handbook/3/voices">Voices</a></p>]]></content>
    
    
    <categories>
      
      <category>CS GUI Software</category>
      
      <category>Musescore</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>TRICK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TRICK] Set Time Format for macOS</title>
    <link href="/CS_macOS/2021-09-17_TRICK_set_time_format/"/>
    <url>/CS_macOS/2021-09-17_TRICK_set_time_format/</url>
    
    <content type="html"><![CDATA[<p>To change the format of macOS, such as 24-hour, one can set at <code>System Perference</code> -&gt; <code>Dock &amp; Manu Bar</code> -&gt; <code>Clock</code></p><p><img src="clock_format.png" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>CS macOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>TRICK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[DEBUG] Install Markdown Preview Plug `iamcco/markdown-preview.nvim`</title>
    <link href="/CS_vim/2021-09-07_DEBUG_install_markdown_preview_nvim/"/>
    <url>/CS_vim/2021-09-07_DEBUG_install_markdown_preview_nvim/</url>
    
    <content type="html"><![CDATA[<blockquote><p>To install <code>iamcco/markdown-preview.nvim</code> <sup><a href="#fn_1" id="reffn_1">1</a></sup> , just select a correct network environment and wait and ignore the network warning.</p></blockquote><span id="more"></span><p>On macOS, the first step is make sure you already have package <code>nodejs</code> and <code>yarn</code>. One can install them via <code>brew</code></p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">$ brew install nodejs yarn<br></code></pre></div></td></tr></table></figure><p>where <code>yarn</code> <sup><a href="#fn_1" id="reffn_1">1</a></sup> will be used to install the deepending packages. Then (assume you use <code>vim-plug</code> to manage your vim packages) add the following line to your <code>vimrc</code></p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">Plug <span class="hljs-string">&#x27;iamcco/markdown-preview.nvim&#x27;</span>, &#123; <span class="hljs-string">&#x27;do&#x27;</span>: <span class="hljs-string">&#x27;cd app &amp;&amp; yarn install&#x27;</span>  &#125;<br></code></pre></div></td></tr></table></figure><p>then run <code>:PlugInstall</code>. The command <code>&#39;do&#39;: &#39;cd app &amp;&amp; yarn install&#39;</code> means it will run shell command <code>cd app &amp;&amp; yarn install</code> at the root directory of <code>iamcco/markdown-preview.nvim</code> package, whern <code>yarn install</code> means use <code>yarn</code> to install depending packages. One week ago, when I try to install <code>iamcco/markdown-preview.nvim</code> at my MacBook Air (M1), but alwayse meet the problem that <code>yarn</code> told me checking my network condition. Finally, <em>I ignored the warning, but the installing still continue!</em> The most important things is if the depending package is not installed properly, the plug can’t run as what you wish. Furthermore, one can check if the depending packages is installed by the size of the folder <code>node_modules</code> is around 118 Mb, and the total size of plug folder <code>markdown-preview.nvim</code> is around 130 Mb.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><sup><a href="#fn_1" id="reffn_1">1</a></sup> <a href="https://github.com/iamcco/markdown-preview.nvim">iamcco/markdown-preview.nvim</a><br><sup><a href="#fn_2" id="reffn_2">2</a></sup> <a href="https://classic.yarnpkg.com/en/docs/cli/install/">yarn install</a></p><p>the following links might be also helpful<br><sup><a href="#fn_3" id="reffn_3">3</a></sup> <a href="https://github.com/iamcco/markdown-preview.nvim/issues/50">E117: Unknown function: mkdp#util#install #50</a></p>]]></content>
    
    
    <categories>
      
      <category>CS Vim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>DEBUG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TRICK] Change Account Name of macOS</title>
    <link href="/CS_macOS/2021-09-07_TRICK_change_account_name/"/>
    <url>/CS_macOS/2021-09-07_TRICK_change_account_name/</url>
    
    <content type="html"><![CDATA[<h2 id="STEP-1-Rename-Home-Folder"><a href="#STEP-1-Rename-Home-Folder" class="headerlink" title="STEP 1: Rename Home Folder (~/)"></a>STEP 1: Rename Home Folder (<code>~/</code>)</h2><ul><li>At first, <em>make sure you have an another administrator account</em> (denotes as <em>Account B</em>) which is different from what you want to renaming (denotes as <em>Account A</em>). Then log out of the account you’re renaming  and log in <em>Account B</em>.</li><li>If assume the new name of <em>Account A</em> is <em>Bob</em> and the old name is <em>Alice</em>. Rename <code>/Users/Alice</code> as <code>/Users/Bob</code>. (NOTE: if you still log in with <em>Account A</em>, the operation can’t be executed!)</li></ul><h2 id="STEP-2-Rename-Account"><a href="#STEP-2-Rename-Account" class="headerlink" title="STEP 2: Rename Account"></a>STEP 2: Rename Account</h2><ul><li>keep logging in with <em>Account B</em>, entering <code>System Perference</code> -&gt; <code>Users &amp; Groups</code>, <code>&lt;Ctrl-click&gt;</code> the users you want to rename, then choose <code>Advanced Options</code>.</li><li>Change <code>Account name</code> with new account name <em>Bob</em> (<em>Alice</em> -&gt; <em>Bob</em>)</li><li>Change <code>Home directory</code> as <code>/Users/Bob</code></li><li><code>Full name</code> is an alternative name of <code>Account name</code> when you need to input user name and its password, you can change it if you like.</li><li>“Click OK, then restart your Mac.” <sup><a href="#fn_1" id="reffn_1">1</a></sup></li><li>“Log in to the renamed account, then verify that your old files and folders are visible and the account is working as expected.” <sup><a href="#fn_1" id="reffn_1">1</a></sup></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><sup><a href="#fn_1" id="reffn_1">1</a></sup> <a href="https://support.apple.com/en-us/HT201548">Change the name of your macOS user account and home folder</a></p><p>The following links might be also helpful<br><sup><a href="#fn_2" id="reffn_2">2</a></sup> <a href="https://www.macbookproslow.com/change-admin-name-mac/">How to Change Admin Name on MacBook Pro</a></p>]]></content>
    
    
    <categories>
      
      <category>CS macOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>TRICK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TRICK] Add Remote Support for *Neovim* and Config `vimtex` Back Search)</title>
    <link href="/CS_vim/2021-09-03_TRICK_nvim_add_remote/"/>
    <url>/CS_vim/2021-09-03_TRICK_nvim_add_remote/</url>
    
    <content type="html"><![CDATA[<h2 id="Remote"><a href="#Remote" class="headerlink" title="Remote"></a>Remote</h2><p>Some times the “remote” support is necessary, and an example is config the back-search function for <code>vimtex</code>. To add the support, one can install <code>neovim-remote</code> with <code>pip3</code> like this <sup><a href="#fn_1" id="reffn_1">1</a></sup></p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">$ pip3 install neovim-remote<br></code></pre></div></td></tr></table></figure><h2 id="Configure-Back-search-of-LaTeX-neovim"><a href="#Configure-Back-search-of-LaTeX-neovim" class="headerlink" title="Configure Back-search of LaTeX (neovim)"></a>Configure Back-search of LaTeX (neovim)</h2><p>Assuming <code>vimtex</code> and <code>skim.app</code>is installed, open <code>skim.app</code> -&gt; <code>Perference</code> -&gt; <code>Sync</code>. Set <code>PDF-Tex Sync support</code> like the following</p><ul><li><code>Preset</code>: <code>Custom</code></li><li><code>Command</code>: <code>nvr</code></li><li><code>Argument</code>: <code>--remote-silent +&quot;%line&quot; &quot;%file&quot;</code></li></ul><p><img src="sync.png" alt=""> </p><p>If successfully, one can press <code>&lt;Shift-Cmd&gt;</code> and <code>&lt;Click&gt;</code> the <code>.pdf</code> file to use back-search.</p><p>&emsp;&emsp;Sometimes back-search doesn’t work, in the case, one can try to remove <code>/tmp/nvimsocket</code> and relaunch <em>Neovim</em>.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><sup><a href="#fn_1" id="reffn_1">1</a></sup> <a href="https://github.com/mhinz/neovim-remote">mhinz/neovim-remote</a></p>]]></content>
    
    
    <categories>
      
      <category>CS Vim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>TRICK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TRICK] Add `python` Support for Neovim</title>
    <link href="/CS_vim/2021-09-03_TRICK_nvim_add_python_support/"/>
    <url>/CS_vim/2021-09-03_TRICK_nvim_add_python_support/</url>
    
    <content type="html"><![CDATA[<p>To add <code>python</code> support for Neovim, one need install package <code>pynvim</code> like this <sup><a href="#fn_1" id="reffn_1">1</a></sup></p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">$ pip3 install --user --upgrade pynvim<br></code></pre></div></td></tr></table></figure><p>Further more, one can run <code>nvim +checkhelth</code>, and use command <code>:/## Python 3</code> with vim at the opened file to check details <sup><a href="#fn_2" id="reffn_2">2</a></sup> . The message probably like this</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown"><span class="hljs-section">## Python 3 provider (optional)</span><br><span class="hljs-bullet">  -</span> INFO: <span class="hljs-code">`g:python3_host_prog`</span> is not set.  Searching for python3 in the environment.<br><span class="hljs-bullet">  -</span> INFO: Multiple python3 executables found.  Set <span class="hljs-code">`g:python3_host_prog`</span> to avoid surprises.<br><span class="hljs-bullet">  -</span> INFO: Executable: /opt/homebrew/bin/python3<br><span class="hljs-bullet">  -</span> INFO: Other python executable: /usr/bin/python3<br><span class="hljs-bullet">  -</span> INFO: Python version: 3.9.6<br><span class="hljs-bullet">  -</span> INFO: pynvim version: 0.4.3<br><span class="hljs-bullet">  -</span> OK: Latest pynvim is installed.<br></code></pre></div></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><sup><a href="#fn_1" id="reffn_1">1</a></sup> <a href="https://www.jianshu.com/p/8e07b2ef4829">neovim 增加python3.5的支持</a><br><sup><a href="#fn_2" id="reffn_2">2</a></sup> <a href="https://segmentfault.com/a/1190000017784831">NeoVim初识</a></p>]]></content>
    
    
    <categories>
      
      <category>CS Vim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>TRICK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TRICK] Use Tsinghua source to Install `Homebrew`</title>
    <link href="/CS_macOS/2021-09-03_TRICK_use_Tsinghua_source_to_install_homebrew/"/>
    <url>/CS_macOS/2021-09-03_TRICK_use_Tsinghua_source_to_install_homebrew/</url>
    
    <content type="html"><![CDATA[<p>The most simple way to install <code>homebrew</code> is run the command provided by the official website</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">$ /bin/bash -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span><br></code></pre></div></td></tr></table></figure><p>However, the speed is extremely slow in China. To accelerate the process, one can choose the mirror source provided by Tsinghua <sup><a href="#fn_2" id="reffn_2">2</a></sup> . On macOS, to install <code>homebrew</code>, you need install command line tool of macOS at first. One can run <code>xcode-select --install</code> to install or use <code>xcode-select -p</code> to check if installed. Then run the following command to set environment variable</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">$ <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-subst">$(uname -s)</span>&quot;</span> == <span class="hljs-string">&quot;Linux&quot;</span> ]]; <span class="hljs-keyword">then</span> BREW_TYPE=<span class="hljs-string">&quot;linuxbrew&quot;</span>; <span class="hljs-keyword">else</span> BREW_TYPE=<span class="hljs-string">&quot;homebrew&quot;</span>; <span class="hljs-keyword">fi</span><br><span class="hljs-built_in">export</span> HOMEBREW_BREW_GIT_REMOTE=<span class="hljs-string">&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git&quot;</span><br><span class="hljs-built_in">export</span> HOMEBREW_CORE_GIT_REMOTE=<span class="hljs-string">&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/<span class="hljs-variable">$&#123;BREW_TYPE&#125;</span>-core.git&quot;</span><br></code></pre></div></td></tr></table></figure><p>Finally, use the mirror source to install <code>homebrew</code> from Tsinghua mirror source</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">$ git <span class="hljs-built_in">clone</span> --depth=1 https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/install.git brew-install<br>/bin/bash brew-install/install.sh<br>rm -rf brew-install<br></code></pre></div></td></tr></table></figure><p>For <em>Apple Sillicon</em> (run <code>uname -m</code> get the output <code>arm64</code>), run the following command</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">$ <span class="hljs-built_in">test</span> -r ~/.bash_profile &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;&#x27;</span> &gt;&gt; ~/.bash_profile<br><span class="hljs-built_in">test</span> -r ~/.zprofile &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;&#x27;</span> &gt;&gt; ~/.zprofile<br></code></pre></div></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><sup><a href="#fn_1" id="reffn_1">1</a></sup> <a href="https://brew.sh">Homebrew</a><br><sup><a href="#fn_2" id="reffn_2">2</a></sup> <a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/">Homebrew / Linuxbrew 镜像使用帮助</a></p>]]></content>
    
    
    <categories>
      
      <category>CS macOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TRICK] Check if Command Line Tool (CLT) of macOS is installed</title>
    <link href="/CS_macOS/2021-09-03_TRICK_check_if_CLT_installed/"/>
    <url>/CS_macOS/2021-09-03_TRICK_check_if_CLT_installed/</url>
    
    <content type="html"><![CDATA[<p>The simplist way is use the following command <sup><a href="#fn_1" id="reffn_1">1</a></sup></p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">$ xcode-select -p<br></code></pre></div></td></tr></table></figure><p>the command will print the directory of command line tool (if it already installed). On my M1 MacBook Air (Big Sur), the out put is like this</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">$ xcode-select -p<br>/Library/Developer/CommandLineTools<br></code></pre></div></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><sup><a href="#fn_1" id="reffn_1">1</a></sup> <a href="https://stackoverflow.com/questions/15371925/how-to-check-if-command-line-tools-is-installed">How to check if command line tools is installed</a></p>]]></content>
    
    
    <categories>
      
      <category>CS macOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Zotero Quick Config</title>
    <link href="/CS_GUI_software/2021_09_02_Zotero_quick_config/"/>
    <url>/CS_GUI_software/2021_09_02_Zotero_quick_config/</url>
    
    <content type="html"><![CDATA[<h2 id="Set-Base-Directory-of-Link"><a href="#Set-Base-Directory-of-Link" class="headerlink" title="Set Base Directory of Link"></a>Set Base Directory of Link</h2><p>If you have many devices, use absolute path to create a link isn’t a wise choice, which probably lead the link created at a device can’t be open at another device. To solve the problem, a direct way is set a “home directory” for those link. In <code>Zotero</code>, this can be realized by set <code>Linked Attachment Base Directory</code>. Once the directory set, the link is a <em>relative path</em> to refer to the directory.</p><p>&emsp;&emsp;Next we introduce how to set it. Open <code>Perference</code> -&gt; <code>Advanced</code> -&gt; <code>Files and Folders</code> <sup><a href="#fn_1" id="reffn_1">1</a></sup> , then choose the directory you want to set. My set is a folder named <code>zotero_files</code> under the iCould folder of <code>PDF Expert</code> (we will call the folder <code>$ZOTERO_FILES</code> for convenient).</p><p><img src="base_dir.png" alt=""></p><h2 id="Zotfile"><a href="#Zotfile" class="headerlink" title="Zotfile"></a><code>Zotfile</code></h2><p>To install extension <code>Zotfile</code>, one can download the package at official website <sup><a href="#fn_2" id="reffn_2">2</a></sup> . Then lunch <code>Zotero</code>, open menu <code>Tools</code> -&gt; <code>Add-ones</code> and click the gear icon. Click <code>Install Add-one From File</code> to install <code>Zotfile</code> from downloaded file (<code>zotfile-5.0.16-fx.xpi</code>).</p><p><img src="install.png" alt=""></p><p>Next, open <code>Perference</code> -&gt; <code>Tools</code> -&gt; <code>Zotfile Perference</code>, set <code>Source Folder for Attaching new Files</code> and <code>Location of Files</code> as <code>$ZOTERO_FILES</code>. </p><p><img src="source_folder.png" alt=""></p><p>At <code>Use subfolder defined by</code> you can set the form of subfolder, and my setting is <code>/%c</code>. The meaning of the setting is <sup><a href="#fn_3" id="reffn_3">3</a></sup></p><ul><li>%a last names of authors (not editors etc) or inventors. The maximum number of authors are changed under ‘Additional Settings’.</li><li>%I author initials.</li><li>%F author’s last name with first letter of first name (e.g. EinsteinA).</li><li>%A first letter of author (useful for subfolders)</li><li>%d, %D, %L, %l wildcards for editors, same as for authors.</li><li>%y year (extracted from Date field)</li><li>%t title. Usually truncated after : . ? The maximal length of the remaining part of the title can be changed.</li><li>%T item type (localized)</li><li>%j name of the journal</li><li>%p name of the publisher</li><li><p>%w name of the journal or publisher (same as “%p”)</p></li><li><p>%s journal abbreviation</p></li><li>%v journal volume</li><li>%e journal issue</li><li>%f pages</li><li>%c collection path (only for sub-folders, not file names). When item is in multiple collections, user can choose between the different collections.</li><li>%n patent number (patent items only)</li><li>%i assignee (patent items only)</li></ul><p>The following picture shows <code>year-author-title</code> format</p><p><img src="rename_format.png" alt=""></p><h2 id="Accompany-with-Nutstore"><a href="#Accompany-with-Nutstore" class="headerlink" title="Accompany with Nutstore"></a>Accompany with <code>Nutstore</code></h2><p>If you wish to use <code>Nutstore</code> accompany with <code>Zotero</code>, you can see the article <sup><a href="#fn_4" id="reffn_4">4</a></sup> .</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><sup><a href="#fn_1" id="reffn_1">1</a></sup> <a href="http://zotfile.com/#renaming-rules">Why can’t Zotero find a linked file?</a><br><sup><a href="#fn_2" id="reffn_2">2</a></sup> <a href="http://zotfile.com/index.html#changelog">ZotFile</a><br><sup><a href="#fn_3" id="reffn_3">3</a></sup> <a href="http://zotfile.com/#renaming-rules">ZotFile Renaming Rule</a><br><sup><a href="#fn_4" id="reffn_4">4</a></sup> <a href="https://help.jianguoyun.com/?p=4190">坚果云使用 Zotero 配置过程详解</a></p>]]></content>
    
    
    <categories>
      
      <category>CS GUI Software</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TRICK] Set `brew` Software as Default</title>
    <link href="/CS_macOS/2021-09-02_TRICK_set_brew_software_as_default/"/>
    <url>/CS_macOS/2021-09-02_TRICK_set_brew_software_as_default/</url>
    
    <content type="html"><![CDATA[<p>Sometimes, there are two different versions of one software, where one of them is provided by system and the another is from <code>homebrew</code>. To set software installed by <code>homebrew</code>, one should make sure the path of <code>homebrew</code> is ahead the system’s. To this end, one can add the following command into <code>.bashrc</code> (or <code>.zshrc</code>)</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">$ <span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;/opt/homebrew/bin:<span class="hljs-variable">$PATH</span>&quot;</span><br></code></pre></div></td></tr></table></figure><p>However, one can also use command <code>brew doctor</code> and check the advices, e.g. <sup><a href="#fn_1" id="reffn_1">1</a></sup></p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">$ brew doctor<br>==&gt; /usr/bin occurs before /usr/<span class="hljs-built_in">local</span>/bin This means that system-provided programs will be used instead of those provided by Homebrew. This is an issue <span class="hljs-keyword">if</span> you eg. brew installed Python.<br><br>Consider editing your .bash_profile to put: /usr/<span class="hljs-built_in">local</span>/bin ahead of /usr/bin <span class="hljs-keyword">in</span> your <span class="hljs-variable">$PATH</span>.<br></code></pre></div></td></tr></table></figure><p>Note if there exist more than one software wich same name below <code>$PATH</code>, one can use <code>which -a</code> to check their own path, e.g.</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">$ <span class="hljs-built_in">which</span> -a python3<br>/opt/homebrew/bin/python3<br>/usr/bin/python3<br>/opt/homebrew/bin/python3<br></code></pre></div></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><sup><a href="#fn_1" id="reffn_1">1</a></sup> <a href="https://stackoverflow.com/questions/5157678/how-do-i-use-brew-installed-python-as-the-default-python">How do I use brew installed Python as the default Python?</a></p>]]></content>
    
    
    <categories>
      
      <category>CS macOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>TRICK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[DEBUG] Defx &quot;Send2Trash&quot; is not installed</title>
    <link href="/CS_vim/2021-09-02_DEBUG_defx_Send2Trash_is_not_installed/"/>
    <url>/CS_vim/2021-09-02_DEBUG_defx_Send2Trash_is_not_installed/</url>
    
    <content type="html"><![CDATA[<p>When I use <code>defx</code> as my new MacBook Air to delete files (keymapping use <code>&lt;d&gt;</code>), the operation doesn’t work, and pop an error message</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">[defx] <span class="hljs-string">&quot;Send2Trash&quot;</span> <span class="hljs-keyword">is</span> not installed<br></code></pre></div></td></tr></table></figure><p>To solve the problem, one need to konw that <code>defx</code> is based on <code>python</code>, and <code>send2trash</code> is a <code>python</code> package. So one can use <code>pip</code> to install the package and solve the problem</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">$ pip3 install send2trash<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CS Vim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>DEBUG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TRICK] Set Higher Resolution for Extend Screen in macOS</title>
    <link href="/CS_macOS/2021-09-02_TRICK_adjust_resolution_of_ext_screen/"/>
    <url>/CS_macOS/2021-09-02_TRICK_adjust_resolution_of_ext_screen/</url>
    
    <content type="html"><![CDATA[<p>One can adjust the screen resolution at <code>System Perference</code> -&gt; <code>Display</code> -&gt; <code>Resolution</code>. However, recently, I connect my new MacBook Air to extend screen, but the resolution is low, and the maximum optional resolution just have 1920<em>1080. From official website of </em>Apple*, to set higher resolution, one can try to click <code>Scaled</code> with pressing <code>Option</code> key. <sup><a href="#fn_1" id="reffn_1">1</a></sup></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><sup><a href="#fn_1" id="reffn_1">1</a></sup> <a href="https://support.apple.com/zh-cn/guide/mac-help/mchl86d72b76/mac">更改 Mac 显示器的分辨率</a></p>]]></content>
    
    
    <categories>
      
      <category>CS macOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>TRICK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>`zsh` Quick Config</title>
    <link href="/CS_macOS/2021-09-02_zsh_quick_config/"/>
    <url>/CS_macOS/2021-09-02_zsh_quick_config/</url>
    
    <content type="html"><![CDATA[<h2 id="Install-zsh"><a href="#Install-zsh" class="headerlink" title="Install zsh"></a>Install <code>zsh</code></h2><p>Since from macOS Catalina, macOS set <code>zsh</code> as default shell, so you no need install <code>zsh</code> by yourself.</p><h2 id="Install-oh-my-zsh"><a href="#Install-oh-my-zsh" class="headerlink" title="Install oh-my-zsh"></a>Install <code>oh-my-zsh</code></h2><p>There are two ways to install <code>oh-my-zsh</code> <sup><a href="#fn_1" id="reffn_1">1</a></sup> <sup><a href="#fn_4" id="reffn_4">4</a></sup></p><ul><li><p><code>curl</code></p>  <figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">$ sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>&quot;</span><br></code></pre></div></td></tr></table></figure></li><li><p><code>wget</code></p>  <figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">$ sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>&quot;</span> <br></code></pre></div></td></tr></table></figure></li></ul><h2 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h2><h3 id="Powerlevel10k"><a href="#Powerlevel10k" class="headerlink" title="Powerlevel10k"></a><code>Powerlevel10k</code></h3><p><code>Powerlevel10k</code> is a theme of <code>zsh</code>. One can use <code>git</code> to install <sup><a href="#fn_2" id="reffn_2">2</a></sup></p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">$ git <span class="hljs-built_in">clone</span> --depth=1 https://github.com/romkatv/powerlevel10k.git <span class="hljs-variable">$&#123;ZSH_CUSTOM:-<span class="hljs-variable">$HOME</span>/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k<br></code></pre></div></td></tr></table></figure><p>or use mirror source of <code>gitee.com</code> (Chinese)</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">$ git <span class="hljs-built_in">clone</span> --depth=1 https://gitee.com/romkatv/powerlevel10k.git <span class="hljs-variable">$&#123;ZSH_CUSTOM:-<span class="hljs-variable">$HOME</span>/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k<br></code></pre></div></td></tr></table></figure><p>To use the theme, add the following command into <code>~/.zshrc</code></p><figure class="highlight zsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs zsh">open ~/.zshrc<br><br>ZSH_THEME=<span class="hljs-string">&quot;powerlevel10k/powerlevel10k&quot;</span><br></code></pre></div></td></tr></table></figure><p>&emsp;&emsp;The final step is install <code>nerdfont</code>. One can download it by <code>brew</code> <sup><a href="#fn_3" id="reffn_3">3</a></sup> . For example, use the following command to download <code>hack-nerd-font</code></p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">$ brew install --cask font-hack-nerd-font<br></code></pre></div></td></tr></table></figure><p>Then set the terminal font as the nerd font. If use <code>iTerm</code>, set the font at <code>Perference</code> -&gt; <code>Profiles</code> -&gt; <code>Text</code></p><h3 id="zsh-autosuggestions"><a href="#zsh-autosuggestions" class="headerlink" title="zsh-autosuggestions"></a><code>zsh-autosuggestions</code></h3><p><code>zsh-autosuggestions</code> can provide suggests commands based on history and completions when you type command <sup><a href="#fn_5" id="reffn_5">5</a></sup>. To install the plugin, clone the repository at first <sup><a href="#fn_6" id="reffn_6">6</a></sup></p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">$ git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions ~/.zsh/zsh-autosuggestions<br></code></pre></div></td></tr></table></figure><p>then <code>source</code> the <code>.zsh</code> file</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">$ <span class="hljs-built_in">source</span> ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh<br></code></pre></div></td></tr></table></figure><p>one can also use the following command <sup><a href="#fn_8" id="reffn_8">8</a></sup></p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> git://github.com/zsh-users/zsh-autosuggestions <span class="hljs-variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions<br></code></pre></div></td></tr></table></figure><h3 id="zsh-syntax-highlighting"><a href="#zsh-syntax-highlighting" class="headerlink" title="zsh-syntax-highlighting"></a><code>zsh-syntax-highlighting</code></h3><p><code>zsh-syntax-highlighting</code> provids yntax highlighting for the shell zsh <sup><a href="#fn_7" id="reffn_7">7</a></sup> . The installing method is as same as <code>zsh-autosuggestions</code> (just need a substitution <code>zsh-autosuggestions</code> -&gt; <code>zsh-syntax-highlighting</code>)</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">$ git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting ~/.zsh/zsh-syntax-highlighting<br>$ <span class="hljs-built_in">source</span> ./zsh-syntax-highlighting/zsh-syntax-highlighting.zsh<br></code></pre></div></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><sup><a href="#fn_1" id="reffn_1">1</a></sup> <a href="https://zhuanlan.zhihu.com/p/35283688">Oh My Zsh, 『 安装 &amp; 配置 』</a><br><sup><a href="#fn_2" id="reffn_2">2</a></sup> <a href="https://zhuanlan.zhihu.com/p/265525597">Oh My Zsh, 『 Powerlevel10k 安装 &amp; 配置 』</a><br><sup><a href="#fn_3" id="reffn_3">3</a></sup> <a href="https://github.com/ryanoasis/nerd-fonts#option-3-install-script">ryanoasis/nerd-fonts</a><br><sup><a href="#fn_4" id="reffn_4">4</a></sup> <a href="https://github.com/ohmyzsh/ohmyzsh">ohmyzsh/ohmyzsh</a><br><sup><a href="#fn_5" id="reffn_5">5</a></sup> <a href="https://github.com/zsh-users/zsh-autosuggestions">zsh-users/zsh-autosuggestions</a><br><sup><a href="#fn_6" id="reffn_6">6</a></sup> <a href="https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md">zsh-users/zsh-autosuggestions/INSTALL.md</a><br><sup><a href="#fn_7" id="reffn_7">7</a></sup> <a href="https://github.com/zsh-users/zsh-syntax-highlighting">zsh-users/zsh-syntax-highlighting</a><br><sup><a href="#fn_8" id="reffn_8">8</a></sup> <a href="https://www.jianshu.com/p/b4dec723c52f">MAC下安装oh-my-zsh和zsh-autosuggestion</a></p>]]></content>
    
    
    <categories>
      
      <category>CS macOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TRICK] Show File Extensions in macOS</title>
    <link href="/CS_macOS/2021-09-02_TRICK_show_file_extensions/"/>
    <url>/CS_macOS/2021-09-02_TRICK_show_file_extensions/</url>
    
    <content type="html"><![CDATA[<p>To show files extensions in macOS, open <code>Finder</code> -&gt; <code>Perference</code> -&gt; <code>Advanced</code> -&gt; <code>Show all filename extensions</code> <sup><a href="#fn_1" id="reffn_1">1</a></sup></p><p><img src="file_ext.png" alt=""></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><sup><a href="#fn_1" id="reffn_1">1</a></sup> <a href="https://howchoo.com/macos/always-show-file-extensions-in-macos">How to Always Show File Extensions in MacOS</a></p>]]></content>
    
    
    <categories>
      
      <category>CS macOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>TRICK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[DEBUG] can&#39;t Install `homebrew` with error `Not a valid ref`</title>
    <link href="/CS_macOS/2021-09-02_DEBUG_brew_not_valid_ref/"/>
    <url>/CS_macOS/2021-09-02_DEBUG_brew_not_valid_ref/</url>
    
    <content type="html"><![CDATA[<blockquote><p>To solve the problem <code>Not a valid ref</code>, the most simple method is uninstall the installed part of <code>homebrew</code>.</p></blockquote><span id="more"></span><p>If run the following command to install homebrew <sup><a href="#fn_1" id="reffn_1">1</a></sup></p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">/bin/bash -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)</span>&quot;</span><br></code></pre></div></td></tr></table></figure><p>meet the error message including <code>Not a valid</code> similar as the following <sup><a href="#fn_2" id="reffn_2">2</a></sup></p><figure class="highlight subunit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs subunit">==&gt; Downloading and installing Homebrew...<br>HEAD is now at 8175e404e Merge pull request #7942 from sjackman/bottle_tag<br><span class="hljs-keyword">error: </span>Not a valid ref: refs/remotes/origin/master<br>fatal: ambiguous argument &#x27;refs/remotes/origin/master&#x27;: unknown revision or path not in the working tree.<br></code></pre></div></td></tr></table></figure><p>The error is arisen from downloading many times, the most simple method to solve the problem is uninstalling installed <code>homebrew</code> files. To reach this, create an <code>ruby</code> script (extension name is <code>.rb</code>, e.g. <code>brew_uninstall.rb</code>) with the following content <sup><a href="#fn_2" id="reffn_2">2</a></sup></p><figure class="highlight ruby"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ruby"><span class="hljs-meta">#!/usr/bin/ruby</span><br><br>STDERR.print &lt;&lt;EOS<br><span class="hljs-symbol">Warning:</span> The Ruby Homebrew uninstaller is now deprecated <span class="hljs-keyword">and</span> has been rewritten <span class="hljs-keyword">in</span><br>Bash. Please migrate to the following <span class="hljs-symbol">command:</span><br>  /bin/bash -c <span class="hljs-string">&quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)&quot;</span><br><br>EOS<br><br>Kernel.exec <span class="hljs-string">&quot;/bin/bash&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&#x27;/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)&quot;&#x27;</span> + <span class="hljs-string">&#x27; uninstall &#x27;</span> +  ARGV.join(<span class="hljs-string">&quot; &quot;</span>)<br></code></pre></div></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><sup><a href="#fn_1" id="reffn_1">1</a></sup> <a href="https://brew.sh">Homebrew</a><br><sup><a href="#fn_2" id="reffn_2">2</a></sup> <a href="https://www.cnblogs.com/lfri/p/14310513.html">安装homebrew报错error: Not a valid ref: refs/remotes/origin/master 的解决方法</a></p>]]></content>
    
    
    <categories>
      
      <category>CS macOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>DEBUG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[DEBUG] gutentags: ctags job failed, returned: 1</title>
    <link href="/CS_vim/2021-09-01_DEBUG_gutentages_error_1/"/>
    <url>/CS_vim/2021-09-01_DEBUG_gutentages_error_1/</url>
    
    <content type="html"><![CDATA[<blockquote><p>The problem <code>ctags job failed</code> probably is arisen by the version of <code>ctags</code>.</p></blockquote><span id="more"></span><h1 id="ctags-Install"><a href="#ctags-Install" class="headerlink" title="ctags Install"></a><code>ctags</code> Install</h1><p>To detect the logs of <code>gutentags</code>, set </p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim"><span class="hljs-keyword">let</span> <span class="hljs-variable">g:gutentags_trace</span> = <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>then use command <code>:messages</code> to check the error log <sup><a href="#fn_1" id="reffn_1">1</a></sup> . The full logs of the error is as following</p><figure class="highlight scilab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs scilab">gutentags: [job stdout]: [<span class="hljs-string">&#x27;Locking tags file...&#x27;</span>, <span class="hljs-string">&#x27;Running ctags on whole project&#x27;</span>, <span class="hljs-string">&#x27;ctags -f &quot;</span>/Users/he/.cache/tags/Users-he-Documents-my_config-Blade-Vim-.tags.temp<span class="hljs-string">&quot; &quot;</span>--options=/Users/he/.vim/plugged/vi<br>m-gutentags/res/ctags_recursive.options<span class="hljs-string">&quot;  &quot;</span>/Users/he/Documents/my_config/Blade-Vim<span class="hljs-string">&quot;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>]<br>gutentags: [job stdout]: [<span class="hljs-string">&#x27;&#x27;</span>]<br>gutentags: [job stderr]: [<span class="hljs-string">&#x27;/Library/Developer/CommandLineTools/usr/bin/ctags: illegal option -- -&#x27;</span>, <span class="hljs-string">&#x27;usage: ctags [-BFadtuwvx] [-f tagsfile] file ...&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>]<br>gutentags: [job stderr]: [<span class="hljs-string">&#x27;&#x27;</span>]<br>gutentags: Finished ctags job.<br>gutentags: ctags job failed, returned: <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>I guess the problem is arisen from the version of <code>ctags</code>. The above messages shown that the <code>ctags</code> I use is provided by <em>command line tool (CLT)</em> of macOS. So I try to use other version of <code>ctags</code>. Finally, I choose <code>universal-ctags</code> <sup><a href="#fn_2" id="reffn_2">2</a></sup> . To install the software, one can use <code>homebrew</code> like this <sup><a href="#fn_3" id="reffn_3">3</a></sup></p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">$ brew install --HEAD universal-ctags/universal-ctags/universal-ctags<br></code></pre></div></td></tr></table></figure><p>If the <code>ctags</code> is provided by <code>universal-ctags</code> or <code>Exuberant Ctags</code>, one can use command <code>ctags --version</code> to check the version. For example, my output is</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">$ ctags --version<br>Universal Ctags 5.9.0, Copyright (C) 2015 Universal Ctags Team<br>Universal Ctags is derived from Exuberant Ctags.<br>Exuberant Ctags 5.8, Copyright (C) 1996-2009 Darren Hiebert<br>  Compiled: Aug 29 2021, 20:42:35<br>  URL: https://ctags.io/<br>  Optional compiled features: +wildcards, +regex, +gnulib_fnmatch, +gnulib_regex, +iconv, +option-directory, +xpath, +json, +interactive, +yaml, +case-insensitive-filenames, +packcc, +optscript<br></code></pre></div></td></tr></table></figure><p>However, if the <code>ctags</code> is provided by CLT of macOS, the output will show <code>illegal option</code> <sup><a href="#fn_4" id="reffn_4">4</a></sup></p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">$ /usr/bin/ctags --version<br>/Library/Developer/CommandLineTools/usr/bin/ctags: illegal option -- -<br>usage: ctags [-BFadtuwvx] [-f tagsfile] file ...<br></code></pre></div></td></tr></table></figure><h1 id="gutentags-Config"><a href="#gutentags-Config" class="headerlink" title="gutentags Config"></a><code>gutentags</code> Config</h1><p>After installing <code>universal-ctags</code>, the error messages still pop. Finally, I found the problem is caused by no root file detected <sup><a href="#fn_5" id="reffn_5">5</a></sup> . To solve the problem, one can set format of project root, and the common choose is <code>.git</code> etc. If the project didn’t use any version contral software, one can also set a special file extensions such as <code>.project</code>. Here list my config of <code>gutentags</code></p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim"><span class="hljs-comment">&quot; coorperate with airline</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">g:airline</span>#extensions#grepper#enabled = <span class="hljs-number">1</span><br><span class="hljs-comment">&quot; name of the tags file</span><br>    set tags=./.tags;,.tags<br><span class="hljs-comment">&quot; gutentags 搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">g:gutentags_project_root</span> = [<span class="hljs-string">&#x27;.root&#x27;</span>, <span class="hljs-string">&#x27;.svn&#x27;</span>, <span class="hljs-string">&#x27;.git&#x27;</span>, <span class="hljs-string">&#x27;.hg&#x27;</span>, <span class="hljs-string">&#x27;.project&#x27;</span>]<br><span class="hljs-comment">&quot; 所生成的数据文件的名称</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">g:gutentags_ctags_tagfile</span> = <span class="hljs-string">&#x27;.tags&#x27;</span><br><span class="hljs-comment">&quot; 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s:vim_tags</span> = <span class="hljs-built_in">expand</span>(<span class="hljs-string">&#x27;~/.cache/tags&#x27;</span>)<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">g:gutentags_cache_dir</span> = <span class="hljs-variable">s:vim_tags</span><br><span class="hljs-comment">&quot; 检测 ~/.cache/tags 不存在就新建</span><br>    <span class="hljs-keyword">if</span> !isdirectory(<span class="hljs-variable">s:vim_tags</span>)<br>        silent! <span class="hljs-keyword">call</span> <span class="hljs-built_in">mkdir</span>(<span class="hljs-variable">s:vim_tags</span>, <span class="hljs-string">&#x27;p&#x27;</span>)<br>    <span class="hljs-keyword">endif</span><br><span class="hljs-comment">&quot; output error message (use command &#x27;messages&#x27;. hide the option to avoid</span><br><span class="hljs-comment">&quot; unwanted pop message)</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">g:gutentags_trace</span> = <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><sup><a href="#fn_1" id="reffn_1">1</a></sup> <a href="https://wuruofan.com/2020/07/07/ubuntu-vim-gutentags-work-abnormally-solved-with-universal-ctags-and-global-recompiled/">vim-gutentags插件异常问题解决 &amp; gtags源码编译安装</a><br><sup><a href="#fn_2" id="reffn_2">2</a></sup> <a href="https://github.com/universal-ctags/ctags">universal-ctags/ctags</a><br><sup><a href="#fn_3" id="reffn_3">3</a></sup> <a href="https://github.com/universal-ctags/homebrew-universal-ctags">universal-ctags/homebrew-universal-ctags</a><br><sup><a href="#fn_4" id="reffn_4">4</a></sup> <a href="https://blog.csdn.net/u011031257/article/details/80652570">vim ctags —Exuberant Ctags(Mac 版安装)</a><br><sup><a href="#fn_5" id="reffn_5">5</a></sup> <a href="https://github.com/ludovicchabant/vim-gutentags/issues/234">How do I enable gutentags for directories which are not version controlled?</a></p><p>the following discussiong is also probably useful:</p><p><a href="https://github.com/ludovicchabant/vim-gutentags/issues/169">ctags job failed, returned: 1</a></p>]]></content>
    
    
    <categories>
      
      <category>CS Vim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>DEBUG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[DEBUG] Defx Icon Overlap</title>
    <link href="/CS_vim/2021-08-31_DEBUG_defx_icon_overlap/"/>
    <url>/CS_vim/2021-08-31_DEBUG_defx_icon_overlap/</url>
    
    <content type="html"><![CDATA[<p>I met a problem when I configure <em>MacBook Air</em> that the icons of defx will overlap like this</p><p><img src="overlap.png" alt=""></p><p>there are two step to remission the problme. </p><ul><li><p><strong>First step:</strong> use <code>space</code> to add a space like this</p>  <figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim"><span class="hljs-keyword">call</span> defx#custom#option(<span class="hljs-string">&#x27;_&#x27;</span>, &#123;<br>    \ <span class="hljs-string">&#x27;columns&#x27;</span>: <span class="hljs-string">&#x27;indent:git:icon:icons:space:filename&#x27;</span><br>    \ &#125;)<br></code></pre></div></td></tr></table></figure></li><li><p><strong>Second step:</strong> The following setting will cause the distance between git icon and folder icont too close</p>  <figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim"><span class="hljs-keyword">call</span> defx#custom#column(<span class="hljs-string">&#x27;icon&#x27;</span>, &#123;<br>    \ <span class="hljs-string">&#x27;directory_icon&#x27;</span>: <span class="hljs-string">&#x27;▸&#x27;</span>,<br>    \ <span class="hljs-string">&#x27;opened_icon&#x27;</span>: <span class="hljs-string">&#x27;▾&#x27;</span>,<br>    \ <span class="hljs-string">&#x27;root_icon&#x27;</span>: <span class="hljs-string">&#x27; &#x27;</span>,<br>    \ &#125;)<br></code></pre></div></td></tr></table></figure><p>  <img src="too_close.png" alt=""></p><p>  To keep uniformity of both folder and single file (<code>root</code>), add an extra space at icon</p>  <figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim"><span class="hljs-keyword">call</span> defx#custom#column(<span class="hljs-string">&#x27;icon&#x27;</span>, &#123;<br>    \ <span class="hljs-string">&#x27;directory_icon&#x27;</span>: <span class="hljs-string">&#x27; ▸&#x27;</span>,<br>    \ <span class="hljs-string">&#x27;opened_icon&#x27;</span>: <span class="hljs-string">&#x27; ▾&#x27;</span>,<br>    \ <span class="hljs-string">&#x27;root_icon&#x27;</span>: <span class="hljs-string">&#x27; &#x27;</span>,<br>    \ &#125;)<br></code></pre></div></td></tr></table></figure><p>  the effect is like this</p><p>  <img src="final_effect.png" alt=""></p></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>The following discussion might also helpful</p><p><sup><a href="#fn_1" id="reffn_1">1</a></sup> <a href="https://github.com/kristijanhusak/defx-icons/issues/30">The icon is only half displayed #30</a><br><sup><a href="#fn_2" id="reffn_2">2</a></sup> <a href="https://github.com/romkatv/powerlevel10k#icons-cut-off-in-konsole">powerlevel10k: Icons cut off in Konsole</a></p>]]></content>
    
    
    <categories>
      
      <category>CS Vim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>DEBUG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Common Used Function of Mathematica</title>
    <link href="/CS_MMA/2021-08-22_common_used_function/"/>
    <url>/CS_MMA/2021-08-22_common_used_function/</url>
    
    <content type="html"><![CDATA[<blockquote><p>This article aim to record the function I’ve used in Mathematica. However, since Mathematica has a detailled documentation, this article just classify the functions and make a brief introduction, which maily about where to use rather than an detailled introduction about how to use. For each item, will record the data of creation.</p></blockquote><span id="more"></span><h2 id="Recurrence"><a href="#Recurrence" class="headerlink" title="Recurrence"></a>Recurrence</h2><ul><li><code>RecurrenceTable[&lt;eqns&gt;, &lt;expr&gt;, &lt;nspec&gt;]</code>: generates a list of values of <code>&lt;expr&gt;</code> over the range of <code>&lt;n&gt;</code> values specified by <code>&lt;nspec&gt;</code>, can be used at solve the recurrence equations (e.g., solving differential equation with difference method). (2021.08.22)</li></ul>]]></content>
    
    
    <categories>
      
      <category>CS Mathematica</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TRICK] Text Editing Tricks of Mathematica</title>
    <link href="/CS_MMA/2021-08-22_text_edition/"/>
    <url>/CS_MMA/2021-08-22_text_edition/</url>
    
    <content type="html"><![CDATA[<blockquote><p>This article list some useful shortcut of Mathematica (macOS version) about text edition and also cell formatting, then provide some tricks.</p></blockquote><span id="more"></span><h2 id="Short-Cut-Related-to-lt-C-gt-and-lt-D-gt"><a href="#Short-Cut-Related-to-lt-C-gt-and-lt-D-gt" class="headerlink" title="Short Cut Related to &lt;C-&gt; and &lt;D-&gt;"></a>Short Cut Related to <code>&lt;C-&gt;</code> and <code>&lt;D-&gt;</code></h2><h3 id="lt-C-gt-related"><a href="#lt-C-gt-related" class="headerlink" title="&lt;C-&gt; related"></a><code>&lt;C-&gt;</code> related</h3><ul><li>⌃ =: Inline Free-form Input </li><li>⌃ ␣: End Subexpression </li><li>⌃ 6: Superscript </li><li>⌃ -: Subscript</li><li>⌃ 7: Above</li><li>⌃ 4: Below</li><li>⌃ 5: Opposite Position</li></ul><h3 id="Format-Related"><a href="#Format-Related" class="headerlink" title="Format Related"></a>Format Related</h3><ul><li>⌘ 1: Title</li><li>⌘ 2: Subtitle </li><li>⌘ 3: Chapter </li><li>⌘ 4: Section </li><li>⌘ 5: Subsection </li><li>⌘ 6: Subsubsection</li><li>⌘ 7: Text</li><li>⌘ 8: Code</li><li>⌘ 9: Input</li><li>⌘ 0: Other…</li><li>⇧⌘ ⌫ : Clear Formatting</li><li>⌫ : Clear Formatting </li><li>⇧⌘ O: Option Inspector… </li><li>⌥⇧⌘ O: Option Inspector…</li><li>⌘ T: Show Fonts…</li><li>⌘ B: Bold</li><li>⌘ I: Italic</li><li>⌘ =: Larger</li><li>⌘ -: Smaller</li></ul><h2 id="Tricks"><a href="#Tricks" class="headerlink" title="Tricks"></a>Tricks</h2><ul><li>use <code>&lt;C-lp&gt;</code> (<code>lp</code> means “left parenthesis”) to start math typying and <code>&lt;C-rp&gt;</code> to stop <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Insert Inline Math in Text">[1]</span></a></sup> ;</li><li>“Format” command (specially for <code>&lt;D-1&gt;</code> to <code>&lt;D-9&gt;</code>) can not only act on the whole cell, but <em>also for selected text</em>, which is specially useful to create inline-expression. e.g., selected the text you want to change it into inline-expression, then press <code>&lt;D-8&gt;</code>;</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://reference.wolfram.com/language/workflow/InsertInlineMathInText.html">Insert Inline Math in Text</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS Mathematica</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>TRICK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>卡组笔记: 电脑堺</title>
    <link href="/YGO/2021-07-11_%E7%94%B5%E8%84%91%E5%A0%BA/"/>
    <url>/YGO/2021-07-11_%E7%94%B5%E8%84%91%E5%A0%BA/</url>
    
    <content type="html"><![CDATA[<h3 id="Combo"><a href="#Combo" class="headerlink" title="Combo"></a>Combo</h3><ul><li>九龙, 瑞瑞 + 任一卡 -&gt; m7, 法王, 朱雀 p1<ul><li>发九龙, 开朱雀门</li><li>点朱雀门, 卡组青龙送墓特召瑞瑞, 检索麟麟</li><li>点朱雀门, 卡组青龙送墓特召麟麟, 卡组送墓娘娘</li><li>除外一青龙, 检索老老, 手卡任一卡送墓</li><li>瑞瑞与麟麟同调仙仙</li><li>点朱雀门, 卡组豸豸送墓特召老老, 老老拉墓地麟麟</li><li>老老与麟麟叠 M7, M7 从墓地检索豸豸, 点仙仙送墓朱雀门特召豸豸</li><li>豸豸特召成功时娘娘从墓地跳上场, 边锁墓地朱雀门, 让豸豸上升 3 星</li><li>豸豸与娘娘同调古鱼龙。娘娘离场时除外, 并将青龙拿回卡组</li><li>仙仙与古鱼龙叠法王兽</li><li>结束阶段豸豸效果, 卡组检索瑞瑞 (结束时除外区有青龙, 朱雀, 娘娘三卡)</li></ul></li><li>九龙, 瑞瑞 + 任一卡 -&gt; m7, 法王, 朱雀 p2 (t2 三次解场)<ul><li>发九龙, 开朱雀门</li><li>点朱雀门, 卡组青龙送墓特召瑞瑞, 检索麟麟</li><li>点朱雀门, 卡组白虎送墓特召麟麟, 卡组送墓娘娘</li><li>瑞瑞与麟麟同调炮车</li><li>除外一青龙, 检索老老, 手卡任一卡送墓</li><li>点朱雀门, 卡组豸豸送墓特召老老, 老老拉墓地麟麟</li><li>老老与麟麟叠 M7, M7 从墓地检索豸豸, 点朱雀门送墓娘娘特召豸豸</li><li>除外一玄武, 特召墓地瑞瑞, 与此同时墓地跳娘娘</li><li>瑞瑞与豸豸同调鹫鹫, 鹫鹫与娘娘同调仙仙。娘娘离场除外, 从除个区回收青龙入卡组</li><li>仙仙与炮车叠法王兽</li><li>结束阶段豸豸效果, 检索瑞瑞 (结束时除外区有玄武, 娘娘二卡)</li></ul></li><li>九龙, 瑞瑞 + 任一卡 -&gt; m7, 法王, 朱雀 p2 (t2 三次解场)</li></ul>]]></content>
    
    
    <categories>
      
      <category>YGO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DECK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[REF] YGOPro Guide</title>
    <link href="/YGO/2021-07-11_REF_ygopro_guide/"/>
    <url>/YGO/2021-07-11_REF_ygopro_guide/</url>
    
    <content type="html"><![CDATA[<blockquote><p>由于 YGOPro 及 YGOPro2 的说明都是在软件包目录中, 平时查阅不太方便, 因此将其复制出来并重新排版以便查阅。</p></blockquote><span id="more"></span><h2 id="YGOPro"><a href="#YGOPro" class="headerlink" title="YGOPro"></a>YGOPro</h2><p>A script engine for “yu-gi-oh!” and sample gui</p><p><a href="https://github.com/Fluorohydride/ygopro/wiki/%E4%B8%AD%E6%96%87%E8%AF%B4%E6%98%8E">中文说明</a></p><h3 id="Keys"><a href="#Keys" class="headerlink" title="Keys:"></a>Keys:</h3><ul><li><code>ESC</code>: Minimize the window.</li><li><code>A</code>: Holding down this button will let the system stop at every timing.</li><li><code>S</code>: Holding down this button will let the system skip every timing.</li><li><code>D</code>: Holding down this button will let the system stop at available timing.</li><li><code>R</code>: Fix the font glitch.</li><li><code>F1</code>~<code>F4</code>: Show the cards in your grave, banished zone, extra deck, xyz materials.</li><li><code>F5</code>~<code>F8</code>: Show the cards in your opponent’s grave, banished zone, extra deck, xyz materials.</li></ul><h3 id="Color-in-card-list"><a href="#Color-in-card-list" class="headerlink" title="Color in card list:"></a>Color in card list:</h3><h4 id="Background"><a href="#Background" class="headerlink" title="Background:"></a>Background:</h4><ul><li>White = your card, Grey = your opponent’s card  </li></ul><h4 id="Text"><a href="#Text" class="headerlink" title="Text:"></a>Text:</h4><p>Cards in deck, extra deck and banished zone: </p><ul><li>Black = face-up, Blue = face-down</li></ul><p>Xyz materials:</p><ul><li>Black = default, Blue = the owner of the xyz material is different from its controller</li></ul><h3 id="Sequence"><a href="#Sequence" class="headerlink" title="Sequence:"></a>Sequence:</h3><ul><li>Monster Zone: 1~5, starting from the left hand side.</li><li>Spell &amp; Trap Zone: 1~5, starting from the left hand side.</li><li>Field Zone: 6</li><li>Pendulum Zone: 0~1, starting from the left hand side.</li><li>The others: 1~n, starting from the bottom.</li></ul><h3 id="Deck-edit-page"><a href="#Deck-edit-page" class="headerlink" title="Deck edit page:"></a>Deck edit page:</h3><ul><li>All numeric textboxs: They support <code>&gt;</code>, <code>=</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code> signs.</li><li>Card name: Search card names and texts by default, <code>$foo</code> will only search foo in card names, and <code>@foo</code> will search cards of <code>foo</code> archetype (due to translation, card name contains <code>foo</code> does not mean that card is <code>foo</code> card).</li></ul><h3 id="Command-line-options"><a href="#Command-line-options" class="headerlink" title="Command-line options:"></a>Command-line options:</h3><ul><li><code>-e foo.cdb</code>: Load foo.cdb as the extra database.</li><li><code>-n nickname</code>: Set the nickname.</li><li><code>-h 192.168.0.2</code>: Set the host to join in LAN mode.</li><li><code>-p 7911</code>: Set the port to join in LAN mode.</li><li><code>-w abc</code>: Set the password to join in LAN mode.</li><li><code>-d</code>: Enter the deck edit page.</li><li><code>-d deck</code>: If used along with <code>-j</code> it mean select the deck, or it will open the deck to edit.</li><li><code>-c</code>: Create host with default settings.</li><li><code>-j</code>: Join the host specified in above, or if absent, lasthost in system.conf file.</li><li><code>-r</code>: Enter the replay mode page.</li><li><code>-r replay.yrp</code>: Load the replay.yrp in replay mode.</li><li><code>-s</code>: Enter the single mode page.</li><li><code>-s puzzle.lua</code>: Load the puzzle.lua in single mode.</li><li><code>-k</code>: Keep when duel finished. See below.</li></ul><h4 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h4><ul><li><code>-c</code> <code>-j</code> <code>-e</code> <code>-r</code> <code>-s</code> shoule be the last parameter, because any parameters after it will get ignored.</li><li><code>-d</code> <code>-c</code> <code>-j</code> <code>-e</code> <code>-r</code> <code>-s</code> will make YGOPro automatically exit when the duel or deck editing is finished. This is useful for some launchers. If you want to keep it, add <code>-k</code> before them.</li><li><code>-d</code> <code>-r</code> <code>-s</code> support full path of file, or just filename. But remember deck filename should NOT have extension when replay and single filename MUST have extension.</li></ul><h3 id="Directories"><a href="#Directories" class="headerlink" title="Directories:"></a>Directories:</h3><ul><li><code>pics</code>: <code>.jpg</code> card images (177*254).</li><li><code>pics</code> \ <code>thumbnail</code>: <code>.jpg</code> thumbnail images(44*64).</li><li><code>script</code>: <code>.lua</code> script files.</li><li><code>textures</code>: Other image files.</li><li><code>deck</code>: <code>.ydk</code> deck files.</li><li><code>replay</code>: <code>.yrp</code> replay files.</li><li><code>expansions</code>: <code>*.cdb</code> will be loaded as extra databases.</li></ul><h2 id="YGOPro2"><a href="#YGOPro2" class="headerlink" title="YGOPro2"></a>YGOPro2</h2><blockquote><p>注意：<br>YGOPro2对电脑有一定配置需求，若无法流畅运行推荐使用 <a href="http://ygocore.ys168.com/">YGOPro 原版游戏</a></p></blockquote><h3 id="常用联机对战方法"><a href="#常用联机对战方法" class="headerlink" title="常用联机对战方法"></a>常用联机对战方法</h3><p>主机地址的两个空分别填入 <code>s1.ygo233.com</code> 和 <code>233</code><br>房间密码留空，点击加入游戏，进入比赛模式（三局两胜）的随机对战。<br>房间密码输入 <code>AI</code>，可与在线人机对战    【本地人机目前无法使用，请用在线人机代替】。<br>房间密码输入 <code>S</code>，可进入单局的随机对战。输入 <code>T</code>，可进入 2V2 模式的随机对战。</p><h3 id="约战方法"><a href="#约战方法" class="headerlink" title="约战方法"></a>约战方法</h3><p>房间密码输入任意其他文字，可以以那串文字为房间名建立房间，让你的对手输入同样的文字，即可加入房间。在房间名前加 <code>M#</code> 可以设置房间为比赛模式。加 <code>T#</code> 可以设置房间为 2V2 模式。大小写随意。房间名还支持更多特殊代码，详见 <a href="https://ygo233.com/usage">YGOPro 使用方法</a></p><h3 id="游戏更新方法"><a href="#游戏更新方法" class="headerlink" title="游戏更新方法"></a>游戏更新方法</h3><p><a href="http://ygopro2.lofter.com/">官网</a> 目前受 lofter 限制无法提供下载链接，需从<a href="http://ygocore.ys168.com/">娱乐力量全开网盘</a>下载更新。 完整版整合了发布日期之前的全部更新补丁，若存在完整版更新日期之后的补丁则需下载安装。</p><p>也可以从 <a href="https://ygopro2.link/downloads.html">YGOPro2 完整版及更新</a> 下载, 或进 YGOPro2 官群（966380039）从群文件下载。</p><h3 id="更换卡背、背景、头像的方法"><a href="#更换卡背、背景、头像的方法" class="headerlink" title="更换卡背、背景、头像的方法"></a>更换卡背、背景、头像的方法</h3><ul><li>背景: 背景文件为游戏目录 <code>\texture\common</code> 文件夹下的 <code>desk.jpg</code> 文件。将它删除或者重命名，然后将你想要的背景图片（必须也是jpg格式）放在该文件夹，并且命名为 <code>desk.jpg</code>。重启游戏。</li><li>卡背：卡背文件为游戏目录 <code>\texture\duel</code> 文件夹下的 <code>me.jpg</code> 文件。将它删除或者重命名，然后将你想要的卡背（必须也是 jpg 格式）放在该文件夹，并且命名为 <code>me.jpg</code>。对手卡背的文件为同一文件夹下的 <code>opponent.jpg</code> 文件，进行类似操作即可更换对方卡背。重启游戏。</li><li>头像：头像文件为游戏目录 <code>\texture\face</code> 文件夹下的”你的游戏 <code>id.png</code> “文件，把合适的图片放在 <code>face</code> 文件夹并命名为你的游戏 <code>id</code>。</li></ul><p>更换其他美术素材也都在游戏目录 <code>\texture</code> 文件夹下，方法同上。YGOPro2 官群（966380039）群文件有大量替换用美术素材下载。</p><h3 id="FQA"><a href="#FQA" class="headerlink" title="FQA"></a>FQA</h3><p>Q：为什么我按照上面的操作更换了图片文件，我的卡背/背景/头像替换失败了？<br>A：系统中，文件可能默认不显示jpg等后缀名，可能替换的图片后缀名和之前的不一样，自行百度搜索“怎么显示文件后缀名”，处理后再进行操作。</p><p>关于”安装到萌卡.exe”： <a href="https://mycard.moe/">萌卡</a> 是一个对战平台，内置原版 YGOPro，有玩家社区、聊天室、决斗数据、天梯排名等功能。若电脑安装有萌卡，运行”安装到萌卡.exe” 即可把萌卡中启动 YGOPro 替代为启动 YGOPro2。</p><p>关于手机版YGOPro2下载：<br>注意：以下版本均非 YGOPro2 实验室官方开发。</p><ul><li>安卓版：QQ群 1030685516 。</li><li><a href="https://cli.koishi.pro/download/">iOS版</a>：一般需连接电脑使用助手安装，详情见下载页面。</li></ul><h3 id="Advenced-Guide"><a href="#Advenced-Guide" class="headerlink" title="Advenced Guide"></a>Advenced Guide</h3><h4 id="安装扩展："><a href="#安装扩展：" class="headerlink" title="安装扩展："></a>安装扩展：</h4><p>将ypk格式的扩展包文件放至expansions文件夹中重启YGOPro2即可。</p><h4 id="文件结构："><a href="#文件结构：" class="headerlink" title="文件结构："></a>文件结构：</h4><ul><li><code>cdb</code>：支持读取其中数据库文件 (<code>*.cdb</code>)与字段文件 (<code>*.conf</code>)</li><li><code>data</code>：支持读取其中<code>zip</code>文件</li><li><code>expansions</code>：支持读取其中ypk文件，数据库文件(<em>.cdb)与字段文件(</em>.conf)</li><li><code>diy</code>：建议弃用，改用 <code>expansions</code>，<code>ypk</code> 与 <code>zip</code> 本质为同一格式</li><li><code>pack</code>：卡包数据（年久失修）</li></ul><p>开源地址为: <a href="https://github.com/lllyasviel/YGOProUnity_V2">YGOProUnity_V2</a></p>]]></content>
    
    
    <categories>
      
      <category>YGO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>REF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TODO] 编写 YGO 对战 AI</title>
    <link href="/YGO/2021-07-11_ygopro_AI/"/>
    <url>/YGO/2021-07-11_ygopro_AI/</url>
    
    <content type="html"><![CDATA[<p>先挖个坑, 以后有时间再研究一个如何编写 YGO 的对站 AI (会用到 Lua 语言)。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.jianshu.com/p/762d78417576">YGOPro AI脚本教程（译文）</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>YGO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TODO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TRICK] 百度网盘限速破解方法 (未解决)</title>
    <link href="/CS_Web/2021-07-11_TRICK_speed_limit_of_Baidu_netdist/"/>
    <url>/CS_Web/2021-07-11_TRICK_speed_limit_of_Baidu_netdist/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;之前尝试了绕过百度网盘限速的方法, 但遗憾的是尚未成功不限速下载到所需资源。大体来说, 绕过限速需要先通过各种方法对资源的地址进行解析 (如 KinhDown <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="KinhDown（加速！永无止境）">[1]</span></a></sup> 及油猴脚本 <sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="使用油猴与IDM实现百度直链下载（破解限速）">[2]</span></a></sup> ), 之后通过一个 Windows 平台的下载器 <em>Internet Dowloading Manager</em> (IDM), 下载将解析得到的链接。但部分资源进行下载时可能会显示没有权限, 这种情况很可能是因为 “某度为了防止用外部下载工具突破限速加入了cookie验证” <sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="idm服务器响应显示你没有权限下载此文件这个怎么办？">[4]</span></a></sup> ,目前我自己还没尝试过绕问题的应对方法。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://kinhdown.kinh.cc">KinhDown（加速！永无止境）</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/346674068">使用油猴与IDM实现百度直链下载（破解限速）</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/379708002">度盘+IDM不限速！跑满宽带！</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://www.zhihu.com/question/373322044/answer/1138118303">idm服务器响应显示你没有权限下载此文件这个怎么办？</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>TRICK</tag>
      
      <tag>TODO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[DEBUG] Can&#39;t Open Application with Current Version of macOS</title>
    <link href="/CS_macOS/2021-07-11_DEBUG_cant_open_app_with_macos_version/"/>
    <url>/CS_macOS/2021-07-11_DEBUG_cant_open_app_with_macos_version/</url>
    
    <content type="html"><![CDATA[<p>When I try to open <code>ygopro.app</code>, I meet a warning “You can’t use this version of the application “ygopro.app” with this version of macOS.”. The solution I thought is modify the <code>Minimum system version</code> option of <code>info.plist</code> file <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="How to open applications regardless of required version?">[1]</span></a></sup> (<code>Show Package Contents</code> -&gt; <code>Contents</code>), but it doesn’t work.</p><p><img src="warning.png" alt=""></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://apple.stackexchange.com/questions/192533/how-to-open-applications-regardless-of-required-version">How to open applications regardless of required version?</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS macOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>TRICK</tag>
      
      <tag>TODO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TRICK] Forbid Auto-launch while Starting Up</title>
    <link href="/CS_macOS/2021-07-11_TRICK_forbid_startup_auto_launch/"/>
    <url>/CS_macOS/2021-07-11_TRICK_forbid_startup_auto_launch/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;At few days ago, I found <code>Steam.app</code> will always launch while I loging in or starting up my MacBook even I trun off the auto launch option at <code>Perference</code> of <code>Steam.app</code>. Later I found to ture off it, one need cancel log in loading options at <code>System Perference</code> -&gt; <code>Users &amp; Groups</code> -&gt; <code>Login Items</code>.</p><p><img src="login_items.png" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>CS macOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>TRICK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TRICK] 删除 Word 中的空白页</title>
    <link href="/CS_GUI_software/MS_office/2021-07-11_TRICK_delete_empty_page_in_word/"/>
    <url>/CS_GUI_software/MS_office/2021-07-11_TRICK_delete_empty_page_in_word/</url>
    
    <content type="html"><![CDATA[<p>删除空白页的原理实际是删除换页符 (不可见字符, Word 中会以特殊符号标记), 于是最简单的方法是选中换页符, 用 <code>backspace</code> 或 <code>delete</code> (<code>shift</code> + <code>backspace</code>) 删除 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Word空白页怎么都删除不掉？用这6个方法随便删！">[1]</span></a></sup> , 或者直接选中空白页的第一行, 使用 <code>delete</code> (此时换页符在光标的下一个字符, 因而 <code>delete</code> 刚好将其删除)。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/148757304">Word空白页怎么都删除不掉？用这6个方法随便删！</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS GUI Software</category>
      
      <category>MS Office</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>TRICK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TRICK] Hide Comments in Word</title>
    <link href="/CS_GUI_software/MS_office/2021-07-11_TRICK_hide_comment/"/>
    <url>/CS_GUI_software/MS_office/2021-07-11_TRICK_hide_comment/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Sometims there is a comments side area in Word, this article introduced how to hide it.</p></blockquote><span id="more"></span><h2 id="Main-Body"><a href="#Main-Body" class="headerlink" title="Main Body"></a>Main Body</h2><p>&emsp;&emsp;To control the activy or hidden behavior, one can find the setting at <code>Review</code>. There are 4 types of the setting <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="How to Display or Hide Comments in Word 2016">[1]</span></a></sup> .</p><ul><li><strong>Simple Markup</strong>: Chose this item to display the markup area and view comments and revisions.</li><li><strong>All Markup</strong>: Choose this item to display the markup area. Any comments or revisions are shown, along with lines referencing their locations in the text.</li><li><strong>No Markup</strong>: Choose this item to hide the markup area. Comments don’t appear, and any revisions are hidden in the text.</li><li><strong>Original</strong>: Choose this item to hide the markup area as well as any revisions made to the document. With regards to comments, this item is identical to No Markup.</li></ul><p>the effect is showen following</p><p><img src="mark_1.png" alt="active"></p><p><img src="mark_2.png" alt="hide"></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.dummies.com/software/microsoft-office/word/how-to-display-or-hide-comments-in-word-2016/">How to Display or Hide Comments in Word 2016</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS GUI Software</category>
      
      <category>MS Office</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>TRICK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TRICK] 在 LaTeX 中插入 PDF</title>
    <link href="/CS_latex/2021-06-14_TRICK_insert_pdf/"/>
    <url>/CS_latex/2021-06-14_TRICK_insert_pdf/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文介绍了使用 LaTeX 插入 PDF 页面的方法。</p></blockquote><span id="more"></span><p>&emsp;&emsp;使用包 <code>pdfpages</code> 可以实现。设要插入的 PDF 文件为 <code>file.pdf</code>, 则:</p><figure class="highlight tex"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tex"><span class="hljs-keyword">\usepackage</span>&#123;pdfpages&#125;<br><span class="hljs-keyword">\includepdf</span>&#123;file.pdf&#125; <br><span class="hljs-keyword">\newpage</span><br></code></pre></div></td></tr></table></figure><p>可加入 <code>pages</code> 选项来指定插入的页码, 如</p><figure class="highlight tex"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tex"><span class="hljs-comment">% insert page 1 to 4</span><br><span class="hljs-keyword">\includepdf</span>[pages=&#123;1-4&#125;]&#123;file.pdf&#125; <br><br><span class="hljs-comment">% insert page 3</span><br><span class="hljs-keyword">\includepdf</span>[pages=&#123;1,3&#125;]&#123;file.pdf&#125; <br><br><span class="hljs-comment">% insert page 1, an empty page and page 3 </span><br><span class="hljs-keyword">\includepdf</span>[pages=&#123;1, &#123;&#125;, 3&#125;]&#123;file.pdf&#125; <span class="hljs-comment">% &quot;&#123;&#125;&quot; means empty page</span><br><br><span class="hljs-comment">% insert all pages</span><br><span class="hljs-keyword">\includepdf</span>[&#123;pages=-&#125;]&#123;file.pdf&#125;<br><br><span class="hljs-comment">% insert last 1 page</span><br><span class="hljs-keyword">\includepdf</span>[pages=&#123;last-1&#125;]&#123;file.pdf&#125;<br></code></pre></div></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>&emsp;&emsp;可通过查阅宏包文档获取更多信息 <code>texdoc pdfpages</code></p>]]></content>
    
    
    <categories>
      
      <category>CS LaTeX</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>TRICK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[DEBUG] Docker is unable to find image locally</title>
    <link href="/CS_linux/2021-06-13_DEBUG_docker_unable_find_image/"/>
    <url>/CS_linux/2021-06-13_DEBUG_docker_unable_find_image/</url>
    
    <content type="html"><![CDATA[<blockquote><p>今天安装了 Docker 后, 发现运行 <code>docker run -d -p 80:80 docker/getting-started</code>, 后来发现是代理设置问题。</p></blockquote><span id="more"></span><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>&emsp;&emsp;在按照 Docker 的帮助文档的指示运行 <code>docker run -d -p 80:80 docker/getting-started</code> <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Docker: Start the tutorial">[1]</span></a></sup> 时出现报错 <code>Unable to find image &#39;docker/getting-started&#39; locally</code></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>&emsp;&emsp;实际上之后 Docker 会自动下载 <code>docker/getting-started</code>, 但由于当时我的代理设置成了全局模式, 所以自动下载无法进行。取肖全局模式即可解决问题 <sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="Docker is unable to find image locally">[2]</span></a></sup> 。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://docs.docker.com/get-started/#start-the-tutorial">Docker: Start the tutorial</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://forums.docker.com/t/docker-is-unable-to-find-image-locally/99504">Docker is unable to find image locally</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>DEBUG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TRICK] Fluid 中的 Categories 设置选项</title>
    <link href="/CS_Hexo/2021-05-31_TRICK_fluid_categories_setting/"/>
    <url>/CS_Hexo/2021-05-31_TRICK_fluid_categories_setting/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文记录了 Hexo 的 Fluid 主题中的 Categories 相关设置选项.</p></blockquote><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&emsp;&emsp;写本文的动机是今天在转载了许多文章后 (也增加了一些文章分类), 发现分类排序没有按照字母顺序, 于是查看了一下 Categories 的分类排序的设置方法.</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">category:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/fig/galaxy_1.jpg</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br>  <span class="hljs-attr">subtitle:</span><br><br>  <span class="hljs-comment"># 分类的排序字段，前面带减号是倒序，不带减号是正序</span><br>  <span class="hljs-comment"># Options: length | name</span><br>  <span class="hljs-attr">order_by:</span> <span class="hljs-string">&quot;name&quot;</span><br><br>  <span class="hljs-comment"># 层级的折叠深度，0 是全部折叠，大于 0 后如果存在子分类则默认展开</span><br>  <span class="hljs-attr">collapse_depth:</span> <span class="hljs-number">1</span><br><br>  <span class="hljs-comment"># 文章的排序字段，前面带减号是倒序，不带减号是正序</span><br>  <span class="hljs-comment"># Options: date | title | or other field of front-matter</span><br>  <span class="hljs-attr">post_order_by:</span> <span class="hljs-string">&quot;title&quot;</span><br><br>  <span class="hljs-comment"># 单个分类中折叠展示文章数的最大值，超过限制会显示 More，0 则不限制</span><br>  <span class="hljs-attr">post_limit:</span> <span class="hljs-number">10</span><br></code></pre></div></td></tr></table></figure><h2 id="Bugs"><a href="#Bugs" class="headerlink" title="Bugs"></a>Bugs</h2><p>&emsp;&emsp;在设轩过程中发现了一个 bug: 若设置层级自动展开, 在有子层级时, 首层的文章在自动展开下不会显示, 而只有在该层级被折叠时才会显示. 下面是一个例子, 在该例子中, 文章 “音阶弹奏助记表” 只有在折叠母层级后才能看见.</p><p><img src="fold_1.png" alt="自动展开时不显示文章"></p><p><img src="fold_2.png" alt="将母层级折叠后才显示文章" title="将母层级折叠后才显示文章"></p>]]></content>
    
    
    <categories>
      
      <category>CS Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>理论力学复习概要</title>
    <link href="/PHYS_unclassified/2021-05-31_theoretical_mechanics_review/"/>
    <url>/PHYS_unclassified/2021-05-31_theoretical_mechanics_review/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文总结了本科理论力学学习的主要知识. 该文章于去年为理念经所夏令营面试做准备所写, 最早发布于知乎, <a href="https://zhuanlan.zhihu.com/p/138168223">原标题为 “两个月速成 (误) 物理学本科高年级课程之理论力学篇: 总纲</a>“.</p></blockquote><span id="more"></span><h2 id="原-序言"><a href="#原-序言" class="headerlink" title="(原) 序言"></a>(原) 序言</h2><blockquote><p>虽然说是速成, 但其实是复习, 希望不要被标题误导了… 因为研究生想做引力方面理论研究, 所以在两个月左右之后大概会去参加理论所的夏令营. 复习的内容主要是四大力学, 基本的广义相对论以及群论, 还有时间的话可能会写一点傅里叶光学和数理方法方面的东西. 虽然内容确实不少, 但想想去年电动力学考试的时候也才花了三天的时间复习, 两个月复习完这些也是有可能的吧? 果然 deadline 才是第一生产力 😂</p><p>由于写这个系列的目的是为了复习, 大部分内容都是按照自己的理解来写的, 难免有所纰漏. 如认为内容存在任何问题, 欢迎在评论区提出.</p></blockquote><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><p><img src="theoretical_mechanics_review_outline.png" alt=""></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&emsp;&emsp;理论力学是四大力学中最基本的一门课程, 可以说是其它三大力学的基础.</p><p>&emsp;&emsp;对物理系学生来说, 理论力学中最主要的是分析力学的部分. 但在实际的教学中, 似乎老师都会选择复习一下经典牛顿力学 (特点是微积分的使用比例相较力学课程中大幅上升). 在总纲部分仍打算沿用此思路, 先回顾一下经典牛顿力学 (主要是比力学学习时多出的部分), 再介绍分析力学 (不过之后的文章将主要介绍分析力学).</p><p>&emsp;&emsp;按照研究体系, 牛顿力学可以分为两个部分: 质点力学与质点组力学.</p><p>&emsp;&emsp;在质点力学中, 首先利用微积分的来对质点的运动进行描述, 一般认为这是属于运动学的内容. 随后借助牛顿三大定律, 将动力学因素与运动学因素联系起来. 值得注意的是, 牛顿定律本身并不告诉我们具体的力的作用 (正如量子力学的基本假设并不告诉我们体系的哈密顿量怎么写), 具体的力如何作用是由诸如库伦定律, 胡克定律等实验定律来决定的. 除了直接利用运动方程来对系统进行描述外, 还可从牛顿定律出发, 推导出机械能守恒定律, 第一次引入了能量的概念.</p><p>&emsp;&emsp;相比与力学课程的学习, 理论力学牛顿力学的部分额外讨论了质点在有心力场下的运动, 并在进行坐标变换后, 给出了一般的运动方程—-比耐公式, 随后讨论了在平方反比的中心力场下质点的运动. 在这之后, 则介绍了如何从开普勒三大定律归纳出万有引力定律.</p><p>&emsp;&emsp;在质点组力学中, 重要的是质心的引入, 以及与之相关的一系列质心运动定理. 这使得我们可以先考虑质点组的整体运动, 而无须考虑其内部自由度. 在具体的例子中, 考虑了两体问题 (行星绕日运动的修正、卢瑟福散射). 此外, 相比力学中的学习, 理论力学中额外学习了维里定理, 其表述为: 在很长时间间隔内, 质点组的动能对时间的平均值取负号等于作用在此质点组上的力的维里. 该定理具有统计性质, 着重研究各种力学量对时间的平均值的相互关系, 阐述了质点组随时间演化的整体规律, 其在量子力学, 统计物理中都有应用.</p><p>&emsp;&emsp;除了两体体系以外, 最简单的质点组是刚体. 对于刚体, 其内部自由度只有转动自由度.</p><p>&emsp;&emsp;在利用较多的数学 (相比力学学习) 重新回顾了经典牛顿力学后, 来到了理论力学的重点: 分析力学.</p><p>&emsp;&emsp;从牛顿力学过渡到分析力学的重要性在于: 牛顿力学是矢量力学, 而分析力学是标量力学. 从拓展的观点上看, 标量力学更容易拓展. 而过渡的基本出发点在于, 对于静止体系的研究.</p><p>&emsp;&emsp;在引入了自由度及约束的概念后, 将介绍的第一个重要的思想是 <strong>虚功原理</strong>. 为了阐释方便, 不妨将考虑约束后物体剩下的自由度称为 “剩余自由度”. 所谓 “虚功”, 即是假定物体的剩余自由度进行一个微小的变化时, 体系所做的功. 虚功原理认为, 物体的平衡条件是虚功为 0. 利用此思想, 可以简化一些使用传统矢量力学难以分析的受力平衡问题.</p><p>&emsp;&emsp;但只分析静力学是不够的, 接下来引入的另一个思想是 <strong>达朗贝尔原理</strong>. 表面上看, 达朗贝尔原理进行的操作在数学上是及其平凡的: 无非是将速度项移到运动方程的左侧. 但从物理上看, 这相当于<u>将惯性系中的动力学问题, 转化为了非惯性系中的受力平衡问题</u>, 从而可以利用虚功原理进行分析. 在进行具体计算后, 不但引入了 <strong>广义动量</strong> 与 <strong>广义力</strong> 的概念, 还给出了一般形式的拉格朗日方程. 若力为保守力, 则可得到保守系下的拉氏方程, 并归纳出极为重要的 <strong>拉格朗日量</strong> 的概念.</p><p>&emsp;&emsp;利用拉氏方程, 可以引出循环积分的概念. 具体而言, 若拉氏量不显含某个广义坐标 (或称关于某个广义坐标具有对称性), 则对应的拉氏量对相应广义速度的微分 (亦即广义动量) 为一不变量. 这个过程初步揭示了对称性与守恒量的关系. 随后利用保守系下的拉氏方程研究了最简单的保守体系: 微振动.</p><p>&emsp;&emsp;虽然得到了拉氏方程, 形式上也可以加上广义坐标与广义速度的关系来将二阶微分方程化为一阶方程组, 但得到的方程组形式上并不对称, 并没有使问题得到简化. 此外, 拉氏量本身没有明确的物理意义, 因此分析力学的工作仍然没有结束. 为此, 利用数学上的勒让得变换, 将拉氏方程由广义坐标与广义速度的函数, 变为了关于广义坐标与广义动量的函数, 并得到了形式对称的一阶方程组—- <strong>哈密顿正则方程组</strong>.</p><p>&emsp;&emsp;在得到了形式上更对称的方程后, 可以进一步引入一些手段来方便对其的研究. 为此引入的第一个数学工具是泊松括号, 而其最重要的结果是泊松定理. 泊松定理给出了一种从两个已知运动积分构造新的运动积分的方式.</p><p>&emsp;&emsp;随后提出了哈密顿原理. 相比与牛顿定律, 哈密顿原理是更具普遍性的原理. 在该原理的阐述中, 引入了作用量的概念 (其实就是拉氏函数对时间的积分). 该原理给出了在已知起始态与末态时, 求解相空间演化轨迹的方式. 具体而言, 哈密顿原理认为, 相空间真实的动力学演化轨迹, 对应于使作用量变分取极值的轨迹. 值得一提的是, 朗道的《力学》就是先从哈密顿原理出发, 给出拉氏方程, 并通过对时空对称性的分析, 归纳出经典物理中拉氏量的形式.</p><p>&emsp;&emsp;除了上述内容之外, 分析力学中一般还包括正则变换 (可以将勒让得变换视为正则变换的一种特殊情形), 哈密顿—-雅可比理论, 刘维尔定理等内容.</p>]]></content>
    
    
    <categories>
      
      <category>PHYS Unclassified</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHYS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>热力学与统计物理物理复习概要</title>
    <link href="/PHYS_condensed_physics/2021-05-31_statistic_physics_review/"/>
    <url>/PHYS_condensed_physics/2021-05-31_statistic_physics_review/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文总结了本科热力学及统计物理学习的主要知识. 该文章于去年为理念经所夏令营面试做准备所写, 最早发布于知乎, 原标题为 “<a href="https://zhuanlan.zhihu.com/p/138168378">两个月速成 (误) 物理学本科高年级课程之统计物理篇: 总纲</a>“.</p></blockquote><span id="more"></span><h2 id="原-序言"><a href="#原-序言" class="headerlink" title="(原) 序言"></a>(原) 序言</h2><blockquote><p>虽然说是速成, 但其实是复习, 希望不要被标题误导了… 因为研究生想做引力方面理论研究, 所以在两个月左右之后大概会去参加理论所的夏令营. 复习的内容主要是四大力学, 基本的广义相对论以及群论, 还有时间的话可能会写一点傅里叶光学和数理方法方面的东西. 虽然内容确实不少, 但想想去年电动力学考试的时候也才花了三天的时间复习, 两个月复习完这些也是有可能的吧? 果然 deadline 才是第一生产力 😂</p><p>由于写这个系列的目的是为了复习, 大部分内容都是按照自己的理解来写的, 难免有所纰漏. 如认为内容存在任何问题, 欢迎在评论区提出.</p></blockquote><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><p><img src="statistic_physics_review_outline.png" alt=""></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&emsp;&emsp;这是两个月速成本科物理高年级课程系列文章的的统计物理篇, 这篇主要是整理一下上学期学过的内容的主干.</p><p>&emsp;&emsp;在课程基础部分, 主要是简单回顾一下热力学, 以及补充一点后面将用到的关于多元函数及概率论的知识.</p><p>&emsp;&emsp;正篇大致可分为四个部分: 经典统计, 量子统计, 相变理论, 涨落和非平衡统计理论.</p><p>&emsp;&emsp;经典统计的重点是系综理论. 系综是统计物理中最重要的概念, 简单地来说, 系综是给定宏观态 (如系统的体积 $V$, 粒子数 $N$, 能量 $E$) 下, 所有可能的微观态组合形成的集合 (感觉上有点像量子力学中的简并能级?). 注意, 这个集合中的元素不是单个的微观态, 而是微观态的组合. </p><p>&emsp;&emsp;根据所取定的宏观量的不同, 将系综分为微正则系综, 正则系综, 巨正则系综三种. <strong>微正则系综</strong> 的特点是体系具有确定的粒子 $N$, 体积 $V$, 能量 $E$, 其统计特点是直接考虑系统的每一个微观态, 因此使用上并不方便. <strong>正则系综</strong> 则不要求体系具有确定的能量, 且其是对体系能量进行统计, 无须知道微观态的计算方法, 使用上更为方便. 此外, 在处理诸如气体吸附的问题时, 体系的粒子数会发生变化, 由此想到在正则系综的基础上, 进一步去除对体系粒子数目 $N$ 的限制, 由此得到的系综称为 <strong>巨正则系综</strong>.</p><p>&emsp;&emsp;无论是正则系综还是巨正则系综, 其理论的根源都是微正则系综, 而微正则系综又归结与统计物理的两大基本假设: 等概率原理与最概然原理. 等概率原理认为每一个微观台出现的机率都是相同的, 而最概然原理则认为平衡时系统所处的状态是概率最大的状态. 从平衡假设 (最概然原理) 出发, 可以导出平衡条件, 由此可以定义出一系列热力学量.</p><p>&emsp;&emsp;利用系综理论进行计算时, 最重要的量是体系的 (巨) 配分函数. 简单来说, 所谓配分函数就是归一化常数的倒数. 一旦知道了系统的配分函数, 就可利用其计算出所有热力学量.</p><p>&emsp;&emsp;经典统计之后是量子统计. 一般的教材会直接通过数个数的方式直接给出三大统计分布 (麦克斯韦—玻尔兹曼分布, 波色—爱因斯坦分布, 费米—狄拉克分布), 但更本质的方法是直接从多体波函数出发, 得到费米子和玻色子的统计方法, 再结合不同系综的密度矩阵 (可视为经典系综理论中的概率分布在量子力学中的推广), 得到运用量子统计法时的分布. 此外, 玻尔兹曼分布可视为费米分布与玻色分布在某种情形下的极限分布.</p><p>&emsp;&emsp;在多体波函数的研究中, 由于玻色子和费米子的多体波函数具有不同的轮换对称性 (对称与反称), 而各粒子态的张量积本身并不具有这样的对称性, 需要按照对称性, 利用单粒子态的张量积, 构造对称与反称波函数作为哈密顿算符的本征函数.</p><p>&emsp;&emsp;在得到了不同的量子统计分布后, 为了便于计算, 往往将求和换为积分, 则通常通过引入准经典假设来进行. 所谓准经典假设, 就是认为相空间具有最小分辨率 $h^{DN}$ ($D$ 为位形空间的维数, $N$ 为体系的粒子数目), 从而利用该分辨率可得到一个平均态密度. 原本的求和式可视为态密度为无数 $\delta$ 函数的求和, 因此求和化为积分的过程实际上就是利用平均态密度代替 $\delta$ 函数形式的态密度, 亦即使态的分布平滑化. 在相空间足够大时 (相对最小分辨率), 这样的近似具有很好的精度.</p><p>&emsp;&emsp;利用获得的量子配分函数, 可以以类似经典系综理论中的方法, 计算体系的各种热力学量. 其中最简单的体系是理想玻色气体与理想费米气体.</p><p>&emsp;&emsp;在相变理论的部分, 先是从范德瓦耳斯气体 (气—液相变) 出发, 引出临界点、临界指数等基本概念, 随后讨论了超导相变的唯象解释.</p><p>&emsp;&emsp;在有了两个具体例子之后, 介绍了相变的分类, 并进一步介绍了朗道二级相变理论. Ginzberg—Landau 理论可以视为其在超导中的一个具体应用.</p><p>&emsp;&emsp;Ising 模型是介绍相变时一个重要的模型. 在一维情形中, 平均场近似下的 Ising 模型可以观测到相变解, 但随后的严格解表明, 一维情形并不存在相变解. 与一维情形不同, 二维 Ising 模型中是可以观测到相变的. 不过解析解法较为复杂, 所以一般在热统学习中具体求解.</p><p>&emsp;&emsp;在有了对 Ising 模型的基本认知之后, 简单介绍了重整化群的基本思想.</p><p>&emsp;&emsp;在统计物理这门课程的最后一个部分, 介绍了非平衡统计理论. 与平衡态统计中关注物理量平均值不同, 非平衡统计关注的是物理量的涨落. 随后通过对一维随机行走的研究, 具体计算了涨落、关联函数等物理量, 并引出了涨落—耗散关系.</p><p>&emsp;&emsp;在非平衡统计理论的最后, 还介绍了 Onsager 关系.</p>]]></content>
    
    
    <categories>
      
      <category>PHYS Condensed Physics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHYS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>固体物理复习概要</title>
    <link href="/PHYS_condensed_physics/2021-05-31_solid_physics_review/"/>
    <url>/PHYS_condensed_physics/2021-05-31_solid_physics_review/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文总结了本科固体物理学习的主要知识. 该文章于去年为理念经所夏令营面试做准备所写, 最早发布于知乎, 原标题为 “<a href="https://zhuanlan.zhihu.com/p/147668269">两个月速成 (误) 物理学本科高年级课程之固体物理篇: 总纲</a>“.</p></blockquote><span id="more"></span><p><img src="cover.jpg" alt=""></p><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><p><img src="outline.png" alt=""></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&emsp;&emsp;本专栏中涉及的固体物理主要可以分为五个部分 (对应与黄昆的固体物理教材的第 1 至 5 章), 下面分别进行简要介绍. </p><p>&emsp;&emsp;第一部分主要从数学的角度讲述了如何描述三维点阵的周期性. 在引入了布拉伐格子的概念后, 便可从纯数学的角度来探讨这种周期性. 对空间点阵进行傅里叶变换, 便可在频率空间对晶体进行讨论, 进而引入倒空间的概念 (倒空间的概念也可从对偶基矢的角度来引入. 事实上, 实空间基矢的倒格基矢就是其对偶基矢. 利用这种对偶基矢, 谈论晶格周期性时可以更方便地写出并矢, 从而研究晶体的特性时会更方便. 这种方法在群论的研究中被广泛采用.). 另一面, 利用倒格矢, 在研究晶面的时候也会更加方便. 在实验上, 通过布拉格衍射方程或劳厄衍射公式, 可以得到产生衍射时对于波矢的限制, 从而推出实验上直接观测到的衍射点阵实际上反映的是倒空间的点阵, 这进一步说明了引入倒空间的必要性. 此外, 还可很自然地在讨论衍射时引入布里渊区的概念, 其在后续的固体物理理论中被广泛使用.</p><p>&emsp;&emsp;晶体的全部对称操作形成一个对称变换群. 可以证明, 由于倒空间是实空间的对偶空间, 因此二者具有相同的对称性, 亦即实空间的对称变换同样是倒空间的对称变换. 对称操作的基本要求是晶格矢量变换后仍为晶格矢量, 进而可由此分析出可能的变换, 并对变换进行分类. 反之, 给定了对称操作, 其对晶格的排列方式又会作出限制, 由此可将晶体分为 7 大晶系以及 14 种布拉伐格子.</p><p>&emsp;&emsp;第二章则定性讲解了原子间是如何通过化学键连接起来的, 包含共价键, 离子键, 金属键, 范德瓦耳斯力. 其与高中化学中关于晶体的选修有不少相似之处, 但更侧重在量子力学的基础上对大体的物理图像进行解释. 需要进行计算的部分主要集中与离子键和共价键的部分. 离子键这一块主要是在引入结合能后, 推导出平衡条件 (结合能一阶导数为零), 并对平衡时的体变模量进行计算. 共价键这一块, 主要是在忽略电子间的耦合作用的情况下, 对于分子轨道进行计算 (严格来说这一部分是半定量的).</p><p>&emsp;&emsp;第三章主要分析了固体中的原子的运动, 基本的研究手段是简谐近似. 在经典处理上, 主要依赖于原子链模型, 以及引入了周期性边界条件的思想来对格波的振动模式进行限制. 在研究原胞含多个原子的体系时, 还将振动分为了光学支及声学支. 粗略而言, 光学支反映的是质心系内的自由度的振动 (内部振动), 声学支反映的是质心自由度的振动 (整体振动). 量子处理方面, 最重要的是引入了声子的概念, 以及通过玻色统计辅以不同的色散关系来对固体热容进行计算 (包括 Einstein 模型和 Debye 模型). 在对粒子晶体的红外光学性质的研究中, 介绍了 LST 关系, 其解释了长光学波的横波与纵波频率之间是如何通过介电常数向联系的. 在这一章的末尾, 还定性介绍了势能的非简谐项是如何引起热膨胀及热传导等效应的. </p><p>&emsp;&emsp;第四章和第五章则是侧重电子的介绍, 其主要的理论依据是能带论. 这里有三条基本近似以简化问题的研究, 分别是: 绝热近似, 周期性近似, 平均场近似.</p><p>&emsp;&emsp;第四章主要介绍了电子在周期性势场中的运动. 先是介绍了最一般情况下的 Bloch 定理, 揭示了周期性势场下电子波函数的基本特性. 再后面介绍了两种模型: 近自由电子模型与紧束缚模型. 两种模型处理的基本方法均是微扰论, 不同的在于微扰算符的不同. </p><p>&emsp;&emsp;对于近自由电子模型, 其假设周期性势场仅在其平均值附近具有较小的起伏, 因此可以将平均势能作为零阶微扰, 将势场相对平均势能的起伏视为微扰算符. 在布里渊区中心处, 通过非简并微扰即可解决问题. 但在布里渊区边界处, 不同边界的态对应的能量一致, 因此应采用简并微扰, 采用非简并微扰时会出现微扰能级无穷大的问题. 不过, 直接采用简并微扰不便于讨论能量在布里渊区边界附近的变化, 黄昆教材采用的方法是进行二能级近似, 以及只考虑相差一个倒格矢的两个布里渊区边界能级的影响. </p><p>&emsp;&emsp;对于紧束缚模型, 其是将单原子势场作为零阶微扰, 而将整个空间的周期场与所在原子提供的势场之差作为微扰算符. 由于零阶微扰时, 所有原子之间没有耦合, 因此它们之间的能级分布完全一致, 从而这是一个简并微扰的问题. 由于处理该问题时会将原本的能量本征态进行线性组合来得到记入微扰后的能量本征态, 因此也称之为原子轨道线性组合方法. 具体计算时, 往往又只考虑相邻原子之间的相互作用 (不由让人想到 Ising 模型), 进而使问题进一步简化.</p><p>&emsp;&emsp;这一章的最后, 还对能态密度和费米面进行了介绍. 计算能态密度的基本思想是, 限制能量为某个值, 从而在 $k$ 空间中诱导出一个曲面. 通过计算这个曲面上的能态数目即可得到能态密度. 换句话说, 这是将能态在 $k$ 空间的分布转化到能态按能量的分布. 另一方面, 由于电子波函数是全反称的, 其服从泡利不相容原理, 其无法像玻色子一样所有粒子都尽可能跑到低能级, 而是由下向上将能级进行填充, 从而电子数一定时, 最上侧的能级在 $k$ 空间中将对应一个曲面, 这个面即是费米面, 相应的能级称为费米能级.</p><p>&emsp;&emsp;第五章主要研究的是加入外部电磁场后电子的运动. 为了简化问题, 采用了准经典近似, 亦即研究 Bloch 波函数的波包的移动. 在考虑外场的作用时发现, 电子运动的描述类似牛顿运动方程的形式, 具体来说, 外力与电子波包的加速度呈线性关系. 由于外力和及电子的加速度均为矢量, 因此二者的线性变换应通过一个二阶张量来表述, 这个张量正是有效质量张量. 有效质量在真空中将会退化为电子的质量, 因此有效质量与电子质量的差异表征了电子与固体的周期性势场之间的耦合作用. 在准经典描述下, 还可结合能带论, 解释满带不导电与非满带导电的原因, 进而更深刻地理解导体和非导体的差异.</p><p>&emsp;&emsp;在外加磁场的研究方面, 除了通过准经典近似来计算波包在空间中的移动以外, 还通过量子理论研究了外加磁场时体系的能级. 具体而言, 写出外加磁场下的哈密顿量后, 通过化简可发现其具有和谐振子哈密顿量相同的形式, 由此得到的能级被称为朗道能级. 利用朗道能级, 可以定量解释 De Hass—Van Alphen 效应, 亦即固体的磁导率随磁感应强度倒数的周期性变化. 该效应的根本原因在于磁场的改变引起了朗道能级的变化. 具体来说, 磁场改变后, 能级的结构会发生变化, 进而影响费米面和费米能级. 这种变化关于磁感应强度的倒数的变化具有周期性, 这便是 D—V 效应的物理实质.</p>]]></content>
    
    
    <categories>
      
      <category>PHYS Condensed Physics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHYS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>晶体的离子性结合</title>
    <link href="/PHYS_condensed_physics/2021-05-31_ionic_crystal/"/>
    <url>/PHYS_condensed_physics/2021-05-31_ionic_crystal/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文是黄昆固体物理教材的 2.1 节的读书笔记, 介绍了离子晶体的内能, 体变模量, 结合能等相关概念. 该文章于去年为理念经所夏令营面试做准备所写, 最早发布于知乎, 原标题为 “<a href="https://zhuanlan.zhihu.com/p/148283596">两个月速成 (误) 物理学本科高年级课程之固体物理篇: 晶体的离子性结合</a>“.</p></blockquote><span id="more"></span><p><img src="cover.jpg" alt=""></p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>&emsp;&emsp;本文主要是参考的黄昆固体物理教材的 2.1 节. 正文部分首先介绍了离子晶体的内能的推导, 随后通过平衡条件与内能的关系, 推导了平衡时离子晶体的体变模量以及结合能的表达式.</p><p>&emsp;&emsp;正文中的推导比较简略, 在附录中附有公式推导的详细过程.</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><img src="mainbody.jpg" alt=""></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p><img src="appendix.jpg" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>PHYS Condensed Physics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHYS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>晶体的 X 射线衍射</title>
    <link href="/PHYS_condensed_physics/2021-05-31_crystal_diffraction/"/>
    <url>/PHYS_condensed_physics/2021-05-31_crystal_diffraction/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文介绍了晶体的 X 射线衍射相关的知识, 包括布拉格反射公式, 劳厄衍射方程, 布拉格反射公式等. 该文章于去年为理念经所夏令营面试做准备所写, 最早发布于知乎, 原标题为 “<a href="https://zhuanlan.zhihu.com/p/148186087">两个月速成 (误) 物理学本科高年级课程之固体物理篇: 晶体的 X 射线衍射</a>“, </p></blockquote><span id="more"></span><p><img src="cover.jpg" alt=""></p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>&emsp;&emsp;本文先介绍了描述晶体衍射的一般公式 (布拉格反射公式以及劳厄衍射方程), 随后从劳厄衍射方程出发, 推导出了布拉格反射公式, 揭示了两者的内在联系. 在劳厄衍射公式的基础上, 介绍了如何利用布里渊区对衍射条件进行诠释, 以及反射球的概念. 在后面对晶体衍射实验的介绍部分, 着重利用反射球对单晶法的实验原理进行了介绍, 同时亦简单提到了旋转单晶法以及粉末法的基本思想.</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><img src="mainbody.jpg" alt="mainbody" title="mainbody"></p>]]></content>
    
    
    <categories>
      
      <category>PHYS Condensed Physics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHYS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>周期势场中电子的波函数</title>
    <link href="/PHYS_condensed_physics/2021-05-31_Bloch_theorem/"/>
    <url>/PHYS_condensed_physics/2021-05-31_Bloch_theorem/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要推导了 Bloch 定理. 该文章于去年为理念经所夏令营面试做准备所写, 最早发布于[知乎], 原标题为 “<a href="https://zhuanlan.zhihu.com/p/142267574">两个月速成 (误) 物理学本科高年级课程之固体物理篇:周期势场中电子的波函数</a>“, </p></blockquote><span id="more"></span><p><img src="cover.jpg" alt=""></p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p><img src="outline.png" alt="outline" title="outline"></p><p>&emsp;&emsp;本文主要介绍了 Bloch 定理. 其中包括了 Bloch 定理的推导以及 Bloch 函数的导出. 定理推导中首先证明了平移算符之间的对易性以及平移算符与哈密顿量的对易性, 随后引入周期性边界条件, 限制了平移算符本征值的取值. 最后将对函数的平移操作用平移算符对其的作用代替, 并利用平移算符的本征值, 给出周期性势场下能量本征函数的形式. </p><p>&emsp;&emsp;随后假设能量本征函数可以表现为对严格周期函数的调制, 并利用能量本征函数进行平移时的特性给出了调制函数的形式 (其是一个平面波), 因此也可将其视为周期函数对平面波的调制. 而该形式的函数即是通常所谓的 Bloch 函数.</p><p>&emsp;&emsp;为保证波矢可以对平移算符的本征值进行一一的标记, 可将波矢限制在第一布里渊区内, 从而引出简约波矢的概念.</p><p>&emsp;&emsp;正文部分主要给出大体的推导思路, 附录给出了详细的推导.</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><img src="mainbody.jpg" alt="mainbody" title="mainbody"></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p><img src="appendix.jpg" alt="appendix" title="appendix"></p>]]></content>
    
    
    <categories>
      
      <category>PHYS Condensed Physics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHYS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电动力学复习概要</title>
    <link href="/PHYS_electrodynamics_and_optics/2021-05-31_electrodynamics_review/"/>
    <url>/PHYS_electrodynamics_and_optics/2021-05-31_electrodynamics_review/</url>
    
    <content type="html"><![CDATA[<blockquote><p>主要回顾了本科期间电动力学所学过的内容. 该文章于去年 (2020 年) 为理念经所夏令营面试做准备所写,  本文最早发布于知乎, 原标题为 <a href="https://zhuanlan.zhihu.com/p/138318789">两个月速成 (误) 物理学本科高年级课程之电动力学篇: 总纲</a></p></blockquote><span id="more"></span><p><img src="electrodynamics_review_outline.png" alt="outline"></p><h2 id="原-序言"><a href="#原-序言" class="headerlink" title="(原) 序言"></a>(原) 序言</h2><blockquote><p>虽然说是速成, 但其实是对复习, 希望不要被标题误导了… 因为研究生想做引力方面理论研究, 所以在两个月左右之后大概会去参加理论所的夏令营. 复习的内容主要是四大力学, 基本的广义相对论以及群论, 还有时间的话可能会写一点傅里叶光学和数理方法方面的东西. 虽然内容确实不少, 但想想去年电动力学考试的时候也才花了三天的时间复习, 两个月复习完这些也是有可能的吧? 果然 deadline 才是第一生产力 😂</p><p>由于写这个系列的目的是为了复习, 大部分内容都是按照自己的理解来写的, 难免有所纰漏. 如认为内容存在任何问题, 欢迎在评论区提出.</p></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&emsp;&emsp;在正式开始电动力学的介绍之前, 先来看一下需要的数学基础.</p><p>&emsp;&emsp;总的来说, 一般的高数课程中关于场论 (指数学中的场论) 及矢量/张量分析的内容是不充分的. 因此, 在数学基础部分, 主要是补充一些基本的矢量/张量分析的概念, 其中重点关注梯度、散度、旋度的混合运算律, 以及正交曲线座标系的基本概念. 由于描述点电荷的电荷密度需要用到 $\delta$ 函数, 因此对于三维中的 $\delta$ 函数 (包括如何由二阶微分运算获得 $\delta$ 函数) 是需要有基本的了解的. 此外, 如果想要学习电动力学的相对论形式, 一些关于度规张量以及对偶微分形式的基本概念也是需要了解的.</p><p>&emsp;&emsp;正式的电动力学大致可以分为三个部分. 第一个部分从实验中得到的唯象规律总结出麦氏方程组; 第二部分研究静场 (磁场与电场),  并引入了矢势与标势, 以使问题简化; 第三部分研究变化的电磁场, 考虑了较简单的平面电磁波与相对复杂的电磁辐射的问题. 第四部分是与相对论相关的内容, 除了介绍狭义相对论的基本内容以外, 还利用微分几何 (或者说张量分析) 的语言重新对电动力学进行阐述.</p><p>&emsp;&emsp;第一部分中, 最重要的是总结出麦克思维方程组. 高斯定理, 法拉第电磁感应定律, 电流连续性方程, 毕奥—萨伐尔定律等四条实验定律的微分写法对应了四条麦氏方程. 但这里会遇到流不守恒的问题, 于是麦克斯韦引入了位移电流的概念, 再附加上四条实验定律的微分写法, 构成了真空中麦氏方程的基本内容. </p><p>&emsp;&emsp;随后研究的问题是介质中的麦氏方程具有什么样的形式. 这里引入了电极化强度以及磁化强度, 且由于研究的是均匀各向同性的介质, 因此 $\varepsilon$, $\mu$ 等常数为标量. 若介质具有各向异性, 相应的量变为张量, 使研究更为复杂. 在引入这两个量并进行进一步归纳后, 可以得到线性介质中的麦氏方程组. 利用介质中的麦氏方程组, 可以推导出介质性质发生突变时, 电磁场的边界条件.</p><p>&emsp;&emsp;接下来的工作是给出电磁场的能量与动量. 在此之前, 我们只定义过实物粒子的能量与动量, 因此这是一个概念上的进步. 推导的基本思想是利用实验中得到的洛仑兹力的表达式, 将物体的能量与动量的变化, 归结于电磁场能量与动量的转移, 从而形式上可以总结出电磁场的能量与动量. 波印亭矢量 (以及麦克斯韦力张量?) 是其中比较重要的一个概念.</p><p>&emsp;&emsp;在得到了电磁场的普遍规律后, 下面任务是描述最简单的一类场: 静场. 静场的好处在于: 由麦克斯韦方程组的形式可知, 电场与磁场的耦合项是二者对时间的导数项, 因此场为静场时, 可以分别只研究电场与磁场.</p><p>&emsp;&emsp;由于静电场是无旋场, 因此可以引入标势, 并将电场部分的麦克斯韦方程用标势来描述, 得到的方程是泊松方程. 在实际求解问题时, 最核心的结论是唯一性定理. 实际上这也可以看成是一个数学定理, 类比于常微分方程, 就好像是在说: 知道了零阶与一阶初始条件, 就可以求解二阶方程. 或者用一种计算的眼光来看待: 一旦知道了初始边界条件, 便可以设计迭代方程 (需将方程离散化, 利用微分代替差分) 来通过边界条件对于区域内的点进行迭代求解. 有了唯一性定理, 在处理对称性较高的系统时, 可以先猜测一个试探解, 若其满足给定的边界条件, 那么该解是唯一的. </p><p>&emsp;&emsp;此外, 在实际的求解中, 往往将存在电荷源的区域与没有电荷源的区域分开求解, 从而将问题简化为了带边界条件的拉普拉斯方程, 于是可以用分离变量的方式求解方程. 除了直接利用本征函数展开的方法求解泊松方程外, 还有诸如镜像电荷法和格林函数法的计算方法.</p><p>&emsp;&emsp;在静电场的最后一部分, 将讨论电势的多级展开问题, 用到的数学技巧是多元标量函数的泰勒展开. 引入的所谓电多级矩, 实质上是展开式中的一些高阶张量, 通过构造具有特殊对称性的点电荷电场, 可以说明张量分量的物理意义.</p><p>&emsp;&emsp;静电场之后是静磁场. 由于不存在磁单极子, 静磁场是无源场, 因此可引入磁标势, 并推导出标势满足的方程 (每个分量均满足泊松方程). 此外, 在磁场中的某些无旋区域, 还可引入磁标势, 此时问题的分析完全类似与静电场的情形.</p><p>&emsp;&emsp;第三部分是研究磁场与电场交替激发产生的波动—-电磁波. 从数学上考虑, 这是由于在电磁场随时间演化的时候, 麦氏方程组中的电磁耦合项非零, 此时必须将电场和磁场一起考虑. 在没有电流与电荷分布的自由空间, 由麦氏方程可以导出最简单的电磁波: 平面电磁波. 随后结合电磁场的边值关系, 可以解释诸如折射, 反射, 布儒斯特角, 全反射等一系列光学现象. 在平面电磁波的最后, 还介绍了谐振腔及波导相关的知识. 实际上, 利用谐振腔的知识, 稍作推导, 可以得出对黑体辐射的经典解释.</p><p>&emsp;&emsp;在进一步研究含有电荷及电流的空间中的电磁场性质时, 需要通过电磁场的规范不变性来改写方程, 是问题的研究得以简化. 常用的规范有库伦规范与洛仑兹规范. 值得注意的是, 若采用洛仑兹规范, 则分别得到关于矢势和标势的波动方程, 形式上相当对称.</p><p>&emsp;&emsp;由于电磁波的传播速度是有限的, 因此具有有限体积的运动带电体对远处一点的作用时, 该带电体上各点对于该点的作用存在延迟, 从这个意义上讲, 时间与空间产生了某种耦合, 于是由此引出了推迟势的概念.</p><p>&emsp;&emsp;实际的电磁辐射的计算相当复杂, 即便是最简单的振荡电偶极子系统也是如此. 因此, 在研究其电磁辐射时, 往往按照相对偶极子的距离, 在不同标度下进行研究. 解析求解中, 重点考虑的是偶极子附近与极远出的电磁辐射状态.</p><p>&emsp;&emsp;在第四部分, 主要加入了狭义相对论的知识. 除了对洛仑兹变换带来的基本推论以外, 重要的是如何用张量代数的语言来描述电动力学理论. 麦氏方程本身就是洛仑兹协变的, 而使用张量代数的语言, 可以更明显地看到其洛仑兹协变性, 对于深入的讨论有极大的益处.</p>]]></content>
    
    
    <categories>
      
      <category>PHYS Electrodynamics and Optics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHYS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>切矢及切矢场</title>
    <link href="/PHYS_general_relativity/2021-05-31_tangent_vector/"/>
    <url>/PHYS_general_relativity/2021-05-31_tangent_vector/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要对应于梁灿彬《微分几何入门与广义相对论》第 2.2 节的内容, 但提前介始了抽象指标. 该篇文章于去年为理念经所夏令营面试做准备所写. 最早发布于知乎, 原标题为 <a href="https://zhuanlan.zhihu.com/p/142378492">两个月速成 (误) 物理学本科高年级课程之微分几何篇: 切矢及切矢场</a>.</p></blockquote><span id="more"></span><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p><img src="outline.png" alt="outlie" title="outlie"></p><p>&emsp;&emsp;本文对应于《微分几何入门与广义相对论》上册的第 2.2 节. 可以说这一节是整个第二章中最重要的一节了, 相应的, 内容也是最多的. 此外, 本节中介绍的切矢、矢量场、单参微分同胚群等概念在后续李群的学习中大量用到. 理论上来说这一节学好了, 再加上一点群论基础, 中册后面关于李群的附录中的很多内容就可以开始学习了.</p><p>&emsp;&emsp;和原书中最后再介绍抽象指标记号不同, 本文在定义了矢量后就直接引入抽象指标记号, 力图在概念的阐述中自然地学会抽象指标记号的使用. 在后面对对偶矢量及张量的讲解中也将采用该策略.</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><img src="mainbody.jpg" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>PHYS General Relativity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHYS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>群及其乘法表</title>
    <link href="/PHYS_group_theory/2021-05-31_conception_of_group/"/>
    <url>/PHYS_group_theory/2021-05-31_conception_of_group/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要介绍了群论中的基本概念. 该文章写于去年为理论所夏令营面试做准备期间, , 最早发布于知乎, 原标题为 <a href="https://zhuanlan.zhihu.com/p/139733105">两个月速成 (误) 物理学本科高年级课程之群论篇: 群及其乘法表</a></p></blockquote><span id="more"></span><p><img src="cover.jpg" alt=""></p><h2 id="原-序论"><a href="#原-序论" class="headerlink" title="(原) 序论"></a>(原) 序论</h2><blockquote><p>本文对应的内容主要为《物理学中的群论》中第 2.2 节的内容.</p><p>不得不吐槽一下, 马中骐的这本书的很多地方看得我头大… 所以除了群的基本概念主要依据马中骐的教材外, 有限群的群表示论, 空间群, 转动群, 置换群等四部分将主要参考北大李新征的讲义; 李群的部分主要参考梁灿彬《微分几何入门与广义相对论 (中册)》关于李群的数学附录.</p></blockquote><p><img src="2.2_basic_conception_about_group.png" alt="outline" title="outline"></p><h2 id="1-群的基本概念"><a href="#1-群的基本概念" class="headerlink" title="1 群的基本概念"></a>1 群的基本概念</h2><h3 id="1-1-群的定义"><a href="#1-1-群的定义" class="headerlink" title="1.1 群的定义"></a>1.1 群的定义</h3><p><u><strong>对称变换:</strong></u><br>    保持系统不变的变换称为 <strong>对称变换</strong> .</p><ul><li><u><strong>群:</strong></u><br>在规定了元素的乘法后, 元素的集合 $G$ 若满足下面四条公理, 则这个集合可被称为 <strong>群</strong> :<ol><li><strong>封闭性 :</strong> 任意两元素的乘积仍然属于这个集合. 亦即:<script type="math/tex; mode=display">     RS \in G, \quad \forall R, S \in G</script></li><li><strong>结合律 :</strong> 乘积满足结合律, 亦即:<script type="math/tex; mode=display">     R (ST) = (RS) T, \quad \forall R,\ S,\ T\ \in G</script></li><li><strong>存在单位元 :</strong> 存在一个被称为单位元的元素 $E$, 用它左乘任意元素, 该元素均保持不变. 亦即:<script type="math/tex; mode=display">     ER = R, \forall R \in G</script></li><li><strong>任何元素存在逆元 :</strong> 任意元素 $R$ 均存在对应的逆元 $R^{-1}$, 其定义为:<script type="math/tex; mode=display">     R^{-1} R = E</script>亦即元素与其逆元的乘积等于单位元.</li></ol></li></ul><h3 id="1-2-群的基本性质"><a href="#1-2-群的基本性质" class="headerlink" title="1.2 群的基本性质"></a>1.2 群的基本性质</h3><p>&emsp;&emsp;可以看到, 在对单位元及逆元进行定义的时候, 只定义了左乘, 那么单位元右乘或逆元右乘时, 还会有相同的性质吗? 实际上, 从基本定义出发, 可以得到以下推论:</p><ul><li><u><strong>恒元及逆元的右乘:</strong></u><ol><li><strong>恒元右乘:</strong> 恒元右乘时, 同样保有恒元的性质, 亦即:<script type="math/tex; mode=display">     RE = R</script></li><li><strong>逆元右乘:</strong> 逆元右乘时, 还是得到恒元. 换而言之, 逆元 $R^{-1}$ 的逆, 恰是 $R$ 自身:<script type="math/tex; mode=display">\begin{aligned}     RR^{-1} &= E \\     (R^{-1})^{-1} &= R \end{aligned}</script></li></ol></li></ul><p>&emsp;&emsp;可以看见, 对于恒元及逆元, 其运算是可交换的, 这个性质对所有群均成立. 由于恒元及逆元在乘法运算上的对称性, 在之后讨论或证明相关性质时, 可以只考虑一个方向上的乘法. 由恒元及逆元的右乘的性质出发, 不难得出恒元及逆元的唯一性:</p><ul><li><u><strong>恒元及逆元的唯一性:</strong></u><ol><li><strong>恒元的唯一性:</strong> 若 $TR = R$ 或 $RT = R$, 则 $T = E$.</li><li><strong>逆元的唯一性:</strong> 若 $TR = E$ 或 $RT = E$, 则 $T = R^{-1}$.</li></ol></li></ul><p><strong>Notation :</strong></p><ol><li>对于奇数阶群, 因为单位元自身是自身的逆元. 因而此时除了单位元以外的元素为偶数个, 从而可以成对地提取出元素以及它的逆元; 对于偶数阶群, 由于除了单位元外的元素为奇数个, 因此必然有元素其逆元是自身, 也就是说, <u>偶数阶群必然存在二阶元素.</u></li><li>不难证明: <u>若一个群 $G$ 中含有二阶元素, 则该二阶元素与幺元素构成该群的一个子群</u></li></ol><p>&emsp;&emsp;一般而言, 除了恒元及逆元外, 一般元素之间的乘法是不可对易的, 但也存在如实数加法群这样的乘法可对易的群, 于是有了 <strong>阿贝尔群</strong> 的概念:</p><ul><li><u><strong>阿贝尔群:</strong></u><br>元素乘积都可对易的群称为 <strong>阿贝尔群</strong> .</li></ul><h3 id="1-3-群的阶数"><a href="#1-3-群的阶数" class="headerlink" title="1.3 群的阶数"></a>1.3 群的阶数</h3><p>&emsp;&emsp;按照群元素的数目, 可以定义 <strong>群的阶数:</strong></p><ul><li><u><strong>群的阶数:</strong></u><br>群 $G$ 的群元素的个数 $g$ 称为群 $G$ 的阶数.</li></ul><p>&emsp;&emsp;还可以对群的阶数进行更细致的讨论:</p><ul><li><u><strong>无限群:</strong></u><br>群元数目无限多的群称为 <strong>无限群.</strong></li></ul><ul><li><u><strong>连续群:</strong></u><br>若可以建立群元到一组连续参数的一一映射, 则这样的群称为 <strong>连续群.</strong></li></ul><p>连续群的一个例子是之后将要接触到的 <strong>李群.</strong></p><p>&emsp;&emsp;对于有限群, 由于群元素的有限性, 群中任一元素的幂次足够高时, 其总会回归到自身. 如: 对于 6 阶群 $G_{6}$, 其只有 6 个不同的元素. 设 $R \in G_{6}$, 对于 $R^n$, 在 $n &gt; 6$ 之前, 一定会出现 $R^n = R$ 的情形, 因为 6 阶群不可能有 7 个不同元素. 由此可以引出 <strong>群元素的阶数</strong> 的定义:</p><ul><li><u><strong>群元素的阶数:</strong></u><br>若群 $G$ 中的群元 $R$ 满足:<script type="math/tex; mode=display">      R^{a} = E, \quad a \in \mathbb{Z}^{+}</script>则称 $a$ 为群元素 $R$ 的阶数</li></ul><h2 id="2-重排定理与乘法表"><a href="#2-重排定理与乘法表" class="headerlink" title="2 重排定理与乘法表"></a>2 重排定理与乘法表</h2><h3 id="2-1-重排定理"><a href="#2-1-重排定理" class="headerlink" title="2.1 重排定理"></a>2.1 重排定理</h3><p>&emsp;&emsp;群论中有一个名为 <strong>重排定理</strong> 的基本定理, 为更方便地对其进行表述, 首先引入 <strong>复元素</strong> 的概念:</p><ul><li><u><strong>复元素:</strong></u><br>在群 $G$ 中选取一个子集 $R$, 将该子集 $R$ 称为群 $G$ 的一个复元素.</li></ul><p>从定义可以发现, 复元素的本质是一个集合, 因此满足集合的 <strong>无序性</strong> ,  <strong>确定性</strong> ,  <strong>互异性</strong> 等基本性质. 此外, <u>两复元素 $R_1$, $R_2$ 相等的充要条件是它们所包含的元素完全相同.</u> 这一点和一般的集合相等是完全一致的. 在有了复元素的基本概念之后, 需要考虑的是如何定义复元素与普通元素的乘法:</p><ul><li><u><strong>复元素与普通元素的乘法:</strong></u><br>复元素乘上普通元素仍然得到一个复元素, 该复元素由该普通元素分别与原本复元素的每一元素相乘得到. 亦即, 若 $R = \{r_i\}$, $s$ 为一普通元素, 则:<script type="math/tex; mode=display">      sR := \{s r_i\}, Rs:= \{r_i s\}</script></li></ul><p>复元素也可与复元素相乘, 其结果是所有乘积组合形成的新集合, 即:</p><ul><li><u><strong>复元素与复元素相乘:</strong></u><br>若 $R = \{r_i\}$, $S = \{s_i\}$, 则:</li></ul><script type="math/tex; mode=display">    RS := \{r_i s_j\}, SR := \{s_i r_j\}</script><p>接下来正式介绍重排定理:</p><ul><li><p><u><strong>重排定理:</strong></u><br>用 $G$ 表示群中所有元素构成的复元素, $G^{-1}$ 表示群中所有元素的逆元素构成的复元素, $T$ 为群中任一普通元素, 于是:</p><script type="math/tex; mode=display">      TG = GT = G^{-1} = G</script><p>  <strong>Pf:</strong><br>  &emsp;&emsp;欲证明两个集合相等, 需要证明两个集合相互包含. 而证明一个集合属于另一个集合, 需要证明其中的每一元素均属于另一集合. 基于这个思想, 下面给出 $TG = G$ 的证明, 其余的证明同理.</p><p>  &emsp;&emsp;记 $G = {R_i}$, $TG = {TR_i}$, 由群运算的封闭性, 可知:</p><script type="math/tex; mode=display">      TR_i \in G</script><p>  从而:</p><script type="math/tex; mode=display">      TG \subset G</script><p>  &emsp;&emsp;另一面, 对于 $G$ 中任一元素 $R_i$, 总可写为:</p><script type="math/tex; mode=display">      R_i = T(T^{-1} R_i)</script><p>  由于 $T^{-1} R_i \in G$, 从而 $T(T^{-1} R_i) \in TG$, 故 $R_i \in TG$, 于是:</p><script type="math/tex; mode=display">      G \subset TG</script><p>  结合前面的讨论可知:</p><script type="math/tex; mode=display">      TG = G</script></li></ul><h3 id="2-2-乘法表"><a href="#2-2-乘法表" class="headerlink" title="2.2 乘法表"></a>2.2 乘法表</h3><p>&emsp;&emsp;对于有限群, 可以把群中每一对乘积得到的结果都列出来形成一张表, 由此引出 <strong>乘法表</strong> 的概念:</p><ul><li><u><strong>乘法表:</strong></u><br>对于有限群, 在行与列都填满该群中的所有元素. 若记 $R = \{r_i\}$ 在第 $i$ 行第 $j$ 列的位置, 填上元素 $r_i$ 右乘 $r_j$ 的结果 $r_i r_j$, 由此形成的表称为乘法表.</li></ul><p><strong>Notation :</strong></p><ol><li>从重排定理可以推出: <u>乘法表的每一行或每一列均没有重复元素.</u></li><li>可以预见, <u>对于阿贝尔群, 乘法表是关于对角线对称的.</u></li></ol><h2 id="3-群的同构"><a href="#3-群的同构" class="headerlink" title="3 群的同构"></a>3 群的同构</h2><ul><li><u><strong>群的同构:</strong></u><br>若存在一个从群 $G$ 到群 $G’$ 的一一映射 $f$:</li></ul><script type="math/tex; mode=display">    f: G \to G', R \mapsto R'</script><p>若 $\forall R, S \in G, R’ = f(R), S’ = f(S)$, 满足:</p><script type="math/tex; mode=display">    F(R, S) = F'(R', S')</script><p>即称 $G$ 与 $G’$  <strong>同构 (isomorphism)</strong> , 记为 $G \approx G’$. 其中 $F$, $F’$ 分别表示两群的群乘法.</p><ul><li><u><strong>Example (空间反演群与二阶循环群):</strong></u><br>若以 $e$ 代表恒等变换 e, 以 $\sigma$ 代表空间反演变换, 则此群是对空间反演不变的系统的对称变换群, 记为 $V_2$. 其与二阶循环群 $C_2$ 同构.</li></ul><h2 id="4-群的生成元与秩"><a href="#4-群的生成元与秩" class="headerlink" title="4 群的生成元与秩"></a>4 群的生成元与秩</h2><p>&emsp;&emsp;前面提到过, 有限群的元素有阶数的概念. 也就是说: 或许可以只用很少的几个元素以及它们的幂来构造出该群的所有元素, 这就涉及到下面将介绍的 <strong>生成元</strong> 的概念:</p><ul><li><u><strong>循环群与生成元:</strong></u><br>由一个元素 $R$ 及其幂次构成的有限群称为由 $R$ 生成的循环群, 记为 $C_n$. $n$ 称为 <strong>循环群的阶</strong> , $R$ 称为 <strong>循环群的生成元</strong> . 一般地, 循环群 $C_n$ 可以被描述为:</li></ul><script type="math/tex; mode=display">    C_n = \{E, R, R^{1}, R^{2}, \dots , R^{n-1}\}, R^{n} = E</script><p>对于 $n$ 阶循环群, <u>其阶数等于其生成元的阶数.</u> 此外, 不难得知:</p><script type="math/tex; mode=display">    R^{-1} = R^{1-n}</script><p>更一般地, 若用记号 $j\ \mathrm{mod}\ N$ 来表示 $j$ 整除 $N$ 后的余数, 则对于 $n$ 阶循环群 $C_n$, 有:</p><script type="math/tex; mode=display">    R^{a} = R^{a\ \mathrm{mod}\ N}</script><p>于是可以从循环的角度来理解模运算: $j\ \mathrm{mod}\ N$ 表示将取值相差 $N$ 的两个 $j$ 看成相同的.</p><p>&emsp;&emsp;以上只讨论了对于循环群如何定义阶数, 那么, 对任一有限群, 能否定义阶数以及生成元呢? 答案是肯定的, 由此还能引出有限群的秩的概念:</p><ul><li><u><strong>有限群的生成元与秩:</strong></u><br>对于群 $G$, 任取一个元素 $R_1$, 若其幂次构成的集合尚无法填满整个群, 那么再取下一个元素 $R_2$, 并考虑 $R_2$ 的幂次构成的集合. 如此反复操作, 直至由取出的元素的幂次构成的元素集合的并集能够填满整个群为止, 将这些基本元素的集合 $\{R_i\}$ 称为群 $G$ 的 <strong>生成元</strong> , 集合 $\{R_i\}$ 中元素的数目称为该群的 <strong>秩</strong> .</li></ul><p>&emsp;&emsp;生成元的概念在之后学习李群时可以做进一步推广为李群单位元切空间的一组基矢. 但相同之处在于: 无论是李群还是在离散群中, 均可由生成元导出一个子群.</p>]]></content>
    
    
    <categories>
      
      <category>PHYS Group Theory</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHYS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>晶体的对称变换群</title>
    <link href="/PHYS_group_theory/2021-05-31_crystal_symmetry_group/"/>
    <url>/PHYS_group_theory/2021-05-31_crystal_symmetry_group/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要重写了马中骐群论教材第 5.1 节的内容 此篇文章写于去年为理论所夏令营面试做准备期间, 最早发布于知乎, 原标题为 “<a href="https://zhuanlan.zhihu.com/p/138278671">两个月速成 (误) 物理学本科高年级课程之群论篇: 晶体的对称变换群</a>“</p></blockquote><span id="more"></span><p><img src="cover.jpg" alt=""></p><h2 id="原-序论"><a href="#原-序论" class="headerlink" title="(原) 序论"></a>(原) 序论</h2><blockquote><p>本文主要将马中骐《物理学中的群论》的第 5.1 节重新叙述了一遍. 感觉这一节的不足在于关于空间群的商群与点群的同构关系的证明不够清晰, 中途跳过了太多步骤, 希望本文能将这一部分讲解得更为清晰.</p></blockquote><p><img src="5.1_outline.png" alt="outline"></p><h2 id="原胞及晶体的平移对称性"><a href="#原胞及晶体的平移对称性" class="headerlink" title="原胞及晶体的平移对称性"></a>原胞及晶体的平移对称性</h2><p>&emsp;&emsp;晶体可以视为具有平移对称性的空间点阵. 取定点阵中的一点, 由该点出发, 指向其它格点的矢量称为 <strong>晶格矢量</strong> (本文中简称 “格矢”). 在这些晶格矢量中, 通过合理选择基矢标架 $\boldsymbol{a}_i$ ($i = 1, 2, 3$), 可以使任意格矢 $\boldsymbol{l}$ 均以该组基矢的整数线性组合表出:</p><script type="math/tex; mode=display">    \boldsymbol{l} = \sum_{i = 1}^{3} l_i \boldsymbol{a}_i</script><p>可知, 这样选择的标架张成的平行六面体是晶格的最小周期单元, 称为 <strong>原胞</strong>.</p><p>&emsp;&emsp;晶格所具有的平移对称性使得晶格整体平移任意格矢 $\boldsymbol{l}$ 后不变. 若记平移 $\boldsymbol{l}$ 的变换为 $T(\boldsymbol{l})$, 则这样的变换构成晶体的一个对称变换群, 称为 <strong>晶体的平移群</strong>, 简称 <strong>平移群</strong>, 记为 $\mathscr{T}$.</p><h2 id="晶体的协同对称变换"><a href="#晶体的协同对称变换" class="headerlink" title="晶体的协同对称变换"></a>晶体的协同对称变换</h2><p>&emsp;&emsp;除了平移变换外, 一些平移, 旋转, 反射的协同变换同样可能是晶体的对称操作. 因此, 首先要研究如何表示协同对称变换, 以及推导出其变换率. 注意, 与马中骐中的教材不同, 这里先讨论的是变换的一般性描述, 在之后才会加上其是晶体对称操作的限制.</p><p>&emsp;&emsp;设 $R$ 为一实正交变换 (其包含了固有与非固有转动, 简单来说, 非固有转动相对固有转动多出了空间反演的变换), $\boldsymbol{\alpha}$ 为一矢量, 则将先进行 $R$ 转动, 再进行 $\boldsymbol{\alpha}$ 平移的变换记为 $g(R, \boldsymbol{\alpha})$. 以及该变换作用在任一矢量 $\boldsymbol{r}$ 上的效果为:</p><script type="math/tex; mode=display">    g(R, \boldsymbol{\alpha}) \boldsymbol{r} = R \boldsymbol{r} + \boldsymbol{\alpha}</script><p>由该变换的定义, 不难推导出不同变换的乘积规律 (推导见文末):</p><script type="math/tex; mode=display">    g(R, \boldsymbol{\alpha})g(R', \boldsymbol{\beta}) = g(RR', \boldsymbol{\alpha} + R \boldsymbol{\beta})</script><p>以及变换相应的逆变换:</p><script type="math/tex; mode=display">    g(R, \boldsymbol{\alpha})^{-1} = g(R^{-1}, - R^{-1} \boldsymbol{\alpha})</script><p>&emsp;&emsp;特别地, 若 $\boldsymbol{\alpha}$ 恒为 0, 则变换退化为实正交变换 $R$. 若再附加上 $g$ 是晶格的对称变换的条件, 则将该条件下出现的所有实正交变换 $R$ 的集合构成的群称为 <strong>点群</strong>, 有时也称为 <strong>晶格点群</strong> (注意, 晶格点群虽然名字中有 “晶格” 二字, 但则只表明其是从对称变换中提取出的, 单独的变换 $R$ 并不一定是晶体的对称变换, 要是对称变换, 往往还要附加一定的平移), 记为 $G$.</p><p>&emsp;&emsp;此外, 若 $R$ 为恒等变换 $E$, 则变换退化为平移变换, 亦即:</p><script type="math/tex; mode=display">    g(E, \boldsymbol{t}) = T(\boldsymbol{t})</script><p>注意, 一般而言, 平移变换与变换 $g$ 是不对易的:</p><script type="math/tex; mode=display">\begin{align}    & g(R, \boldsymbol{\alpha}) T(\boldsymbol{t}) = g(R, \boldsymbol{\alpha} + R \boldsymbol{t}) \\    & T(\boldsymbol{t}) g(R, \boldsymbol{\alpha}) = g(R, \boldsymbol{\alpha} + \boldsymbol{t})\end{align}</script><h2 id="空间群及其商群"><a href="#空间群及其商群" class="headerlink" title="空间群及其商群"></a>空间群及其商群</h2><p>&emsp;&emsp;之前讨论的两种群 (平移群, 点群) 中, 只有平移群一定是晶体的对称变换. 一般地, 将晶体对称变换的几何构成的对称变换群称为 <strong>空间群</strong>, 记为 $\mathscr{S}$.</p><p>&emsp;&emsp;设 $g(R, \boldsymbol{\alpha})$ 是 $\mathscr{S}$ 中的元素 (注意! 这里虽然符号一样, 但 $g$ 是表示群 $\mathscr{S}$ 中的元素, 而非任意的变换操作). 可以证明, 晶体的平移变换的共轭元素仍是平移变换 (证明见文末), 从而可知: <u>平移变换群是空间群的不变子群</u>, 从而可以得到对应的商群 $\mathscr{S}/\mathscr{T}$.</p><p>&emsp;&emsp;(注意, 从下面开始的叙述将和教材中有相当大的不同, 但表述的物理图像是一样的. 如果同样被 5.1 节后半部分给坑了, 仔细看一下应该会有很大的帮助)</p><p>&emsp;&emsp;一般来说, 空间群元素 $g(R, \boldsymbol{\alpha})$ 中的平移矢量 $\boldsymbol{\alpha}$ 分量不一定是整数, 不妨将其拆分为整数与非整数部分:</p><script type="math/tex; mode=display">    \boldsymbol{\alpha} = \boldsymbol{l} + \boldsymbol{t},\ 0 \leq t_i < 1</script><p>这里考虑到整数的平移一定对应某一晶格矢量, 故用符号 $\boldsymbol{l}$ 来代表整数部分. 在这样的拆分下, 群元 $g(R, \boldsymbol{\alpha})$ 可以写为:</p><script type="math/tex; mode=display">    g(R, \boldsymbol{\alpha}) = T(\boldsymbol{l})g(R, \boldsymbol{t})</script><p>若让 $\boldsymbol{l}$ 遍历每一个格矢, 则等式的右侧可视为平移群的右陪集. 下面将证明, 对于给定的 $R$, 上式中的 $\boldsymbol{t}$ 是唯一的 (这也是感觉教材中 5.1 节讲得最不清楚的部分), 或者说: <u>空间群 $\mathscr{S}$ 关于不变子群 $\mathscr{T}$ 的商群与点群 $R$ 同构</u>. 基本证明思想是: 相同的 $R$ 下, 一个元素与另一个元素的逆元相乘的结果为一个平移群元素, 而该平移群元素对应的平移矢量的分量必定为整数, 从而给定 $R$ 时, 不同 $\boldsymbol{\alpha}$ 的对应分量之间只能相差整数, 于是分量的小数部分必定相同, 从而 $\boldsymbol{t}$ 相同.</p><p>&emsp;&emsp;设给定 $R$, 取空间群元素 $g_1 = g(R, \boldsymbol{\alpha}) = T(\boldsymbol{l}_1)g(R, \boldsymbol{t}_1)$ 与 $g_2 = g(R, \boldsymbol{\alpha’}) = T(\boldsymbol{l}_2)g(R, \boldsymbol{t}_2)$. 由上一节得出的运算律可知:</p><script type="math/tex; mode=display">    g_{1}^{-1} g_{2} = g(R_{-1}, - R^{-1} \boldsymbol{\alpha}) g(R, \boldsymbol{\alpha}') = T(-R^{-1} \boldsymbol{\alpha} + R^{-1} \boldsymbol{\alpha}') = T(R^{-1} (- \boldsymbol{\alpha} + \boldsymbol{\alpha}'))</script><p>由于 $g_{1}^{-1}$ 与$g_{2}$ 都是空间群中的元素, 由群运算的封闭性知, 其乘积也应是空间群中的元素. 上面的推导可以看出, 乘积的结果是一个平移变换, 因此其是一个平移群中的元素, 从而平移的矢量应是一个格矢 (上面的讨论都是在原胞基矢下的, 所以格矢的各分量均为整数):</p><script type="math/tex; mode=display">    R^{-1} (- \boldsymbol{\alpha} + \boldsymbol{\alpha}') = \boldsymbol{l}</script><p>从而可知:</p><script type="math/tex; mode=display">    - \boldsymbol{\alpha} + \boldsymbol{\alpha}' = R \boldsymbol{l} = \boldsymbol{l}'</script><p>后面一步是因为我们限制了变换为对称变换, 从而 $R$ 并不是任意的实正交变换, 而是一个点群元素, 其一定可以将一个晶格矢量变为另一个晶格 (总感觉这一段的叙述有点小问题…). 由于 $\boldsymbol{l}$ 的各分量是整数, 那么等式右侧 $\boldsymbol{\alpha}$ 与 $\boldsymbol{\alpha}’$ 的差值的分量也应是整数, 从而小数部分 $\boldsymbol{t}$ 与 $\boldsymbol{t}’$ 应当一致, 这就证明了我们的结论.</p><h2 id="具体推导"><a href="#具体推导" class="headerlink" title="具体推导"></a>具体推导</h2><p>&emsp;&emsp;前文中省略的一些推导如下图所示:<br><img src="5.1_specific_derivation.jpg" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>PHYS Group Theory</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHYS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>量子力学中的微扰论</title>
    <link href="/PHYS_quantum_theory/2021-05-31_perturbation_theory/"/>
    <url>/PHYS_quantum_theory/2021-05-31_perturbation_theory/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要介绍了量子力学中的微扰论, 包括简并与非简并微扰. 此篇文章写于去年为理论所夏令营面试做准备期间, 最早发布于知乎, 原标题为 <a href="https://zhuanlan.zhihu.com/p/141366040">两个月速成 (误) 物理学本科高年级课程之量子力学篇: 微扰论</a></p></blockquote><span id="more"></span><p><img src="cover.jpg" alt=""></p><h2 id="原-序论"><a href="#原-序论" class="headerlink" title="(原) 序论"></a>(原) 序论</h2><blockquote><p>本来按照之前的习惯我会把 LaTeX 的源码转换成 Markdown 的, 再通过 Zhihu On VSCode 来发文章的. 但无奈这次用的狄拉克符号太多了, Vim 的正则表达式又没办法只匹配成对的外层括号, 所以就无法自动化地实现源码的转换了. </p><p>因此, 这次仅在开头给出正文的概述, 正文部分则直接是 LaTeX 生成的 PDF 转化的图片 (经过剪裁及拼接). 如果觉得这样的阅读体验比之前 Markdown 编写的更好 (毕竟 LaTeX 的排版我是特意调整过的… 而且又有交叉引用), 那今后都采用这种模式 (其实就是懒…). 所以希望各位能在评论区反馈一下, Markdwon 版和 LaTeX 版 (图片) 的哪一种的阅读体验更好.</p><p>另外最近应该会复习固体物理中的近自由电子模型和紧束缚模型, 微扰论算是这两个理论的基础吧 (这也就是为什么这里没有放微扰论解决具体问题的例子).</p></blockquote><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>&emsp;&emsp;本文主要介绍了微扰论的一般思想, 导出了微扰方程. 对于非简并的情形, 求解了一、二阶微扰的本征值, 以及一阶微扰的本征矢. 对于简并微扰, 给出了一阶简并微扰能级满足的本征值方程.</p><p>&emsp;&emsp;正文部分只给出了推导的大致思路, 附录部分给出了详细的推导过程 (手写版).</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><img src="mainbody.jpg" alt=""></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p><img src="appendix.jpg" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>PHYS Quantum Theory</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHYS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>量子力学复习概要</title>
    <link href="/PHYS_quantum_theory/2021-05-31_quantum_mechanics_review/"/>
    <url>/PHYS_quantum_theory/2021-05-31_quantum_mechanics_review/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要回顾了本科期间量子力学课上学到的东西. 此篇文章写于去年为理论所夏令营面试做准备期间, 最早发布于知乎, 原标题为 <a href="https://zhuanlan.zhihu.com/p/138351998">两个月速成 (误) 物理学本科高年级课程之量子力学篇: 总纲</a></p></blockquote><span id="more"></span><p><img src="cover.jpg" alt=""></p><h2 id="原-序言"><a href="#原-序言" class="headerlink" title="(原) 序言"></a>(原) 序言</h2><blockquote><p>虽然说是速成, 但其实是复习, 希望不要被标题误导了… 因为研究生想做引力方面理论研究, 所以在两个月左右之后大概会去参加理论所的夏令营. 复习的内容主要是四大力学, 基本的广义相对论以及群论, 还有时间的话可能会写一点傅里叶光学和数理方法方面的东西. 虽然内容确实不少, 但想想去年电动力学考试的时候也才花了三天的时间复习, 两个月复习完这些也是有可能的吧? 果然 deadline 才是第一生产力 😂</p><p>由于写这个系列的目的是为了复习, 大部分内容都是按照自己的理解来写的, 难免有所纰漏. 如认为内容存在任何问题, 欢迎在评论区提出.</p></blockquote><p><img src="quantum_mechanics_review_outline.png" alt=""></p><p>&emsp;&emsp;总的来说, 量子力学有两种讲法. 一种是利用波函数来讲, 其优势在于计算某些势场 (如方势阱) 时会比较方便, 较为典型的有曾谨言的量子力学教材. 另一种是从线性代数的角度来讲, 广泛运用狄拉克符号, 坐标表象下的波函数在这种语言中, 相当于所讨论的态在坐标本征态下的分量, 较为典型的有科恩的量子力学教材. 后一种讲法的优点在于, 抽象程度更高, 能清晰地看到量子力学的代数结构, 在讨论本征值时更方便, 且对于今后学习量子计算很有帮助. 在这个系列的量子力学部分, 着重从线性代数的角度来讲, 这部分内容的参考教材包括科恩的量子力学教材, 以及 Nielsen 的量子信息教材.</p><p>&emsp;&emsp;按照惯例, 在正式进入量子力学之前, 会介绍一点旧量子论的东西. 主要的内容包括黑体辐射, 光电效应, 玻尔理论, 索末菲量子化条件, 德布罗意波. 由于大部分内容在原子物理中已经学过, 所以不展开讨论旧量子论的内容.</p><p>&emsp;&emsp;数学基础主要是拓展的线性代数. 在正常的线性代数教学中, 主要是学的具体矩阵运算, 且几乎都只在实数域上讨论. 但在量子力学中, 关心的是算符, 矩阵知识一种计算手段, 且讨论的数域拓展到复数域. 另一方面, 还需要了解希尔伯特空间的基本概念. 不严谨地说, 希尔伯特空间就是一个定义了内积的复线性空间 (当然还有其它要求), 一般要求内积具有厄米性. 而一旦定义了内积, 就可以由内积衍生出希尔伯特空间的对偶空间, 进而衍生出算符的对偶算符和伴随算符等概念. 其中, 算符 $A$ 作用于态矢 $| \phi \rangle$ 后得到的矢量 $A | \phi \rangle$, 其在对偶空间中的对应量为 $\langle \phi | A^\dag$. 在量子力学的符号系统里面, 用右矢表示希尔伯特空间的矢量, 用左矢表示其对偶矢量. 有了基本概念之后, 就可以开始讨论算符的幺正性, 厄米性等性质. 值得一提的是, 算符的本征值以及不变子空间等概念也是相当重要的.</p><p>&emsp;&emsp;有了基本的数学基础后, 就可以正式开始量子力学的学习了. 首先是量子力学的基本假设: 态的假设, 物理体系演化规律的假设, 测量假设, 多粒子体系假设. </p><p>&emsp;&emsp;态假设认为, 单粒子的每一个状态, 都对应于希尔伯特空间中的一个射线 (之所以说是射线, 由于概率诠释, 最终都要做归一化, 所态矢的模意义不大). </p><p>&emsp;&emsp;物理体系演化规律假设有两种叙述方法: 一种认为态的演化可以用厄米算符来描述 (实质是概率守恒), 另一种是认为态的演化遵循薛定谔方程. 但只要由薛定谔方程出发, 提取出时间演化算符, 就可看到这两种表述的统一性. </p><p>&emsp;&emsp;测量假设则描述了测量这个过程. 在这个假设中, 每一个力学量对应一个幺正算符, 测量结果只能是该算符的本征值, 且测量后会坍缩到对应的某个本征态, 相应的概率是将波函数在正交归一的本征态下做展开时对应的展开系数.</p><p>&emsp;&emsp;最后的假设是多粒子体系波函数的假设. 简单来说, 其认为多粒子体系的态矢可以由原本的诸粒子态矢的各个直积的线性组合构成.</p><p>&emsp;&emsp;一般来说, 除了态矢描述以外, 还可采用密度矩阵 (可以视为经典统计中态的概率分布函数在量子力学中的推广) 描述, 其四条假设都可以用密度矩阵等效的来表示. 特别是在量子统计中, 密度矩阵扮演着及其重要的地位.</p><p>&emsp;&emsp;在有了基本的假设之后, 就是解一些具体的薛定谔方程了.</p><p>&emsp;&emsp;第一部分是方势阱 (包括束缚态及散射态) 及自由粒子. 考虑到势场的分布特性, 这类问题适合用波函数来讨论.</p><p>&emsp;&emsp;第二个部分是一维谐振子, 解法大致可分为代数解法和解析解法. 解析解法就是直接求解谐振子势下的薛定谔方程, 其中会用到厄米多项式等特殊函数, 总的来说计算较为繁琐, 且先得到本征函数后才考虑能级. 另一种是代数解法, 其先构造出产生湮灭算符, 及数算符, 再结合数算符的正定性以及产生湮灭算符作用到态上的特性直接给出本征值谱, 计算上更加简洁. 总的来说, 谐振子是相当重要和基本的一个模型, 在固体物理中, 将会由谐振子导出声子的概念.</p><p>&emsp;&emsp;第三部分是氢原子. 不该在介绍氢原子之前, 会先讨论角动量算符的一般理论, 主要是先从对易关系, 形式上定义出角动量算符, 并研究其本征值和本征函数. 对这些通用性质的研究, 将会很大的简化氢原子以及自旋、角动量耦合等诸多问题的讨论. (下面这段表述暂时不十分有把握, 故先写在括号里, 仅供参考: 如果从群论来考虑, 若系统具有球对称性, 其本征态是角动量算符的本征态. 这是由于球对称系统对应的对称变换群为 SO(3) 群, 而 SO(3) 群的生成元正式一种角动量算符. 换而言之, 角动量算符可能是与系统球对称性相联系的).</p><p>&emsp;&emsp;第四部分是关于自旋及角动量耦合理论的内容. 自旋部分, 重要的是泡利算符的引入 (群论中似乎也反复提到自旋是与某种对称性相联系的? 这部分还不太清楚). 值得注意的是, 自旋相关的内容在量子计算中是很重要的. 角动量耦合理论主要研究如何取合适的量子数来描述系统整体, 其中涉及到不同量子数对应的各个子空间如何进行联系的问题.</p><p>&emsp;&emsp;第五部分是对有外加磁场时的系统的研究. 主要的内容包括正常及反常塞曼效应, 以及朗道能级的介绍. 其中朗道能级在固体物理中也有涉及.</p><p>&emsp;&emsp;第五部分是关于微扰论的介绍, 主要分为非简并微扰和简并微扰. 微扰是十分重要的思想, 如固体物理中的紧束缚模型和近自由电子模型中均用到了微扰的方法. 在量子力学的范畴, 主要的简并微扰的两个例子是耦合谐振子 (其实也可以做严格解), 以及氢原子的 Stake 效应.</p>]]></content>
    
    
    <categories>
      
      <category>PHYS Quantum Theory</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHYS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>流形的基本概念</title>
    <link href="/PHYS_general_relativity/2021-05-31_basic_conception_of_manifold/"/>
    <url>/PHYS_general_relativity/2021-05-31_basic_conception_of_manifold/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要介绍了流形及流形间映射的基本定义. 该文章为 2020 年 5 月 8 日为理论所面试做准备期间所写, 首发于<a href="https://zhuanlan.zhihu.com/p/139082693">知乎</a>, </p></blockquote><span id="more"></span><h2 id="原-序论"><a href="#原-序论" class="headerlink" title="(原) 序论"></a>(原) 序论</h2><blockquote><p>本来是在看《物理学中的群论》中的第四章的, 奈何实在看不懂里面对李群的介绍, 于是开始看梁灿彬的《微分几何入门与广义相对论》中册的附录中关于李群的部分. 不得不说, 有微分几何基础的话看这部分相当的舒畅. 看的过程中顺带复习了一些关于微分几何的基本概念.</p><p>这篇文章对应《微分几何入门与广义相对论》第 2.1 节的内容.</p></blockquote><p><img src="./2.1_basic_conception_about_manifold.png" alt="outline"></p><h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1 基本概念"></a>1 基本概念</h2><p>&emsp;&emsp;首先给出流形的定义:</p><ul><li><u><strong>微分流形:</strong></u><br>对于拓扑空间 $M$, 若其有开覆盖 $\left\{ O_\alpha \right\}$ (即 $M = \bigcap_{\alpha} O_\alpha$) 满足下列条件, 则可称为 $n$ 维微分流形, 或简称 $n$ 维流形:<ol><li>$\forall\ O_\alpha$, $\exists$ 拓扑同胚映射 $\psi_\alpha: O_\alpha \to V_\alpha$ ($V_\alpha$ 是用通常拓扑衡量的开子集);</li><li>若 $O_\alpha \cap O_\beta$, 则复合映射 $\psi_\beta \circ \psi_\alpha^{-1}$ 是 $C^{\infty}$ 光滑的;</li></ol></li></ul><p>粗略地说, $n$ 维流形是带有微分结构的拓扑空间, 其局部地像 $\mathbb{R}^n$ (体现在可以局部地构建该集合与 $\mathbb{R}^n$ 的同胚关系), 但整体不一定像 $\mathbb{R}^n$. 具体而言, 定义的第一条表明, 微分流形是由一片一片的开集构成的, 每一片 $n$ 维微分流形上的开集, 都可通过某种映射, 使得其与 $R^{n}$ 上的某个开集同胚. 而定义的第二条表明, 如果 $M$ 的两个开集有交, 则可诱导出一个 $R^{n}$ 的某个开区域到 $R^{n}$ 的另一开区域的映射, 这个映射按照通常在数学分析中的定义是 $C^{\infty}$ 的.</p><h2 id="2-坐标系与图"><a href="#2-坐标系与图" class="headerlink" title="2 坐标系与图"></a>2 坐标系与图</h2><p>&emsp;&emsp;由于流形上每一片开集都可和 $\mathbb{R}^n$ 上的某个开区域对应, 因此可以借助这个开区域定义坐标系:</p><ul><li><u><strong>流形上的坐标系:</strong></u><br>设映射 $\psi_\alpha: O_\alpha \to \psi_\alpha[O_\alpha] \subset \mathbb{R}^n$ 是流形上的某个开集 $O_\alpha$ 到 $\mathbb{R}^n$ 的某个开区域的拓扑同胚映射, 则任一 $p \in O_\alpha$ 自然地通过这个映射与 $n$ 个数对应, 称这 $n$ 个数是点 $p$ 对应的坐标, 称 $(O_\alpha, \psi_\alpha)$ 构成一个坐标系.</li></ul><p>坐标系的取法往往不是唯一的. 试想流形上有交集的两个开区域 $O_\alpha$ 与 $O_\beta$, 其分别对应映射 $\psi_\alpha$ 与 $\psi_\beta$. 则在交集 $O_\alpha \cap O_\beta$ 中, 即可使用坐标系 $(O_\alpha, \psi_\alpha$, 也可使用坐标系 $(O_\beta, \psi_\beta)$. 于是同一个点对应两个 $\mathbb{R}^{n}$ 上的点, 由此可诱导出联系则两个点的一个的映射 (或者说 $n$ 个 $n$ 元函数):</p><script type="math/tex; mode=display">    x'^{\mu} = \phi^{\mu}(x^{\nu}),\ \mu, \nu = 1, \dots , n</script><p>称这个映射 (或者说 $n$ 个 $n$ 元函数) 为一个 <strong>坐标变换</strong>. 此外, 通常也将对应的 $n$ 个数 $\left\{ x^{\mu} \right\}$ 称为坐标系, 以及将坐标变换简记为:</p><script type="math/tex; mode=display">    x'^{\mu} = x'^{\mu}(x^{\nu}),\ \mu, \nu = 1, \dots , n</script><p>&emsp;&emsp;接下来介绍数学上另一种看待坐标系的观点:</p><ul><li><u><strong>图:</strong></u><br>坐标系 $(O_\alpha, \psi_\alpha)$ 在数学上又叫 <strong>图</strong>. 若图中的映射满足微分流形定义中对映射的要求, 则将这样的图的集合 $\left\{ (O_\alpha, \psi_\alpha) \right\}$ 称为 <strong>图册</strong>. 其中定义第二个要求又叫相容性条件, 因此图册中任意两个图都是相容的.</li></ul><p>对于同一个微分流形, 可以两个图册并不一定是相容的, 此时说两个图册代表不同的 <strong>微分结构</strong>.</p><h2 id="3-流形间的映射"><a href="#3-流形间的映射" class="headerlink" title="3 流形间的映射"></a>3 流形间的映射</h2><p>&emsp;&emsp;流形与拓扑不同的是, 除了具有拓扑结构以外, 还具有微分结构 (可以视为通过 $\mathbb{R}^n$ 上的函数来间接体现的). 对于流形间的映射, 除了一般的连续性以外, 还可谈论高阶的连续性. 具体定义如下:</p><ul><li><u><strong>流形间映射的连续性:</strong></u><br>  设 $f: M \to M’$ 是流形间的映射, 则可诱导出一个多元函数 $\psi’_\beta \circ f \circ \psi_\alpha^{-1}$ ($\psi’_\beta$ 与 $\psi’_\alpha$ 分别是 $M’$ 与 $M$ 上的坐标系). 若对于任意 $p \in M$, 该多元函数是 $C^{r}$ 的, 则称映射 $f$ 是 $C^{r}$ 类映射.</li></ul><p>&emsp;&emsp;类似与之前定义的拓扑同胚, 这里可以定义微分同胚, 反映两个流形微分结构的一致性:</p><ul><li><u><strong>微分同胚:</strong></u><br>  若存在 $f: M \to M’$, 满足:<ol><li>$f$ 是一一到上的;</li><li>$f$ 及 $f^{-1}$ 是 $C^{\infty}$ 的;<br>则称 $f$ 是 $M$ 到 $M’$ 的微分同胚映射, 且称 $M$ 与 $M’$ 互为微分同胚.</li></ol></li></ul><p>流形间的映射 $f: M \to M’$ 有一个特例, 即 $M’$ 为 $\mathbb{R}$ 的情形, 此时流形 $M$ 的每一点都对应着一个实数, 由此可引出第一个关于 “场” 的概念:</p><ul><li><u><strong>流形上的标量场:</strong></u><br>  称映射 $f: M \to \mathbb{R}$ 为流形 $M$ 上的 <strong>函数</strong>, 或 $M$ 上的 <strong>标量场</strong>. 若 $f$ 为 $C^{\infty}$ 的, 则称该标量场是 <strong>光滑的</strong>. 将 $M$ 上全体光滑标量场的集合记为 $\mathscr{F}_{M}$ 或 $\mathscr{F}$.</li></ul>]]></content>
    
    
    <categories>
      
      <category>PHYS General Relativity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHYS</tag>
      
      <tag>MATH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>球面坐标系中的微分几何及其应用</title>
    <link href="/PHYS_mathematical_physics/2020-12-05_DG_in_spherical_coordinate/"/>
    <url>/PHYS_mathematical_physics/2020-12-05_DG_in_spherical_coordinate/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文于去年 (2020) 写于高量期末考试结束后, 主要受当时作数物助教时球坐标系 Laplace 算符及高量考试涉及的径向角动量算符的启发所写, 首发于<a href="https://zhuanlan.zhihu.com/p/331773455">知乎</a>.</p></blockquote><span id="more"></span><p><img src="/fig/cover/cover.png" alt=""></p><blockquote><p>前几个月一直忙着保研的事情, 好像已经好几个月没写成形一些的 note 了… 算一算上一次在知乎上传 note 好像是上学期期末? 话说这学期也快到期末了, 没想到鸽一下一个学期就没了 <code>┑(￣Д ￣)┍</code>.</p><p>今后上传的笔记在相比以往会有一些调整. 最显注的可能是封面选择. 主要是考虑到文风似乎过于严肃了一些, 所以向其它一些文章作者学习一下, 封面干脆换成可爱的二次元妹子, 希望能吸引更多的 (lsp) 读者 <code>(⊙ω⊙)</code> (虽然我有点怀疑是不是因为前面的大半年压力太大, 导致现在整个人变宅了一点…). 其二是之前上传笔记的动机是为了复习四大力学以应对理论所的面试, 但后来我将专栏名称改成了 “冬季银河的理论物理笔记”, 因此只要是和物理相关的一些内容应该都会上传. 其三是之前的笔记内容上更专一一些, 基本上每一篇都是来自某本教材的某一节或某几节, 今后的笔记应该会以平时碰到的问题为主干来组织内容, 因而可能会混杂好几门教材或好几门课的内容的情况 (比如这次的就混杂了微分几何, 数学物理方法, 量子力学三门课程的内容. 之所以想到计算球面坐标系的 Christoff 符号, 也是因为看宇宙学的时候计算了 FRW 度规下的 Christoff 符号, 打算再找个算 Christoff 符号的例子练习一下.). 最近一段时间主要是在看场论和宇宙学, 之后可能这些方面的内容会多一点. 最后一点是笔记上传格式的变化, 之前的时候都是把 LaTeX 编译的 pdf 文件导出后拼接成一整张长图, 但现在看来不拼接可能阅读体验会好一些, 而且也便于有需要的读者将每页图片保存后重新整合为单独的 pdf 文件. 所以今后除了将多余的页边剪裁一下以外, 不再将图片进行拼接.</p><blockquote><p>写这篇文章的主要动机是前不久在写数理方法的作业的参考答案的时候, 刚好碰到了球坐标下 Laplace 算符的问题, 加之高量考试又有径向角动量算符的题目, 以及一直想算一个微分几何的具体算例, 所以就写了这篇 note.</p></blockquote><p>这次的封面是藤原大佬 (pid: 27517) 的画中我最喜欢的一张, 算是入坑作吧 (最早好像在贴吧时代就看见过了).</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>&emsp;&emsp;正文部分一开始先计算了球面坐标系下的度规张量, 并由此计算了相应的 Christoff 符号. 随后利用相应的计算结果, 讨论了 Laplace 算符和角动量算符在球面坐标系下的形式. 其中在 Laplace 算符的部分, 简单讨论了分离变量的问题. 在角动量算符的部分, 简单阐述了协变导数在动量及角动量算符中的必要性, 随后分别利用抽象指标和具体指标进行了计算, 并定义了径向动量模方算符, 以及能过对比证明了了角向 Laplace 算符与角动量算符只相差一个常系数. 文章的最后, 还从径向动量算符的定义出发, 证明了该算符的平方正是之前所定义的径向动量模方算符.</p><p>&emsp;&emsp;附录部分是笔记的手稿, 内有具体的计算过程. 用英文主要是因为英文写起来比较省力 <code>_(:з」∠)_</code>. (注意手稿的每一页是从左往右的, 水印的位置是每一页的右上角)</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><img src="figure/main_body-1.jpg" alt=""><br><img src="figure/main_body-2.jpg" alt=""><br><img src="figure/main_body-3.jpg" alt=""><br><img src="figure/main_body-4.jpg" alt=""><br><img src="figure/main_body-5.jpg" alt=""><br><img src="figure/main_body-6.jpg" alt=""><br><img src="figure/main_body-7.jpg" alt=""></p><h2 id="附录-手稿"><a href="#附录-手稿" class="headerlink" title="附录 (手稿)"></a>附录 (手稿)</h2><p><img src="figure/handwriting_1.jpg" alt=""><br><img src="figure/handwriting_2.jpg" alt=""><br><img src="figure/handwriting_3.jpg" alt=""><br><img src="figure/handwriting_4.jpg" alt=""><br><img src="figure/handwriting_5.jpg" alt=""><br><img src="figure/handwriting_6.jpg" alt=""><br><img src="figure/handwriting_7.jpg" alt=""><br><img src="figure/handwriting_8.jpg" alt=""><br><img src="figure/handwriting_9.jpg" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>PHYS Mathematical Physics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHYS</tag>
      
      <tag>MATH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C 语言基本语法复习</title>
    <link href="/CS_program_language/2020-05-30-C_language_review/"/>
    <url>/CS_program_language/2020-05-30-C_language_review/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文于去年 C 语言期末复习期间所写, 于 6 月 19 日首发于<a href="https://zhuanlan.zhihu.com/p/149419779">知乎</a>, 主要回顾了 C 语言的基本语法.</p></blockquote><span id="more"></span><h2 id="1-C-程序设计初步"><a href="#1-C-程序设计初步" class="headerlink" title="1 C 程序设计初步"></a>1 C 程序设计初步</h2><h3 id="C-程序结构和处理过程"><a href="#C-程序结构和处理过程" class="headerlink" title="C 程序结构和处理过程"></a>C 程序结构和处理过程</h3><p>&emsp;&emsp;基本程序结构包括预编译语句, 主函数, 自定义函数等.</p><p>&emsp;&emsp;基本处理过程可以分为源代码编写, 程序的编译, 程序的连接, 运行与调试这几个过程.</p><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>&emsp;&emsp;常用的有:</p><ol><li>整型: <code>int</code>, <code>long</code></li><li>实型: <code>float</code>, <code>double</code></li><li>字符型: <code>char</code></li></ol><h3 id="标准输入-输出"><a href="#标准输入-输出" class="headerlink" title="标准输入/输出"></a>标准输入/输出</h3><ol><li>可以通过 <code>scanf()</code> 与 <code>printf()</code> 来输入及输出数据;</li><li>对于字符, 还可使用 <code>getchar()</code> 与 <code>putchar()</code> 来输入及输出数据;</li><li>对于字符串, 还可以使用 <code>gets()</code> 与 <code>puts()</code> 来输入及输出字符;</li></ol><h2 id="2-预编译处理及元编程基础"><a href="#2-预编译处理及元编程基础" class="headerlink" title="2 预编译处理及元编程基础"></a>2 预编译处理及元编程基础</h2><p>&emsp;&emsp;预处理本质上可视为字符串的替换, 亦即可以等效认为编译时先将源代码依据预处理命令进行一定的字符替换 (不妨称为<strong>宏展开</strong>), 再将经过字符替换后的源代码进行编译.</p><h3 id="宏定义预处理命令"><a href="#宏定义预处理命令" class="headerlink" title="宏定义预处理命令"></a>宏定义预处理命令</h3><h4 id="不带参数的宏"><a href="#不带参数的宏" class="headerlink" title="不带参数的宏"></a>不带参数的宏</h4><p>&emsp;&emsp;宏定义的一般语法为:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> <span class="hljs-meta-string">&lt;str1&gt;</span> <span class="hljs-meta-string">&lt;str2&gt;</span></span><br></code></pre></div></td></tr></table></figure><p>预处理时将所有处于变量位置的字符 <code>&lt;str1&gt;</code> 替换为 <code>&lt;str2&gt;</code>.</p><p>&emsp;&emsp;初学者常犯的一个错误是边替换边计算. 例如对于:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> M N+2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NM 2*M</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = MN;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x = %d\n&quot;</span>, x);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>正确的理解是 <code>MN</code> -&gt; <code>2*M</code>, 随后进行 <code>M</code> -&gt; <code>N+2</code>, 再进行 <code>N</code> -&gt; <code>2</code>, 因此输出为 6. (不能理解为先将 <code>M</code> 与 <code>N</code> 进行替换再相乘!)</p><h4 id="带参数的宏"><a href="#带参数的宏" class="headerlink" title="带参数的宏"></a>带参数的宏</h4><p>&emsp;&emsp;带参数宏的基本语法为:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> <span class="hljs-meta-string">&lt;str1&gt;</span>(<span class="hljs-meta-string">&lt;parameter&gt;</span>) <span class="hljs-meta-string">&lt;str2&gt;</span></span><br></code></pre></div></td></tr></table></figure><p>如若存在带参宏定定义:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI 3.14</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> S(r) PI*r*r</span><br></code></pre></div></td></tr></table></figure><p>则后续程序中若存在 <code>S(a)</code> 则将展开为 <code>PI*a*a</code>, 若存在 <code>S(a+b)</code> 则将展开为 <code>PI*a+b*a+b</code>. 初学者容易误将 <code>a+b</code> 视为带括号的, 从而认为后者的展开是 <code>PI*(a+b)*(a+b)</code>, 但这是不正确的 (要得到这样的效果应该输入 <code>SP\((a+b))</code>).</p><h3 id="文件包含预处理命令"><a href="#文件包含预处理命令" class="headerlink" title="文件包含预处理命令"></a>文件包含预处理命令</h3><p>&emsp;&emsp;以下两种方法均可以实现文件包含:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;file&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;file&quot;</span></span><br></code></pre></div></td></tr></table></figure><p>差别在于:</p><ol><li>尖括号: 编译系统按照系统设定的标准目录搜索被包含的文件</li><li>双引号: 按照文件全名重点指定路径搜索; 若未找到文件, 再按相对目录搜索; 若仍未找到文件, 最后搜索其它目录.</li></ol><h3 id="条件编译预处理命令"><a href="#条件编译预处理命令" class="headerlink" title="条件编译预处理命令"></a>条件编译预处理命令</h3><p>&emsp;&emsp;条件包含预处理的基本语法为:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> <span class="hljs-meta-string">&lt;cond_1&gt;</span></span><br>    &lt;code_1&gt;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">elif</span> <span class="hljs-meta-string">&lt;cond_2&gt;</span></span><br>    &lt;code_2&gt;<br>...<br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br>    &lt;default_code&gt;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></div></td></tr></table></figure><p>条件编译语句会根据条件 <code>&lt;cond&gt;</code> 是否成立来选择编译时实际采用哪种代码.</p><p>&emsp;&emsp;另一种方便的条件编译是判断变量是否定义:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> <span class="hljs-meta-string">&lt;symbol&gt;</span></span><br>    &lt;code_1&gt;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br>    &lt;code_2&gt;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></div></td></tr></table></figure><p>这里 <code>&lt;symbol&gt;</code> 是一个标识符. 但标识符已经被定义时采用 <code>&lt;code_1&gt;</code> 进行编译, 否则采用 <code>&lt;code_2&gt;</code>.</p><h2 id="3-基本运算及控制流"><a href="#3-基本运算及控制流" class="headerlink" title="3 基本运算及控制流"></a>3 基本运算及控制流</h2><h3 id="基本运算符和优先级"><a href="#基本运算符和优先级" class="headerlink" title="基本运算符和优先级"></a>基本运算符和优先级</h3><p>&emsp;&emsp;具体的可以查表. 粗略来说 (并未列举所有运算符), 优先级顺序为 (所有行中, 越向上优先级越高; 同一行中, 优先级相同):</p><ol><li>特殊运算符 (括号, 数组索引, 结构体的指向运算符): <code>()</code>, <code>[]</code>, <code>-&gt;</code></li><li>逻辑非运算符, 自增运算, 负号运算符: <code>!</code>, <code>++</code>, <code>--</code>, <code>-</code></li><li>算数运算符: <ol><li><code>*</code>, <code>/</code>, <code>%</code></li><li><code>+</code>, <code>-</code></li></ol></li><li>关系运算符: <ol><li><code>&lt;, &lt;=, &gt;, &gt;=</code></li><li><code>==</code>, <code>!=</code></li></ol></li><li>逻辑运算符:<ol><li><code>&amp;&amp;</code></li><li><code>||</code></li></ol></li><li>赋值运算符: <code>=</code>, <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code></li></ol><p><strong>Notation :</strong></p><ol><li>自增/减运算符有前缀和后缀两种模式, 其只能与变量结合. 对于前缀模式 <code>++a</code>, 其返回的是变化后的值; 对于后缀模式 <code>a--</code>, 其返回的是变化前的值.</li></ol><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><h4 id="if-型"><a href="#if-型" class="headerlink" title="if 型"></a><code>if</code> 型</h4><p>&emsp;&emsp;<code>if</code> 型分支的基本语法为:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (&lt;cond_1&gt;)<br>    &lt;sentence_1&gt;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (&lt;cond_2&gt;)<br>    &lt;sentence_2&gt;<br>...<br><span class="hljs-keyword">else</span><br>    &lt;sentence&gt;<br></code></pre></div></td></tr></table></figure><p><strong>Notation :</strong></p><ol><li><code>if</code> 后的判断条件要加括号;</li><li>语法上考虑, <code>&lt;sentence&gt;</code> 只能对应单条语句, 因此如果需要进行多个过程, 需要使用复合语句 (亦即将语句段用大括号 <code>&#123;&#125;</code>括起来);</li><li>可以使用 <code>break</code> 来跳出分支结构, 直接执行分支结构后面的源代码. 当有多层嵌套时, 仅仅跳出 <code>break</code> 所在层;</li></ol><h4 id="switch-型"><a href="#switch-型" class="headerlink" title="switch 型"></a><code>switch</code> 型</h4><p>&emsp;&emsp;<code>switch</code> 型通过值是否匹配来判断选择哪一个分支:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">switch</span> (&lt;var&gt;) &#123;<br>    <span class="hljs-keyword">case</span> &lt;expr_1&gt;:<br>        &lt;sentence_1&gt;;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> &lt;expr_2&gt;:<br>        &lt;sentence_2&gt;;<br>        <span class="hljs-keyword">break</span>;<br>...<br>    <span class="hljs-keyword">default</span>:<br>        &lt;sentence&gt;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里如果 <code>&lt;var&gt;</code> 的值与某一个 <code>&lt;sentence&gt;</code> 相等, 则执行该分支, 执行完成后继续向下走, 直到遇到 <code>break</code> 或右侧的大括号才跳出 <code>switch</code> 语句块.</p><p><strong>Notation :</strong></p><ol><li><code>switch</code> 后面的语句块要加上大括号;</li><li>各个分支 <code>case</code> 的条件不需要加加号, 但在 <code>&lt;expr&gt;</code> 后面应加上冒号;</li><li>每条 <code>case</code> 对应的分支语句可以是多条语句, 不需要使用花括号将各个语句括起来;</li><li><code>default</code> 分支不是必要的, 正如其名一样, 意义是提供一个默认值. 具体来说, 其作用是只要程序运行到 <code>default</code>, 则该分支必定执行;</li><li>上面代码中的 <code>break</code> 并不是必要的, 其作用是确保执行完某条分支后不再判断后面的分支. 若不使用 <code>break</code>, 可能在执行了第 $i$ 条分支以后, 还执行 <code>default</code> 的内容, 因此一般建议加上 <code>default</code>;</li></ol><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><h4 id="while-型"><a href="#while-型" class="headerlink" title="while 型"></a><code>while</code> 型</h4><p>&emsp;&emsp;<code>while</code> 型循环的基本结构是:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">while</span> (&lt;cond&gt;)<br>    &lt;sentence&gt;<br></code></pre></div></td></tr></table></figure><p>其作用是当条件 <code>cond</code> 为真时执行 <code>&lt;sentence&gt;</code> (第一次执行前要先进行判断), 直到条件为假则跳出循环.</p><p><strong>Notation :</strong></p><ol><li><code>&lt;sentence&gt;</code> 语法上规定为单条语句, 因此需要多个处理过程时应使用复合语句作为 <code>while</code> 的循环体;</li></ol><h4 id="do-while-型"><a href="#do-while-型" class="headerlink" title="do-while 型"></a><code>do-while</code> 型</h4><p>&emsp;&emsp;<code>do-while</code> 型循环的基本结构是:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">do</span><br>    &lt;sentence&gt;<br><span class="hljs-keyword">while</span>(&lt;cond&gt;);<br></code></pre></div></td></tr></table></figure><p>与 <code>while</code> 语句不同的是, 这里是先执行循环体再进行判断.</p><p><strong>Notation :</strong></p><ol><li>最后一行的 <code>while(&lt;cond&gt;);</code> 末尾处别忘了加分号 <code>;</code>;</li><li><code>sentence</code> 逻辑上是单条语句;</li></ol><h4 id="for-型"><a href="#for-型" class="headerlink" title="for 型"></a><code>for</code> 型</h4><p>&emsp;&emsp;<code>for</code> 型循环的基本结构是:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">for</span> (&lt;expr_1&gt;; &lt;expr_2&gt;; &lt;expr_3&gt;)<br>    &lt;sentence&gt;<br></code></pre></div></td></tr></table></figure><p>在循环开始前会先执行 <code>&lt;expr_1&gt;</code> (通常用来进行变量初始化), 使用判断条件 <code>expr_2</code> 进行判断. 若条件为真, 便执行循环体 <code>&lt;sentence&gt;</code>, 再执行 <code>&lt;expr_3&gt;</code> 完成一次循环.</p><p><strong>Notation :</strong></p><ol><li><code>&lt;sentence&gt;</code> 逻辑上是单条语句;</li></ol><h2 id="4-数组和字符串"><a href="#4-数组和字符串" class="headerlink" title="4 数组和字符串"></a>4 数组和字符串</h2><h3 id="数组的定义及元素引用"><a href="#数组的定义及元素引用" class="headerlink" title="数组的定义及元素引用"></a>数组的定义及元素引用</h3><h4 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h4><p>&emsp;&emsp;一维数组的定义方式为:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">&lt;type&gt; &lt;var_name&gt;[&lt;len&gt;];<br></code></pre></div></td></tr></table></figure><p>如:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">int</span> x[<span class="hljs-number">10</span>];<br></code></pre></div></td></tr></table></figure><p>定义了一个 1 维数组, 其含有 10 个元素, 每个元素为一个整数.</p><p>&emsp;&emsp;数组可在定义的同时进行初始化, 初始化的诸值放在花括号内, 用逗号分隔. 如:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">int</span> x[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;<br></code></pre></div></td></tr></table></figure><p>在初始化时也可不显式写出数组的长度. 下面的语句与上面的是等价的:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">int</span> x[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;<br></code></pre></div></td></tr></table></figure><p>如果后面的元素数目小于数组长度, 则相当于进行了部分的初始化, 如:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">double</span> x[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">4.0</span>, <span class="hljs-number">3.0</span>&#125;;<br></code></pre></div></td></tr></table></figure><p>此时数组的最后一个元素没有初始化. 根据情况的不同, 可能会进行自动初始化 (一般自动初始化会将其设为 0) 或保留内存中原有的值.</p><p>&emsp;&emsp;数组的索引可以通过中括号来进行, 注意索引是从 0 开始的, 如:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">int</span> x[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, x[<span class="hljs-number">0</span>]);<br></code></pre></div></td></tr></table></figure><p>输出结果将为 <code>1</code>.</p><p><strong>Notation :</strong></p><ol><li><p><code>sizeof</code> 作用与数组后得到的是数组所占存储区域的字节数, 而非数组长度. 对于代码:</p> <figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">int</span> x[<span class="hljs-number">10</span>];<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lu\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(x));<br></code></pre></div></td></tr></table></figure><p> 其得到的结果是 <code>40</code>, 这是由于每个整数占用了 4 个字节, 而一共有 10 个整数.</p></li></ol><h4 id="二维及多维数组"><a href="#二维及多维数组" class="headerlink" title="二维及多维数组"></a>二维及多维数组</h4><p>&emsp;&emsp;这里仅介绍二维数组, 多维数组的情况同理.</p><p>&emsp;&emsp;二维数组的定义与一维数组类似, 差别在于要指定两个长度:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">&lt;type&gt; &lt;var_name&gt;[&lt;len_1&gt;][&lt;len_2&gt;];<br></code></pre></div></td></tr></table></figure><p>二维数组在内存中排列时是从右往左线性排列的, 亦即先将第二指标填满. 若数组的原型为:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">int</span> x[<span class="hljs-number">10</span>][<span class="hljs-number">4</span>]<br></code></pre></div></td></tr></table></figure><p>则 <code>x[3][3]</code> 是其第 $3 \times 4 + 3 = 15$ 个元素.</p><p>&emsp;&emsp;与一维数组类似, 可以通过大括号对数组进行初始化:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">int</span> a[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = &#123;&#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>&#125;&#125;;<br></code></pre></div></td></tr></table></figure><p>也可以仅指定第二维的长度:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">int</span> a[][<span class="hljs-number">3</span>] = &#123;&#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>&#125;&#125;;<br></code></pre></div></td></tr></table></figure><p>甚至连中间的大括号都可以省略:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">int</span> a[][<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>&#125;;<br></code></pre></div></td></tr></table></figure><p>&emsp;&emsp;在进行索引时与一维数组类似, 都是形如 <code>a[4][3]</code>.</p><h3 id="字符串与数组的关系"><a href="#字符串与数组的关系" class="headerlink" title="字符串与数组的关系"></a>字符串与数组的关系</h3><p>&emsp;&emsp;字符串本质上是一个以字符数组, 特别地, 其始终以 <code>\0</code> 结尾, 因此实际的字符数是数组长度减去 1. 以下 <code>a</code> 与 <code>b</code> 是等价的:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">char</span> a[] = <span class="hljs-string">&quot;Hello&quot;</span>;<br><span class="hljs-keyword">char</span> b[] = &#123;<span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;\0&#x27;</span>&#125;;<br></code></pre></div></td></tr></table></figure><h2 id="5-指针"><a href="#5-指针" class="headerlink" title="5 指针"></a>5 指针</h2><h3 id="指针及变量地址"><a href="#指针及变量地址" class="headerlink" title="指针及变量地址"></a>指针及变量地址</h3><p>&emsp;&emsp;指针与普通变量定义时的区别是多了一个星号 <code>*</code>:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">&lt;type&gt; * &lt;var&gt;;<br></code></pre></div></td></tr></table></figure><p>如:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">char</span> *p;<br></code></pre></div></td></tr></table></figure><p>定义了一个 <code>char</code> 类型的指针.</p><p>&emsp;&emsp;可以用变量的地址给指针赋值, 与号 <code>&amp;</code> 在 C 语言中是取地址符, 赋值时保持指针变量与取地址变量类型的一致性. 如:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">char</span> x = <span class="hljs-string">&#x27;t&#x27;</span>;<br><span class="hljs-keyword">char</span> *p = &amp;x;<br></code></pre></div></td></tr></table></figure><p>对指针作用星号 <code>*</code> 后将会得到指针所指向的数据. 对上面的程序, 后面的源代码中的 <code>*p</code> 与 <code>x</code> 是等价的.</p><h3 id="指针与数组的关系"><a href="#指针与数组的关系" class="headerlink" title="指针与数组的关系"></a>指针与数组的关系</h3><p>&emsp;&emsp;在引入指针及数据的地址的概念后, 可以对数组的字面意做全新的理解, 下面将分一维与二维 (多维) 数组进行讨论. 再讨论的随后, 还将在数组的基础上介绍指针的运算的概念.</p><h4 id="一维数组-1"><a href="#一维数组-1" class="headerlink" title="一维数组"></a>一维数组</h4><p>&emsp;&emsp;对一维数组 <code>a</code>, 数组名本身的字面意其实是数组的起始地址, 如:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">char</span> x[] = <span class="hljs-string">&quot;test&quot;</span>;<br><span class="hljs-keyword">char</span> *p = x;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>, *p);<br></code></pre></div></td></tr></table></figure><p>将返回 <code>t</code>.</p><h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h4><p>&emsp;&emsp;对二维数组 <code>a</code>, 以下写法均表示首元素 <code>a[0][0]</code> 的起始地址:</p><ol><li>首元素加取地址符: <code>&amp;a[0][0]</code>;</li><li>第一个指标的 0 号元素: <code>a[0]</code>;</li><li>数组名取指针运算: <code>*a</code>;</li></ol><h4 id="指针的运算"><a href="#指针的运算" class="headerlink" title="指针的运算"></a>指针的运算</h4><p>&emsp;&emsp;设 <code>p</code> 是一个指针变量, 则可以将其加上一个整数, 来代表将指针进行移动. 讨论一个不指向数组 (确切的来说应该是指向数组特定元素) 的指针的移动意义不大, 所以这里是在数组的基础上讨论的.</p><p>&emsp;&emsp;为了简洁起见, 这里直接通过等价性的举例来理解指针的运算. 先考虑最简单的一维数组的情景. 若有 (这里用到了一维数组的字面量代表其首地址的特性):</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">char</span> x[] = <span class="hljs-string">&quot;test&quot;</span>;<br><span class="hljs-keyword">char</span> *p = x;<br></code></pre></div></td></tr></table></figure><p>则后面的代码中使用 <code>*p</code> 时, 其实相当于使用 <code>x[0]</code>; 使用 <code>*(p + 1)</code> 时, 相当于使用 <code>x[1]</code>. 特别地, 若指向的不是数组的首地址, 则指针减去一个整数是有意义的:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">char</span> x[] = <span class="hljs-string">&quot;test&quot;</span>;<br><span class="hljs-keyword">char</span> *p = &amp;x[<span class="hljs-number">2</span>];<br></code></pre></div></td></tr></table></figure><p>后面的代码中使用 <code>*(p - 1)</code> 时相当于使用的是 <code>x[1]</code>.</p><p>&emsp;&emsp;下面再看多维数组. 可知, 多维数组在内存中的排列是线性的, 因此指针运算后先是在线性地址上进行分析, 随后再转化到多维数组的各个维数上去. 具体而言, 若:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">char</span> x[<span class="hljs-number">10</span>][<span class="hljs-number">10</span>];<br><span class="hljs-keyword">char</span> *p = x[];<br></code></pre></div></td></tr></table></figure><p>则 <code>*(p + 10*3 + 2)</code> 与 <code>x[3][2]</code> 代表的是同一个元素.</p><h3 id="指针数组与命令行参数"><a href="#指针数组与命令行参数" class="headerlink" title="指针数组与命令行参数"></a>指针数组与命令行参数</h3><p>&emsp;&emsp;为了使编译的二进制文件可以像正常的命令行工具一样接受参数, 需要使主函数定义两个参数, 一般的形式为:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span>;<br></code></pre></div></td></tr></table></figure><p>第一个参数接受的是输入参数的个数; 后面是一个指针数组 (亦即 <code>argv</code> 的每一个元素都是一个指针), 其指向的是输入的参数 (输入的参数是一个个的字符串).</p><h2 id="6-函数"><a href="#6-函数" class="headerlink" title="6 函数"></a>6 函数</h2><h3 id="函数的定义和调用"><a href="#函数的定义和调用" class="headerlink" title="函数的定义和调用"></a>函数的定义和调用</h3><p>&emsp;&emsp;函数定义的基本要素有: 函数的返回类型, 函数的名称, 函数的参数及参数类型, 函数的执行语句. 定义函数的语法为:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">&lt;type&gt; &lt;fun_name&gt;(&lt;tp_1&gt; &lt;var_1&gt;, &lt;tp_2&gt; &lt;var_2&gt;) &#123;<br>    &lt;sentence&gt;;<br>    <span class="hljs-keyword">return</span> &lt;expr&gt;;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>其中 <code>return</code> 关键字用来返回数据, 但函数类型为 <code>void</code> 时则无需 <code>return</code>.</p><p>&emsp;&emsp;在调用函数前需要进行声明, 其下面两种声明方式均可:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">&lt;type&gt; &lt;fun_name&gt;(&lt;tp_1&gt; &lt;var_1&gt;, &lt;tp_2&gt; &lt;var_2&gt;)<br>&lt;type&gt; &lt;fun_name&gt;(&lt;tp_1&gt;, &lt;tp_2&gt;)<br></code></pre></div></td></tr></table></figure><p>亦即声明时可以不指定形参的符号, 而只指定其类型. 特别地, 若函数定义的程序段放在主函数之前, 则无需进行声明即可在主函数中进行调用.</p><p>&emsp;&emsp;应注意, 函数参数传递的默认方式是值传递. 因此若想使用传入的变量本身 (常用于对传入变量进行操纵的场合), 则应当将指针作为形参, 传入时也应传入变量的地址.</p><h3 id="变量的生存期与作用域"><a href="#变量的生存期与作用域" class="headerlink" title="变量的生存期与作用域"></a>变量的生存期与作用域</h3><p>&emsp;&emsp;在这里并不打算具体讲解关于变量的生存期与作用域的具体细节, 而只给出一些关键的点 (部分叙述可能不那么严谨).</p><p>&emsp;&emsp;粗略来说, 作为生存期是指变量在程序运行过程中存在的时间; 作用域则是一个变量在源程序中的有效范围. 对于生存期及作用域, 值得关注的点有:</p><ol><li>定义在主函数外 (包括以及任何函数定义以外) 的变量称为全局变量, 其可在整个程序中调用;</li><li>定义在主函数以内的变量为局部变量, 若有全局变量与之同名, 则调用时优先使用局部变量, 这可称为 “就近原则”;</li><li>函数中的变量一般是临时变量, 仅在函数调用时存在. 但变量定义前加上关键字 <code>static</code> 则可将其生存期拓展到整个程序运行过程中, 但作用域不变;</li><li>若有全局变量定义在源文件靠后位置, 可在其前面使用 <code>extern</code> 关键字拓展其作用域, 使之可以在 <code>extern</code> 声明后的源代码范围内使用;</li></ol><h3 id="使用指向函数的指针"><a href="#使用指向函数的指针" class="headerlink" title="使用指向函数的指针"></a>使用指向函数的指针</h3><p>&emsp;&emsp;指向函数的指针的定义方式为:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">&lt;type&gt; (*&lt;pointer_name&gt;)(&lt;tp&gt; &lt;var&gt;);<br></code></pre></div></td></tr></table></figure><p>如:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">double</span> (*p)(<span class="hljs-keyword">double</span> x)<br></code></pre></div></td></tr></table></figure><p>定义了一个指向返回值为 <code>double</code>, 输入值为一个 <code>double</code> 的函数的指针. 设有函数定义:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> x*<span class="hljs-number">2.0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>则函数头本身就表示了函数的地址, 于是可以用其对指针赋值 (形如 <code>p = f</code>). 调用时, <code>(*p)</code> 等价于  <code>f</code>. 亦即若 <code>f</code> 按照上面的代码段定义, 则 <code>(*p)(3.0)</code> 返回的结果为 <code>6.0</code> (已省略输出格式的控制语句).</p><h2 id="7-结构体和联合体"><a href="#7-结构体和联合体" class="headerlink" title="7 结构体和联合体"></a>7 结构体和联合体</h2><h3 id="结构体的定义及别名"><a href="#结构体的定义及别名" class="headerlink" title="结构体的定义及别名"></a>结构体的定义及别名</h3><p>&emsp;&emsp;结构体的定义方法是:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> &lt;</span>struct_name&gt; &#123;<br>    &lt;type_1&gt; &lt;var_1&gt;;<br>    &lt;type_2&gt; &lt;var_2&gt;;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>定义好后的结构体可以像通常的类型关键字一样用来定义变量.<br>&emsp;&emsp;另一方面, 也可直接定义结构体变量, 亦即:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span>  &#123;</span><br>    &lt;type_1&gt; &lt;var_1&gt;;<br>    &lt;type_2&gt; &lt;var_2&gt;;<br>&#125; &lt;var&gt;;<br></code></pre></div></td></tr></table></figure><p>&emsp;&emsp;使用 <code>typeof</code> 关键字可以给结构体定一个别名:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">typeof &lt;structure&gt; &lt;alias&gt;;<br></code></pre></div></td></tr></table></figure><h3 id="结构体的使用"><a href="#结构体的使用" class="headerlink" title="结构体的使用"></a>结构体的使用</h3><p>&emsp;&emsp;可以通过点运算符 <code>.</code> 来获取结构体的成员. 在进行初始化时, 可以使用类似于数组的方式, 亦即大括号将各量括起来, 并用逗号分隔.</p><p>&emsp;&emsp;值得注意的是, 结构体整体无法进行输入或输出, 只能分别输入或输出结构体的每个成员.</p><p>&emsp;&emsp;另一方面, 在结构体也可像通常的数据类型一样, 作为函数的形参或返回值.</p><h3 id="结构体数据类型和指针的关系"><a href="#结构体数据类型和指针的关系" class="headerlink" title="结构体数据类型和指针的关系"></a>结构体数据类型和指针的关系</h3><p>&emsp;&emsp;结构体类型变量的指针就是该结构体类型变量所占内存区域的起始地址, 定义方法与一般变量相同. 值得一提的是, 若想从结构体指针获取结构体成员, 需要先用 <code>*</code> 取结构体, 再用 <code>.</code> 取成员, 未免有些繁琐. 为此, C 语言提供了指向运算符 <code>-&gt;</code> 以简化这种操作. 设 <code>ptr</code> 是一个指向结构体的变量, <code>name</code> 为结构体的一个成员, 则 <code>(*ptr).name</code> 与 <code>ptr-&gt;name</code> 是等价的.</p><h3 id="联合体数据类型"><a href="#联合体数据类型" class="headerlink" title="联合体数据类型"></a>联合体数据类型</h3><p>&emsp;&emsp;联合体的定义方式和调用方式与结构体类似. 定义方式是:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">union</span> &lt;</span>struct_name&gt; &#123;<br>    &lt;type_1&gt; &lt;var_1&gt;;<br>    &lt;type_2&gt; &lt;var_2&gt;;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>调用时也可使用点操作符 <code>.</code> 或通过将地址赋给指针, 并使用 <code>-&gt;</code> 来访问成员.</p><p>&emsp;&emsp;结构体与联合体最大的不同在于, 其同时只能存在一个成员, 且占用内存为成员中占用内存最大者.</p><h2 id="8-C-程序文件处理基础"><a href="#8-C-程序文件处理基础" class="headerlink" title="8 C 程序文件处理基础"></a>8 C 程序文件处理基础</h2><h3 id="文件数据的读写"><a href="#文件数据的读写" class="headerlink" title="文件数据的读写"></a>文件数据的读写</h3><p>&emsp;&emsp;读取文件前受限需要打开文件, C 语言中采用函数 <code>fopen(&lt;file&gt;, &lt;mode&gt;)</code> 来实现, 其返回一个指向文件的指针. 如:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">FILE fpt;<br>fp = fopen(<span class="hljs-string">&quot;temp.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br></code></pre></div></td></tr></table></figure><p>后面的 <code>&quot;w&quot;</code> 是表示以写方式打开文件.</p><p>&emsp;&emsp;另一个关心的问题是文件是否已经到达文件尾部, 这可通过汇聚 <code>feof(&lt;file_pointer&gt;)</code> 来实现. 这里输入的是一个指向文件的指针, 若该文件已到文件尾部, 则返回 1, 否则返回 0.</p><p>&emsp;&emsp;文件读写函数包括:</p><ol><li><code>int fgetc(FILE *stream)</code>: 将单个字符独处文件, 执行成功则返回相应字符, 遇到文件结束符或出错时返回 EOF (-1);</li><li><code>int fputc(FILE *stream)</code>: 将单个字符读入文件;</li><li><code>char *fgets(char *s, int n , FILE *stream)</code>: <ol><li>从关联文件中最多读取 <code>n-1</code> 各字符, 添加上 <code>\0</code> 后放到 <code>*s</code> 指向的字符串中;</li><li>若读取到换行符, 则同样结束读取并添加 <code>\0</code>;</li><li>返回对象为 <code>s</code> 对象的首地址;</li></ol></li><li><code>char fputs(const char *s, FILE *stream)</code>: 将 <code>s</code> 所代表的字符串写入关联文件, 正常执行时返回写入文件中的字符个数;</li><li><code>int fscanf(FILE *stream, const char *format)</code>: 使用标准化输入读出文件数据;</li><li><code>int fprintf(FILE *stream, const char *format)</code>: 使用标准化输出写入文件数据;</li></ol><h3 id="随机存取文件处理基础"><a href="#随机存取文件处理基础" class="headerlink" title="随机存取文件处理基础"></a>随机存取文件处理基础</h3><p>&emsp;&emsp;随机存取文件处理的目的是将文件指针位置进行查询或移动. 相关函数有:</p><ol><li><code>void rewind(FILE *stream)</code>: 将文件内部指针指向文件开头;</li><li><code>int ,seek(FILE *stream, long offset, int origin)</code>: 将文件指针从起始位置 <code>origin</code> 移动字节量 <code>offset</code>. 其中 <code>origin</code> 一般取 <code>0</code>, <code>1</code>, <code>2</code>, 并有符号常量与之对应, 它们代表的含义为:<ol><li><code>SEEK_SET</code>: 0, 文件头;</li><li><code>SEEK_CUR</code>: 1, 内部记录指针当前位置;</li><li><code>SEEK_END</code>: 2, 文件尾;</li></ol></li><li><code>long ftell(FILE *stream)</code>: 获取文件内部读写指针当前位置;</li></ol>]]></content>
    
    
    <categories>
      
      <category>CS Program Language</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[READ] Chapter 7 Ordinary Differential Equations</title>
    <link href="/PHYS_mathematical_physics/BOOK_Arfken_2013/2021-05-29_chapter_7_ODE/"/>
    <url>/PHYS_mathematical_physics/BOOK_Arfken_2013/2021-05-29_chapter_7_ODE/</url>
    
    <content type="html"><![CDATA[<blockquote><p>This essay is a reading notes of <em>Mathematical Method of Physics (Arfken et al. 2013)</em>, <em>Chapter 1 A brief introduction</em> <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Arfken, George B., Hans J. Weber, and Frank E. Harris. 2013. Mathematical Methods for Physics. 7th ed. Elsevier. https://doi.org/10.1016/B978-0-12-384654-9.00030-X.">[1]</span></a></sup></p></blockquote><span id="more"></span><h2 id="7-5-Series-Solutions-—-Frobenius’s-Method"><a href="#7-5-Series-Solutions-—-Frobenius’s-Method" class="headerlink" title="7.5 Series Solutions — Frobenius’s Method"></a>7.5 Series Solutions — Frobenius’s Method</h2><ul><li>theory of linear second order ODE</li><li>get solution for inhomogeneous equation: specific solution + general solution for corresponding homogeneous ODE.</li></ul><h3 id="First-Example-—-Linear-Oscillator"><a href="#First-Example-—-Linear-Oscillator" class="headerlink" title="First Example — Linear Oscillator"></a>First Example — Linear Oscillator</h3><ul><li>Frobenius’s method series expanding</li><li>$j = 0$ case, <em>indicial equation</em>: equation coming from the coefficient of the lowest power of $x$</li><li>$j = 1$ case</li><li>$j \geq 1$ case: recurrence relation</li></ul><h3 id="Expansion-about-x-0"><a href="#Expansion-about-x-0" class="headerlink" title="Expansion about $x_0$"></a>Expansion about $x_0$</h3><ul><li>limitation of $x_0$: $x_0$ should not be chosen at an essential singularity or Frobenius’s method will probably fail</li></ul><h3 id="Symmetry-of-Solutions"><a href="#Symmetry-of-Solutions" class="headerlink" title="Symmetry of Solutions"></a>Symmetry of Solutions</h3><ul><li>result: if operator $\hat A(x)$ has a specific parity, meas $\hat A(x) = \pm \hat A(x)$, then solution of equation $\hat A(x) y(x) = 0$ will also has a specific parity</li><li>“Most interactions (beta decay is the big exception) are also even or odd,”</li></ul><h3 id="A-Second-Example-—-Bessel’s-Equation"><a href="#A-Second-Example-—-Bessel’s-Equation" class="headerlink" title="A Second Example — Bessel’s Equation"></a>A Second Example — Bessel’s Equation</h3><ul><li>$s = -n$ and $n$ is interger: a divergency problem raise in the case.</li></ul><h3 id="Fuchs’-Theorem"><a href="#Fuchs’-Theorem" class="headerlink" title="Fuchs’ Theorem"></a>Fuchs’ Theorem</h3><ul><li>Description: we can always obtain at lest one power-series solution at ordinary point or a regular singularity point.</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>Arfken, George B., Hans J. Weber, and Frank E. Harris. 2013. Mathematical Methods for Physics. 7th ed. Elsevier. <a href="https://doi.org/10.1016/B978-0-12-384654-9.00030-X">https://doi.org/10.1016/B978-0-12-384654-9.00030-X</a>.<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>PHYS Mathematical Physcis</category>
      
      <category>BOOK Arfken 2013</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHYS</tag>
      
      <tag>READ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TRICK] 取消 Inkscape 中填充图形的边缘线</title>
    <link href="/CS_GUI_software/Inkscape/2021-05-29_TRICK_cancel_stroke/"/>
    <url>/CS_GUI_software/Inkscape/2021-05-29_TRICK_cancel_stroke/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文介绍了 Inkscape 中取消填充图形的边缘线的方法.</p></blockquote><span id="more"></span><p>在 <code>Fill and Stroke (&lt;S-M-f&gt;)</code> -&gt; <code>Stroke paint</code> 中将边缘线取消即可, 如下图所示.</p><p><img src="cancel_paint.png" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>CS GUI Software</category>
      
      <category>Inkscape</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>TRICK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>版本管理工具 git 快速上手</title>
    <link href="/CS_linux/2021-05-29_git_quick_start/"/>
    <url>/CS_linux/2021-05-29_git_quick_start/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文收集了从 2020.01.28 到 2020.06.08 期间记录的 git 使用方法, 主体内容是 git 常用指令.</p></blockquote><span id="more"></span><h2 id="1-Branch"><a href="#1-Branch" class="headerlink" title="1 Branch"></a>1 Branch</h2><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment"># create branch</span><br>$ git branch &lt;branch_name&gt;<br><br><span class="hljs-comment"># switch branch</span><br>$ git checkout &lt;branch_name&gt;<br><br><span class="hljs-comment"># create and switch</span><br>$ git checkout -b &lt;branch_name&gt;<br><br><span class="hljs-comment"># merge and save the record</span><br>$ git merge --no-ff -m <span class="hljs-string">&quot;&lt;merge_message&gt;&quot;</span> &lt;branch_name&gt;<br></code></pre></div></td></tr></table></figure><p><strong>Notation :</strong> </p><ol><li>参数 <code>--no-ff</code> 的作用是禁用 <code>Fast forward</code> 模式, 使 Git 在 <code>merge</code> 的时候生成一个新的 commit, 这样就可以看出分支的合并历史.</li></ol><h2 id="2-Remote"><a href="#2-Remote" class="headerlink" title="2 Remote"></a>2 Remote</h2><p>首先给出与远程同步相关的命令</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment"># 下载远程仓库的所有变动</span><br>$ git fetch &lt;remote&gt;<br><br><span class="hljs-comment"># 显示所有远程仓库</span><br>$ git remote -v<br><br><span class="hljs-comment"># 显示某个远程仓库的信息</span><br><br><br><span class="hljs-comment"># 增加一个新的远程仓库，并命名</span><br>$ git remote add &lt;shortname&gt; &lt;url&gt;<br><br><span class="hljs-comment"># 取回远程仓库的变化，并与本地分支合并</span><br>$ git pull &lt;remote&gt; &lt;branch&gt;<br><br><span class="hljs-comment"># 上传本地指定分支到远程仓库</span><br>$ git push &lt;remote&gt; &lt;branch&gt;<br><br><span class="hljs-comment"># 强行推送当前分支到远程仓库，即使有冲突</span><br>$ git push &lt;remote&gt; --force<br>$ git push &lt;remote&gt; &lt;branch&gt; -f<br><br><span class="hljs-comment"># 推送所有分支到远程仓库</span><br>$ git push &lt;remote&gt; --all<br></code></pre></div></td></tr></table></figure><h3 id="Collide"><a href="#Collide" class="headerlink" title="Collide"></a>Collide</h3><p>如果远程库与本地库不同, 将无法 <code>push</code> 成功. 此时需要先 <code>pull</code> 下来, 手动解决冲突并在本地进行提交后再进行 <code>push</code>. 具体来说, 可能遇到如下类型的冲突:</p><ol><li><em>远程新建了文件, 本地没有新建 :</em> <code>pull</code> 后本地会出现远程新建的文件, 此时就用正常的 <code>commit</code> 方法就可以了.</li><li><em>同一文件, 远程库与本地库内容不同 :</em> <code>pull</code> 以后会用 <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>, <code>=======</code>, <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出不同分支的内容, 手动将这些符号处理掉后将本文件提交即可</li></ol><p>&emsp;&emsp;如, 对某文件, 若本地库内容为:</p><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript"><span class="hljs-keyword">local</span> learngit<br></code></pre></div></td></tr></table></figure><p>远程库内容为:</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-comment">remote learngit </span><br></code></pre></div></td></tr></table></figure><p>则 <code>pull</code> 后该文件显示为:</p><figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD<br>local learngit<br>=======<br>remote learngit<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;ecb3fc62eaa45f3a4b28a0ff5e8640358886c644<br></code></pre></div></td></tr></table></figure><p>后面的序号可能不同, 这一点不要在意. 此时只要手工处理掉冲突标识符再保存即可正常 <code>push</code> 了, 分支冲突的解决也是类似的. (似乎再 <code>merge</code> 的时候会自动把文件改成带冲突标识符的样子, 具体的我还没试过)</p><p>&emsp;&emsp;应注意, 如果本地的分支和远程的分支从来没有建立过联系, 则无法采取上面的方式. 也就是说: 不要既在 Github 上新开项目并建立 LICENSE 又在本地建立新库. 这样的话同名的分支 (如 <code>master</code>) 从来没有历史联系, 但又存在不同, 于是只有通过本地强制覆盖远程来完成同步.</p><h2 id="3-Commit"><a href="#3-Commit" class="headerlink" title="3 Commit"></a>3 Commit</h2><p>在每次提交更新时通常要写入对该次更新的描述. 一般而言, 使用 <code>git commit -m &#39;&lt;msg&gt;&#39;</code> 即可. 但如果需要写的内容较多, 可以考虑直接使用 <code>git commit</code> 来写入 commit 的信息. </p><p>&emsp;&emsp;在执行 <code>git commit</code> 后, 将启动文本编辑器以便输入本次提交的说明. 默认会启用 shell 的环境变量 <code>$EDITOR</code> 所指定的软件, 一般都是 Vim 或 Emacs. 此时会看到类似下面的文本信息:</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gitcommit"><br># Please enter the commit message for your changes. Lines starting<br># with &#39;#&#39; will be ignored, and an empty message aborts the commit.<br>#<br># On branch tmp<br># Changes to be committed:<br>#new file:   Software (cmd)&#x2F;Git Blog.md<br>#new file:   Software (cmd)&#x2F;Git Log.md<br>#modified:   Syntax&#x2F;Shell Log.md<br>#<br># Changes not staged for commit:<br>#modified:   Software (cmd)&#x2F;Git Blog.md<br>#<br></code></pre></div></td></tr></table></figure><p>特点可归纳如下 :</p><ol><li>第一行是空行, 在该处输入 commit message</li><li>空行的下面是关于 commit message 编辑时的基本规则</li><li>以 <code>#</code> 开头的行将被忽略</li><li>若没有输入任何信息, 或只有空行及注释, 则退出文本编辑器后, 本次 commit 操作将被忽略.</li></ol><p>&emsp;&emsp;退出编辑器时, 若 <code>commit message</code> 非空, 则 git 会丢掉注释行, 用所输入的附带信息生成一次提交. ( 关于这里有一个猜想 : 通过指令 <code>git commit</code> 打开的文件只存在与一个临时的缓冲区, 一旦退出, 将会根据文件是否为空来决定如何处理内容. 换句话说, 所打开的编辑 commit message 的文件应该只是一个临时文件 )</p><p>一般地, commit 的信息有一定的格式规范.</p><p><em>Notation :</em></p><ol><li>可以在后面加上 <code>-v</code> 选项将所作的改变的 diff 输出放在编辑器中总而可知道本次具体做了哪些修改.</li></ol><h3 id="Standard-of-commit-message"><a href="#Standard-of-commit-message" class="headerlink" title="Standard of commit message"></a>Standard of commit message</h3><p>本部分内容主要来自 <em>阮一峰的网络日志</em> <sup><a href="#fn_6" id="reffn_6">6</a></sup>. 每次提交, commit message 都包括三个部分 : Header, Body, Footer. 基本格式为 :</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts"><span class="hljs-params">&lt;type&gt;</span>(<span class="hljs-params">&lt;scope&gt;</span>): <span class="hljs-params">&lt;subject&gt;</span><br><span class="hljs-comment">// 1 blank line</span><br><span class="hljs-params">&lt;body&gt;</span><br><span class="hljs-comment">// 1 blank line</span><br><span class="hljs-params">&lt;footer&gt;</span><br></code></pre></div></td></tr></table></figure><p>其中 Header 是必须的, Body 和 Footer 可以省略.</p><h4 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h4><p>Header 只有一行, 包括三个字段 :</p><ol><li><code>&lt;type&gt;</code> ( 必需 ) : 用以说明 commit 的类别, 只允许使用下面 7 个标识 :<ol><li>feat : 新功能 ( feature )</li><li>fix : 修补 bug</li><li>docs : 文档 ( documentation )</li><li>style : 格式 ( 不影响代码运行 )</li><li>refactor : 重构 ( 即不是新增功能, 也不是修改 bug 的代码变动 )</li><li>test : 增加删减</li><li>chore : 构建过程或辅助工具的变动</li></ol></li><li><code>&lt;scope&gt;</code> ( 可选 ) : 用于说明 commit 影响的范围, 比如数据层、控制层、视图层等等, 视项目不同而不同.</li><li><code>&lt;subject&gt;</code> ( 必需 ) : commit 目的的简短描述, 应遵循以下规范 : <ol><li>不超过 50 个字符.</li><li>以动词开头, 使用第一人称现在时,</li><li>第一个字母小写</li><li>结尾不加句号 <code>.</code></li></ol></li></ol><h4 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h4><p><code>&lt;body&gt;</code> 是对本次 commit 的详细描述, 可以分成多行. 编写时应注意</p><ol><li>使用第一人称现在时</li><li>应说明代码变动的动机</li><li>要与以前行文进行对比</li></ol><h4 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h4><p><code>&lt;footer&gt;</code> 只用于两种情况 :</p><ol><li>不兼容变动 : 如果当前代码与上一个版本不兼容, 则 Footer 部分以 <code>BREAKING CHANGE</code> 开头, 后面是对变动的描述、以及变动理由和迁移方法. 如 : <figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">BREAKING CHANGE:</span> <span class="hljs-string">isolate</span> <span class="hljs-string">scope</span> <span class="hljs-string">bindings</span> <span class="hljs-string">definition</span> <span class="hljs-string">has</span> <span class="hljs-string">changed.</span><br><br><span class="hljs-attr">To migrate the code follow the example below:</span><br><br><span class="hljs-attr">Before:</span><br><br><span class="hljs-attr">scope:</span> &#123;<br>    <span class="hljs-attr">myAttr:</span> <span class="hljs-string">&#x27;attribute&#x27;</span>,<br>&#125;<br><br><span class="hljs-attr">After:</span><br><br><span class="hljs-attr">scope:</span> &#123;<br>    <span class="hljs-attr">myAttr:</span> <span class="hljs-string">&#x27;@&#x27;</span>,<br>&#125;<br><br><span class="hljs-string">The</span> <span class="hljs-string">removed</span> <span class="hljs-string">`inject`</span> <span class="hljs-string">wasn&#x27;t</span> <span class="hljs-string">generaly</span> <span class="hljs-string">useful</span> <span class="hljs-string">for</span> <span class="hljs-string">directives</span> <span class="hljs-string">so</span> <span class="hljs-string">there</span> <span class="hljs-string">should</span> <span class="hljs-string">be</span> <span class="hljs-literal">no</span> <span class="hljs-string">code</span> <span class="hljs-string">using</span> <span class="hljs-string">it.</span><br></code></pre></div></td></tr></table></figure></li><li>关闭 issue : 如果当前 commit 针对某个issue, 那么可以在 Footer 部分关闭这个 issue. 形式如 : <figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">Closes </span><span class="hljs-comment">#234</span><br></code></pre></div></td></tr></table></figure></li></ol><h4 id="Revert"><a href="#Revert" class="headerlink" title="Revert"></a>Revert</h4><p>还有一种特殊情况, 如果当前 commit 用于撤销以前的 commit, 则必须以 <code>revert:</code> 开头, 后面跟着被撤销 commit 的 Header. 如</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">revert</span>: feat(pencil): add &#x27;graphiteWidth&#x27; option<br><br><span class="hljs-attribute">This</span> reverts commit <span class="hljs-number">667</span>ecc<span class="hljs-number">1654</span>a<span class="hljs-number">317</span>a<span class="hljs-number">13331</span>b<span class="hljs-number">17617</span>d<span class="hljs-number">973392</span>f<span class="hljs-number">415</span>f<span class="hljs-number">02</span>.<br></code></pre></div></td></tr></table></figure><p>Body部分的格式是固定的, 必须写成 <code>This reverts commit &amp;lt;hash&gt;.</code>, 其中的hash是被撤销 commit 的 SHA 标识符. </p><h2 id="4-Ignore-File"><a href="#4-Ignore-File" class="headerlink" title="4 Ignore File"></a>4 Ignore File</h2><p><code>git</code> 中忽略文件基本的方法是通过编写 <code>.gitignore</code> 文件完成对文件的忽略. 对于文件路径的描述支持 glob 的正则表达式 <sup><a href="#fn_5" id="reffn_5">5</a></sup> . 主要特点有</p><ol><li>以 <code>#</code> 开头的行为注释行.</li><li><code>/path</code> 表示相对当前目录的路径, <code>path/</code> 表示所有路径 <code>path</code> 之下的子目录.</li></ol><h2 id="5-DEBUG"><a href="#5-DEBUG" class="headerlink" title="5 DEBUG"></a>5 DEBUG</h2><h3 id="Collide-between-Local-and-Remote-Repository"><a href="#Collide-between-Local-and-Remote-Repository" class="headerlink" title="Collide between Local and Remote Repository"></a>Collide between Local and Remote Repository</h3><p>(2020.02.22) 在整理群论笔记的时候, 发现之前忘记了把在 Github 上建立的 LICENSE 给 <code>pull</code> 下来, 所以直接 <code>push</code> 发生了冲突. 之后通过先 <code>pull</code>, 再提交 <code>pull</code> 得到的新增内容到本地, 最后再 <code>push</code>, 从而解决了问题. <sup><a href="#fn_1" id="reffn_1">1</a></sup> <sup><a href="#fn_2" id="reffn_2">2</a></sup> <sup><a href="#fn_3" id="reffn_3">3</a></sup></p><h3 id="git-log-中文编码错误"><a href="#git-log-中文编码错误" class="headerlink" title="git log 中文编码错误"></a><code>git log</code> 中文编码错误</h3><p>可以在 <code>.gitconfig</code> 内加入 <sup><a href="#fn_4" id="reffn_4">4</a></sup> :</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gitconfig">[i18n]<br>    commitencoding&#x3D;utf-8<br>    logoutputencoding&#x3D;utf-8<br></code></pre></div></td></tr></table></figure><p>或在命令行中运行指令:</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">git config --global i18n.commitencoding utf-8<br>git config --global i18n.logoutputencoding utf-8<br></code></pre></div></td></tr></table></figure><p>其中第一条表示提交命令的时候使用 utf-8 编码集提交, 第二条表示日志输出时使用utf-8编码集显示</p><p>&emsp;&emsp;随后设置环境变量:</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> LESSCHARSET=utf-8<br></code></pre></div></td></tr></table></figure><p>其设置LESS字符集为utf-8.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><sup><a href="#fn_1" id="reffn_1">1</a></sup> <a href="https://www.liaoxuefeng.com/wiki/896043488029600/900004111093344">解决冲突</a><br><sup><a href="#fn_2" id="reffn_2">2</a></sup> <a href="https://blog.csdn.net/M87138/article/details/44921583">github远程仓库和本地仓库冲突</a><br><sup><a href="#fn_3" id="reffn_3">3</a></sup> <a href="https://blog.csdn.net/starter_____/article/details/79250129">Git —— 解决本地仓库和GitHub库的冲突</a><br><sup><a href="#fn_4" id="reffn_4">4</a></sup> <a href="https://www.cnblogs.com/yanzige/p/9810333.html">GIT使用log命令显示中文乱码</a><br><sup><a href="#fn_5" id="reffn_5">5</a></sup> <a href="https://www.atlassian.com/git/tutorials/saving-changes/gitignore">.gitignore</a><br><sup><a href="#fn_6" id="reffn_6">6</a></sup> <a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html">Commit message 和 Change log 编写指南</a></p>]]></content>
    
    
    <categories>
      
      <category>CS Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LaTeX 中的多行公式</title>
    <link href="/CS_latex/2021-05-27_multiline_equation/"/>
    <url>/CS_latex/2021-05-27_multiline_equation/</url>
    
    <content type="html"><![CDATA[<p>本文归纳了常见的 LaTeX 多行公式指令以及一些注意事项.</p><span id="more"></span><h2 id="公式的对齐"><a href="#公式的对齐" class="headerlink" title="公式的对齐"></a>公式的对齐</h2><p>对齐符号 <code>&amp;</code> 一般放在等号的前面, 但有时会有一两行公式需要在等号后面对齐, 此时可采用 <code>\phantom</code> 指令, 不过需要加上 <code>\mathrel</code> 以获得正确的间距. 如</p><figure class="highlight tex"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tex"><span class="hljs-keyword">\begin</span>&#123;align&#125;<br>    <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\mathrel</span>&#123;<span class="hljs-keyword">\phantom</span>&#123;=&#125;&#125; (a + b)(a - b) <span class="hljs-keyword">\nonumber</span> <span class="hljs-keyword">\\</span><br>    <span class="hljs-built_in">&amp;</span> = a<span class="hljs-built_in">^</span>&#123;2&#125; - b<span class="hljs-built_in">^</span>&#123;2&#125;<br><span class="hljs-keyword">\end</span>&#123;align&#125;<br></code></pre></div></td></tr></table></figure><p>将得到如下效果</p><p><img src="align.png" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>CS LaTeX</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>TODO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[READ] Chapter 3 Electromagnetism and gravitation in various dimensions</title>
    <link href="/PHYS_string_theory/BOOK_a_first_course_in_string_theory/2021-05-24_READ_chapter_3_electromagnetism_and_gravitation/"/>
    <url>/PHYS_string_theory/BOOK_a_first_course_in_string_theory/2021-05-24_READ_chapter_3_electromagnetism_and_gravitation/</url>
    
    <content type="html"><![CDATA[<p>This essay is a reading notes of <em>A First Course in String Theory</em>, <em>Chapter 3 Electromagnetism and gravitation in various dimensions</em> <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Zwiebach, Barton. “A First Course in String Theory,” 2009">[1]</span></a></sup></p><span id="more"></span><h2 id="3-1-Classical-electrodynamics"><a href="#3-1-Classical-electrodynamics" class="headerlink" title="3.1 Classical electrodynamics"></a>3.1 Classical electrodynamics</h2><ul><li>Maxwell’s equation in Heaviside-Lorentz system<ul><li>zero curl terms of electric</li></ul></li><li>gauge transformation<ul><li>if two set $(\Phi, \boldsymbol{A})$ and $(\Phi’, \boldsymbol{A}’)$ can’t transfer by a gauge transformation, they are physically different.</li></ul></li><li><em>admissible</em> potential set</li></ul><h2 id="3-2-Electromagnetism-in-three-dimensions"><a href="#3-2-Electromagnetism-in-three-dimensions" class="headerlink" title="3.2 Electromagnetism in three dimensions"></a>3.2 Electromagnetism in three dimensions</h2><ul><li>with Lorentz force formulation, constrain particle in 2-D space lead<script type="math/tex; mode=display">  E_z = 0,\ B_x = B_y = 0</script></li></ul><h2 id="3-3-Manifestly-relativistic-electrodynamics"><a href="#3-3-Manifestly-relativistic-electrodynamics" class="headerlink" title="3.3 Manifestly relativistic electrodynamics"></a>3.3 Manifestly relativistic electrodynamics</h2><ul><li>$F_{\mu\nu}$ and its gauge invariant quantity</li><li>symmetry of $T_{\lambda\mu\nu}$ and its equations</li><li>source equation</li><li>extrapolate to higher spatial dimensions</li></ul><h2 id="3-4-An-aside-on-spheres-in-higher-dimensions"><a href="#3-4-An-aside-on-spheres-in-higher-dimensions" class="headerlink" title="3.4 An aside on spheres in higher dimensions"></a>3.4 An aside on spheres in higher dimensions</h2><ul><li>spheres and balls in arbitrary dimensions</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>Zwiebach, Barton. “A First Course in String Theory,” 2009<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>PHYS String Theory</category>
      
      <category>BOOK A First Course in String Theory</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TODO</tag>
      
      <tag>PHYS</tag>
      
      <tag>READ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[DEBUG] .tex 文件中进入 INSERT 模式迟缓</title>
    <link href="/CS_vim/2021-05-23_DEBUG_insert_mode_delay_in_tex_file/"/>
    <url>/CS_vim/2021-05-23_DEBUG_insert_mode_delay_in_tex_file/</url>
    
    <content type="html"><![CDATA[<p>今天在编辑 <code>.tex</code> 文件 (写毕业论文…) 时, 发现进入 <code>INSERT</code> 模式后要等到 “pending” 时间结束后才能键入字符 <code>E</code>. 后发现是 <code>textobject</code> 的快捷键重映射定义导致的, 并通过单独定义 <code>operate</code> 模式和 <code>visual</code> 模式下的快捷键映射解决了该问题.</p><span id="more"></span><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>编辑 <code>.tex</code> 文件时, 在 NORMAL 模式下按下 <code>i</code> 进入 INSERT 模式时, 发现大写字母 $E$ 的输入十分迟缓, 得等到完全进入 INSRT 模式后才可输入, 而在其它类型的文件中则没有出现此问题.</p><h2 id="出现原因"><a href="#出现原因" class="headerlink" title="出现原因"></a>出现原因</h2><p>一开始以为是因为编辑的 <code>.tex</code> 文件太大或是 <code>vim</code> 的寄存器储存的内容太多导致, 但后来发现在较小的 <code>.tex</code> 文件中同样出现此问题. 经排查后发现原因是为 <code>textobject</code> 定义了快捷键重映射 (作用于所有 <code>NORMAL</code>, <code>VISUAL</code> 相关的模式)</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim"><span class="hljs-keyword">map</span> iE <span class="hljs-symbol">&lt;plug&gt;</span>(vimtex-ie)<br><span class="hljs-keyword">map</span> aE <span class="hljs-symbol">&lt;plug&gt;</span>(vimtex-ae)<br><span class="hljs-keyword">map</span> iC <span class="hljs-symbol">&lt;plug&gt;</span>(vimtex-ic)<br><span class="hljs-keyword">map</span> aC <span class="hljs-symbol">&lt;plug&gt;</span>(vimtex-ac)<br></code></pre></div></td></tr></table></figure><p>这导致输出 <code>i</code> 后会有一个 “pending” 的时间来检测是否继续输入指令. 同理, 按下 <code>i</code> 键入 <code>C</code>, 以及按下 <code>a</code> 后键入 <code>E</code> 和 <code>C</code> 都会出现问题.</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>由于我们仅希望其在 <code>NORMAL</code> 模式下作为文本对象, <strong>而不是独立指令</strong>, 因此需要利用 <code>omap</code> 单独指定其作为 <code>operate</code> 时的快捷键 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="vim: 命令后缀映射">[1]</span></a></sup> (准确来说应称为 “命令后缀映射”), 亦即</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim"><span class="hljs-keyword">omap</span> iE <span class="hljs-symbol">&lt;plug&gt;</span>(vimtex-ie)<br><span class="hljs-keyword">omap</span> aE <span class="hljs-symbol">&lt;plug&gt;</span>(vimtex-ae)<br><span class="hljs-keyword">omap</span> iC <span class="hljs-symbol">&lt;plug&gt;</span>(vimtex-ic)<br><span class="hljs-keyword">omap</span> aC <span class="hljs-symbol">&lt;plug&gt;</span>(vimtex-ac)<br></code></pre></div></td></tr></table></figure><p>但这样的话在 <code>VISUAL</code>  模式下就无法使用这些快捷键了. 因而还要单独定义 <code>VISUAL</code> 模式下的快捷键重映射</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim"><span class="hljs-keyword">vmap</span> iE <span class="hljs-symbol">&lt;plug&gt;</span>(vimtex-ie)<br><span class="hljs-keyword">vmap</span> aE <span class="hljs-symbol">&lt;plug&gt;</span>(vimtex-ae)<br><span class="hljs-keyword">vmap</span> iC <span class="hljs-symbol">&lt;plug&gt;</span>(vimtex-ic)<br><span class="hljs-keyword">vmap</span> aC <span class="hljs-symbol">&lt;plug&gt;</span>(vimtex-ac)<br></code></pre></div></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/lymslive/vimllearn/blob/master/z/20170818_2.md#命令后缀映射">vim: 命令后缀映射</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS Vim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>DEBUG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LaTeX 中进行多文件编译</title>
    <link href="/CS_latex/2021-05-23_multiple_files_compile/"/>
    <url>/CS_latex/2021-05-23_multiple_files_compile/</url>
    
    <content type="html"><![CDATA[<p>本文归纳了 LaTeX 中多文件编译相关的常用指令.</p><span id="more"></span><h2 id="LaTeX-默认指令"><a href="#LaTeX-默认指令" class="headerlink" title="LaTeX 默认指令"></a>LaTeX 默认指令</h2><ul><li><code>\include&#123;&lt;file&gt;&#125;</code>: 导入文件, 注意文件名<em>不带拓展名</em>.</li><li><code>\includeonly&#123;&lt;file_list&gt;&#125;</code>: 与 <code>include</code> 类似, 不过加上该命令后只有文件列表 (英文逗号将不同文件隔开) 中的文件会编译. 好处是如果以前进行过完整的编译, 那么在使用 <code>includeonly</code> 时, 将保留原本完整编译时得到的章节编号, 页码信息, 交叉引用信息等.</li><li><code>\input&#123;&lt;file&gt;&#125;</code>: 直接将文件内容复制到 <code>\input</code> 命令所在的位置</li></ul><h2 id="import-宏包"><a href="#import-宏包" class="headerlink" title="import 宏包"></a><code>import</code> 宏包</h2><p>TODO</p>]]></content>
    
    
    <categories>
      
      <category>CS LaTeX</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>TODO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[DEBUG] 个人博客访问出现 404 问题</title>
    <link href="/CS_Web/2021-05-19_DEBUG_404_problem/"/>
    <url>/CS_Web/2021-05-19_DEBUG_404_problem/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文介绍了 404 问题的基本概念, 以及对今天处理的一个 404 问题发生原因的分析.</p></blockquote><span id="more"></span><p>&emsp;&emsp;<code>404</code> 问题是常见的网络问题, 其基本原因是访问的服务器路径上不存在可供访问的文件.</p><p>&emsp;&emsp;今天访问个人博客时突然发现分类 <code>CS Web</code> 和 <code>CS Hexo</code> 下的文章在进行访问时出现了 404 问题. 经分析, 可能是因为前两天改变了 <code>Hexo</code> 目录中两个文件夹 <code>CS_Web</code> 和 <code>CS_Hexo</code> 中字母的大小写 (分别改为了 <code>CS_web</code> 和 <code>CS_hexo</code>). 而我自己的电脑为 macOS 系统, 其文件名是对大小写不敏感的, 于是我自己的电脑判定文件夹名称没有变化, 在上传远程服务器时文件夹名称亦没有改变. 而远程服务器为 Ubuntu 系统, 其文件名可能是大小写敏感的, 于是通过原本的大写字母路径无法访问实际的小写字母路径.</p>]]></content>
    
    
    <categories>
      
      <category>CS Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TRICK] Hexo 中设置永久链接</title>
    <link href="/CS_Hexo/2021-05-17_TRICK_hexo_permalink/"/>
    <url>/CS_Hexo/2021-05-17_TRICK_hexo_permalink/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文介绍了 Hexo 中永久链接的概念和相应设置方法</p></blockquote><span id="more"></span><p>&emsp;&emsp;对于 Hexo 来说, 永久链接的格式控制着生成的文件相对于 <code>public</code> 的路径. 基本设置格式如<br>    <figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">permalink:</span> <span class="hljs-string">:category/:title/</span><br></code></pre></div></td></tr></table></figure><br>于是文件名称为 <code>hello.md</code> 分类为 <code>test</code> 的 markdown 文档生成的对应 HTML 文件将在 <code>public/test/</code> 下. 值得注意的是, <code>:title</code> 是相对 <code>source</code> 的路径而非文件的名称. 例如, 若 markdown 文件在 <code>source</code> 的子目录下, 如 <code>source/test1/hello.md</code>, 则生成的对应 HTML 文件在目录 <code>public/test1/hello</code> 下. 所以<em>如果已经利用子目录进行文章分类, 在使用 <code>:title</code> 时不再需要加上 <code>:category</code></em>, 或者采用 <code>:name</code> 来代替 <code>:title</code>. 此外, <em>末尾的斜杠 <code>/</code> 不能省略</em></p><p>&emsp;&emsp;具体而言, 其中可选的参数为 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Hexo: 永久链接">[1]</span></a></sup></p><div class="table-container"><table><thead><tr><th>item</th><th>meaning</th></tr></thead><tbody><tr><td><code>:year</code></td><td>文章的发表年份（4 位数）</td></tr><tr><td><code>:month</code></td><td>文章的发表月份（2 位数）</td></tr><tr><td><code>:i_month</code></td><td>文章的发表月份（去掉开头的零）</td></tr><tr><td><code>:day</code></td><td>文章的发表日期 (2 位数)</td></tr><tr><td><code>:i_day</code></td><td>文章的发表日期（去掉开头的零）</td></tr><tr><td><code>:hour</code></td><td>文章发表时的小时 (2 位数)</td></tr><tr><td><code>:minute</code></td><td>文章发表时的分钟 (2 位数)</td></tr><tr><td><code>:second</code></td><td>文章发表时的秒钟 (2 位数)</td></tr><tr><td><code>:title</code></td><td>文件名称 (relative to “source/_posts/“ folder)</td></tr><tr><td><code>:name</code></td><td>文件名称</td></tr><tr><td><code>:post_title</code></td><td>文章标题</td></tr><tr><td><code>:id</code></td><td>文章 ID (not persistent across cache reset)</td></tr><tr><td><code>:category</code></td><td>分类。如果文章没有分类，则是 default_category 配置信息。</td></tr><tr><td><code>:hash</code></td><td>SHA1 hash of filename (same as :title) and date (12-hexadecimal)</td></tr></tbody></table></div><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://hexo.io/zh-cn/docs/permalinks.html">Hexo: 永久链接</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>TRICK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用 convert 将 PDF 转化为图片并调整分辩率</title>
    <link href="/CS_linux/2021-05-16_convert_pdf/"/>
    <url>/CS_linux/2021-05-16_convert_pdf/</url>
    
    <content type="html"><![CDATA[<p>本文介绍了如何利用 <code>ImageMagick</code> 提供的 <code>conver</code> 指令将 PDF 转化为图片, 以及如何调整图片的分辨率. 其中 PDF 转换为图片的部分最早记录于 2020.05.19, 分辨率调整的部分最早记录于 2020.07.08.</p><span id="more"></span><h2 id="PDF-与图片的转化"><a href="#PDF-与图片的转化" class="headerlink" title="PDF 与图片的转化"></a>PDF 与图片的转化</h2><p>&emsp;&emsp;PDF 与图片的转化可以使用 <code>ImageMagick</code> 提供的 <code>convert</code> 指令来实现 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Linux下使用ImageMagick将pdf转换为jpg">[1]</span></a></sup> (<code>ImageMagick</code> 一般在安装 LaTeX 时会一起安装). 若没有安装, 可通过 <code>brew</code> 进行安装</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">brew install ImageMagick<br></code></pre></div></td></tr></table></figure><p>下面的代码先将图片转化, 随后纵向拼接:</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">$ convert -density 400 input.pdf out.jpg<br>$ convert -append out-*.jpg out.jpg <span class="hljs-comment"># vertical joint</span><br></code></pre></div></td></tr></table></figure><p>如果 PDF 源文件 <code>input.pdf</code> 有三页, 则转化出的图片名称为 <code>out-0,jpg</code>, <code>out-1.jpg</code>. 第二行代码中的 <code>*</code> 是通配符. 此外, 也可实现向 <code>.png</code> 的转化:<br><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">$ convert -density 150 input.pdf -quality 90 output.png<br></code></pre></div></td></tr></table></figure></p><p>以及横向拼接:</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">$ convert in-1.jpg in-5.jpg in-N.jpg +append out.jpg <span class="hljs-comment"># horizontal joint</span><br></code></pre></div></td></tr></table></figure><p>值得注意的是, 在 LaTeX 的 <code>ctex</code> 类的文档类中, 如果选择了 <code>hyperref</code>, 则交叉引用会自动建立超链接, 且在 PDF 浏览时会看见红框. 但这些红框在将 PDF 转化为图片时不会出现, 因此不必刻意消去那些红框.</p><h2 id="利用-convert-调整图像分辨率"><a href="#利用-convert-调整图像分辨率" class="headerlink" title="利用 convert 调整图像分辨率"></a>利用 <code>convert</code> 调整图像分辨率</h2><p>&emsp;&emsp;利用 <code>convert</code> 调整图像分辨率的指令如 <sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="Linux 下处理图片分辨率的神器">[2]</span></a></sup> :</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">convert -resize 720x720 image.jpg image_1.jpg<br></code></pre></div></td></tr></table></figure><p>上面的指令在转换时是保比例的, 亦即如果图片的原始比例是 3:2, 那么经上面的指令转化后仍然是 3:2, 而非 1:1 (估计是取转化尺寸的最小或最大值作为转化后图片长或宽的尺寸?)</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://blog.csdn.net/lpwmm/article/details/83067698">Linux下使用ImageMagick将pdf转换为jpg</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.jianshu.com/p/5977674430c2">Linux 下处理图片分辨率的神器</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>音阶弹奏助记表</title>
    <link href="/MUSIC_piano/2021-05-16_music_scale_play/"/>
    <url>/MUSIC_piano/2021-05-16_music_scale_play/</url>
    
    <content type="html"><![CDATA[<p>本文主要记录了大调音阶的关键指法, 以及大调音阶的关系小调音阶 (旋律) 的对应升音.</p><span id="more"></span><h2 id="大调音阶关键指法"><a href="#大调音阶关键指法" class="headerlink" title="大调音阶关键指法"></a>大调音阶关键指法</h2><p><img src="scale_1.jpg" alt=""></p><h2 id="旋律小调音阶的升音"><a href="#旋律小调音阶的升音" class="headerlink" title="旋律小调音阶的升音"></a>旋律小调音阶的升音</h2><p><img src="scale_2.jpg" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>MUSIC Piano</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MUSIC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[READ] Chapter 4 论技术训练</title>
    <link href="/MUSIC_piano/BOOK_art_of_piano_performance/2021-05-10_READ_chapter_4_technique_practice/"/>
    <url>/MUSIC_piano/BOOK_art_of_piano_performance/2021-05-10_READ_chapter_4_technique_practice/</url>
    
    <content type="html"><![CDATA[<p>本文为 <em>论钢琴表演艺术 (涅高兹)</em> 第四章的读书笔记.</p><span id="more"></span><h2 id="4-1-概论"><a href="#4-1-概论" class="headerlink" title="4.1 概论"></a>4.1 概论</h2><ul><li>调用一切可用的身体资源</li><li>从使琴键发声的角度来看 (即便是 FF), 弹琴是一件轻松的事</li><li>肖邦的教学理念<ul><li>第一课: E, F#, E#, G#, A#, B#, 半断奏 (portamento) 而非边奏 (legato)</li><li>黑键更适合手指弹奏<ul><li>音阶练习黑键由多到少</li><li>钢琴弹奏理论具有不同于一般音乐理论的特点 (乐理上简单等同弹奏简单!)</li></ul></li></ul></li><li>钢琴的机械性及击键过程的物理描述<ul><li>F: 手指力度</li><li>h: 手抬起的高度</li><li>v: 手的击键速度</li><li>m: 手臂质量</li><li>“他越是善于把自己的知识归纳为具有规律作用的精确定义, 他的知识也就越巩固, 深刻.”</li></ul></li></ul><h2 id="4-2-信心是放松的基础"><a href="#4-2-信心是放松的基础" class="headerlink" title="4-2 信心是放松的基础"></a>4-2 信心是放松的基础</h2><ul><li>“放松” 是 “任意” 的对立面</li><li>放松的先决条件是 “信心”</li><li>巴赫: 技术练习与音乐性相结合</li><li>“弹得聚精会神, 结实有力, ‘深刻’ 和准确”<ul><li>整只手完全放松</li><li>完全平静, 非必要动作不用</li><li>“金属之声” 的获得</li></ul></li></ul><h2 id="4-3-动作器官"><a href="#4-3-动作器官" class="headerlink" title="4-3 动作器官"></a>4-3 动作器官</h2><ul><li>钢琴演奏中的 “手指力量”: 实质为承受某一重量时的稳定性<ul><li>“钢琴家本来应该能够做到这样的体育锻炼: 把十个手指支撑在地板上, 然后整个身体倒竖起来 —- 这就是手指 (支持着手的拱门的那些圆柱或弧形支柱) 所应支持的整个重量”</li></ul></li><li>基本功: 弹得均匀</li><li>利用手指差异演奏</li></ul><h2 id="4-4-论放松"><a href="#4-4-论放松" class="headerlink" title="4-4 论放松"></a>4-4 论放松</h2><ul><li>能力差的学生的共同缺点: 一点也不放松<ul><li>“我给他们的帮助很少, 而他们却给我带来难以忍受的痛苦.”</li><li>“手腕抬起, 手放松地下垂, 用手指从上面在琴上弹出音来, 然后用平稳的动作慢慢地把手腕放到尽可能低的地位, 接着又一次, 把手腕抬到手指己经不能按住琴琴的高度, 再用平稳的动作使手腕和整个手部一起向上 ‘离去’.”</li><li>“但是我想, 在上课时, 我由于痛苦而引起的大喊大叫, 比我的尚处于萌芽状态的体系所起的做用可能大些.”</li><li>让手自然下落的练习</li></ul></li><li>“吊桥” 比喻<ul><li>“手在钢琴上的最好位置应该是最容易迅速变化的位置.”</li></ul></li><li>灵活性及其练习<ul><li>灵活性问题源于手的移动</li><li>音阶的手型: 3, 4, 5 上越拇指而不是拇指下移 (如右手下行音阶)</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>MUSIC Piano</category>
      
      <category>BOOK 论钢琴表演艺术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MUSIC</tag>
      
      <tag>READ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[DEBUG] 撰写毕业论文中遇到的 LaTeX 相关问题汇总</title>
    <link href="/CS_latex/2021-05-13_DEBUG_bug_in_undergraduate_paper/"/>
    <url>/CS_latex/2021-05-13_DEBUG_bug_in_undergraduate_paper/</url>
    
    <content type="html"><![CDATA[<p>这篇文章用于记录撰写毕业论文时遇到的与 LaTeX 相关的问题</p><span id="more"></span><h2 id="LaTeX-mathscr-字体上下标几乎对齐"><a href="#LaTeX-mathscr-字体上下标几乎对齐" class="headerlink" title="[LaTeX] \mathscr 字体上下标几乎对齐"></a>[LaTeX] <code>\mathscr</code> 字体上下标几乎对齐</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>使用 <code>\mathscr</code> 字体时, 指令 <code>\tensor</code> 生成的上标与下标几乎对齐</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>在 <code>\mathscr</code> 的符号后加上小间隔 <code>\,</code>, 如<br>    <figure class="highlight tex"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tex"><span class="hljs-built_in">$</span><span class="hljs-keyword">\tensor</span>&#123;&#123;<span class="hljs-keyword">\mathscr</span>&#123;G&#125;<span class="hljs-keyword">\,</span>&#125;&#125;&#123;<span class="hljs-built_in">^</span>&#123;i&#125;<span class="hljs-built_in">_</span>&#123;j&#125;&#125;<span class="hljs-built_in">$</span><br></code></pre></div></td></tr></table></figure></p><h2 id="Vim-vimtex-无法识别文件为主文件的子文件"><a href="#Vim-vimtex-无法识别文件为主文件的子文件" class="headerlink" title="[Vim] vimtex 无法识别文件为主文件的子文件"></a>[Vim] <code>vimtex</code> 无法识别文件为主文件的子文件</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><ul><li>对于子文件, 原本会在状态栏 (<code>airline</code> 提供) 下显示 <code>&#123;m&#125;</code>, 但之前一直没显示 </li><li>在子文件中打开目录 (<code>vimtex</code> 提供) 时为空</li><li>子文件中代码高亮无法把 <code>align</code> 环境识别为数学类环境, 除非在子文件中再一次使用 <code>\usepackage&#123;amsmath&#125;</code></li><li>子文件发生变化并保存时, 即使处于 <code>contimue mode</code> 也无法自动编绎</li></ul><p>经分析, 背后的原因是 <code>vimtex</code> 没有将这些文件识别为主文件的子文件.</p><h3 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h3><p>&emsp;&emsp;最终发现是 <code>\documentclass</code> 的格式问题. 将原本 <code>cquthesis</code> 主文件 <code>main.tex</code> 中默认的<br>    <figure class="highlight tex"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tex"><span class="hljs-keyword">\documentclass</span><span class="hljs-comment">%</span><br>    [type=bachelor, bilinguallist=apart,]&#123;cquthesis&#125;<span class="hljs-comment">%</span><br></code></pre></div></td></tr></table></figure><br>改为<br>    <figure class="highlight tex"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tex"><span class="hljs-keyword">\documentclass</span>[type=bachelor, bilinguallist=apart,]&#123;cquthesis&#125;<span class="hljs-comment">%</span><br></code></pre></div></td></tr></table></figure><br>后问题解决.</p><h2 id="LaTeX-附录部分公式编号没有附录的节名"><a href="#LaTeX-附录部分公式编号没有附录的节名" class="headerlink" title="[LaTeX] 附录部分公式编号没有附录的节名"></a>[LaTeX] 附录部分公式编号没有附录的节名</h2><h3 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h3><ul><li>附录中的公式编号形如 “(.1)”, 而预期的应形如 “(A.1)”</li><li>使用 <code>\eqref</code> 引用公式时也形如 “式 (.1)”</li></ul><h3 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h3><p>在 <code>\appendix</code> 指令后显式设置公式编号格式, 如<br>    <figure class="highlight tex"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tex"><span class="hljs-keyword">\renewcommand</span><span class="hljs-keyword">\theequation</span>&#123;<span class="hljs-comment">%</span><br>    <span class="hljs-keyword">\thechapter</span>.<span class="hljs-keyword">\arabic</span>&#123;equation&#125;&#125;<br></code></pre></div></td></tr></table></figure></p><h2 id="Vim-vimtex-目录中不显示注释中的-TODO"><a href="#Vim-vimtex-目录中不显示注释中的-TODO" class="headerlink" title="[Vim] vimtex 目录中不显示注释中的 TODO"></a>[Vim] <code>vimtex</code> 目录中不显示注释中的 <code>TODO</code></h2><h3 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h3><p>理论上来说, 在 <code>.tex</code> 的注释中包含了 <code>TODO</code> 的部分会在 <code>vimtex</code> 的目录指令中显示出来, 但在使用 <code>% TODO</code> 时该条目不显示</p><h3 id="解决方法-3"><a href="#解决方法-3" class="headerlink" title="解决方法"></a>解决方法</h3><p>经测试, <code>TODO</code> 后必须包含文字才可以, 且其后跟着的冒号不会在目录中额外显示. 如, 下面两种写法是等效的<br>    <figure class="highlight tex"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tex"><span class="hljs-comment">% <span class="hljs-doctag">TODO:</span> introduction for GW</span><br><span class="hljs-comment">% TODO introduction for GW</span><br></code></pre></div></td></tr></table></figure><br>均会在 <code>vimtex</code> 提供的目录 <em>顶端</em> 中显示该 <code>TODO</code> 条目, 后面会跟随相应的文字描述</p><p><img src="content_TODO.png" alt=""></p><p>另一方面, 若只使用<br>    <figure class="highlight tex"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tex"><span class="hljs-comment">% TODO</span><br></code></pre></div></td></tr></table></figure><br>则在 <code>vimtex</code> 的目录中不会有任何显示.</p><h2 id="LaTeX-清除空白页"><a href="#LaTeX-清除空白页" class="headerlink" title="[LaTeX] 清除空白页"></a>[LaTeX] 清除空白页</h2><h3 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h3><p>将 <code>cquthesis</code> 设为 <code>twoside</code> 模式后发现部分章节在结束后出现空白页.</p><h3 id="解决方法-4"><a href="#解决方法-4" class="headerlink" title="解决方法"></a>解决方法</h3><p>在 <code>cquthesis.cls</code> 中发现了代码</p><figure class="highlight tex"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tex"><span class="hljs-keyword">\DeclareDefaultOption</span>&#123;<span class="hljs-keyword">\PassOptionsToClass</span>&#123;<span class="hljs-keyword">\CurrentOption</span>&#125;&#123;ctexbook&#125;&#125;<br></code></pre></div></td></tr></table></figure><p>意味着在 <code>cquthesis</code> 文档类的 <code>option</code> 会传递给 <code>ctexbook</code> 因此解决方法参考普通文档的即可. 问题发生的根本原因在于 <code>book</code> 中默认强制章节从奇数页开始. 为了解决此问题, 可加上选项 <code>openany</code> <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Latex 如何清除空白页？">[1]</span></a></sup> <sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="LaTex的book类型中，目录及chapter前自动插入空白页面">[2]</span></a></sup> , 如</p><figure class="highlight tex"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tex"><span class="hljs-keyword">\documentclass</span>[type=bachelor, bilinguallist=apart, printmode=twoside, openany]&#123;cquthesis&#125;<span class="hljs-comment">%</span><br></code></pre></div></td></tr></table></figure><h2 id="LaTeX-中文句号-2021-06-07"><a href="#LaTeX-中文句号-2021-06-07" class="headerlink" title="[LaTeX] 中文句号 (2021.06.07)"></a>[LaTeX] 中文句号 (2021.06.07)</h2><h3 id="问题描述-5"><a href="#问题描述-5" class="headerlink" title="问题描述"></a>问题描述</h3><p>&emsp;&emsp;修改论文的过程中, 指导老师提醒到中文写作中应用句号而不是句点。但之前一直用的是句点, 希望能够在 LaTeX 的正文中输入半角句点, 在输出的 PDF 中自动替换为句号。</p><h3 id="解决方法-5"><a href="#解决方法-5" class="headerlink" title="解决方法"></a>解决方法</h3><p>&emsp;&emsp;没有找到任何令人满意的方法, (不过一篇文章 <sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="批量将句号改为句点">[3]</span></a></sup> 多少有点启发)。最后决定用正则表达式 </p><figure class="highlight taggerscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs taggerscript">[^A-Za-z0-9<span class="hljs-symbol">\[</span><span class="hljs-symbol">\]</span><span class="hljs-symbol">\&#123;</span><span class="hljs-symbol">\&#125;</span><span class="hljs-symbol">\(</span><span class="hljs-symbol">\)</span>]<span class="hljs-symbol">\z</span>s<span class="hljs-symbol">\.</span><span class="hljs-symbol">\s</span>*<br></code></pre></div></td></tr></table></figure><p>先找到正文中的一部分句点进行批量替换, 再手动处理漏网之鱼。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.zhihu.com/question/266237548">Latex 如何清除空白页？</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://blog.csdn.net/Sarah_LZ/article/details/90737631">LaTex的book类型中，目录及chapter前自动插入空白页面</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="http://kuing.orzweb.net/archiver/?tid-527.html">批量将句号改为句点</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS LaTeX</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>DEBUG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LaTeX 中的计数器</title>
    <link href="/CS_latex/2021-05-13_counter/"/>
    <url>/CS_latex/2021-05-13_counter/</url>
    
    <content type="html"><![CDATA[<p>本文用于记录了 LaTeX 中的计数器相关的知识. 包括计数器的名称, 格式指定及一些相关应用. 主要参考刘海洋的 LaTeX 教材 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="刘海洋. 2013. LaTeX 入门.">[1]</span></a></sup>.</p><span id="more"></span><h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2><ul><li>计数器名称:<ul><li>section type: <code>chapter</code>, <code>section</code>, <code>subsection</code> …</li><li>enemerate type: <code>enumi</code>, <code>enumii</code>, <code>enumiii</code>, <code>enumiv</code></li></ul></li><li>格式指定: <code>\arabic</code>, <code>\roman</code>, <code>\Roman</code>, <code>\alpha</code>, <code>Alph</code>, <code>fnsymbol</code></li><li>计数器输出:<ul><li>section type: <code>\thechapter</code>, <code>\thesection</code>, <code>\thesubsection</code> …</li><li>enemerate type: <code>\theenumi</code>, <code>\theenumii</code>, <code>\theenumiii</code>, <code>\theenumiv</code></li></ul></li></ul><h2 id="计数器编程"><a href="#计数器编程" class="headerlink" title="计数器编程"></a>计数器编程</h2><figure class="highlight tex"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tex"><span class="hljs-comment">% define</span><br><span class="hljs-keyword">\newcounter</span>&#123;cnt&#125;    <span class="hljs-comment">% define a new counter</span><br><span class="hljs-keyword">\setcounter</span>&#123;cnt&#125;&#123;0&#125; <span class="hljs-comment">% define and assign</span><br><br><span class="hljs-comment">% claculation</span><br><span class="hljs-keyword">\stepcounter</span>&#123;cnt&#125;<span class="hljs-keyword">\thecnt</span>     <span class="hljs-comment">% add 1 (self-add) to `cnt` and display</span><br><span class="hljs-keyword">\addtocounter</span>&#123;cnt&#125;&#123;3&#125;<span class="hljs-keyword">\thecnt</span> <span class="hljs-comment">% add 3 to counter cnt and display it</span><br></code></pre></div></td></tr></table></figure><p> Note add an optional parameter like <code>\newcounter&#123;cnt&#125;[section]</code> will define a new counter <code>cnt</code>  which reset when counter <code>section</code> self-add.</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>刘海洋. 2013. <em>LaTeX 入门</em>.<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS LaTeX</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[READ] Chapter 2 Special Relativity and Extra Dimensions</title>
    <link href="/PHYS_string_theory/BOOK_a_first_course_in_string_theory/2021-05-10_READ_chapter_2_special_relativity_and_extra_dimensions/"/>
    <url>/PHYS_string_theory/BOOK_a_first_course_in_string_theory/2021-05-10_READ_chapter_2_special_relativity_and_extra_dimensions/</url>
    
    <content type="html"><![CDATA[<p>This essay is a reading notes of <em>A First Course in String Theory</em>, <em>Chapter 2 Special relativity and extra dimensions</em> <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Zwiebach, Barton. “A First Course in String Theory,” 2009">[1]</span></a></sup></p><span id="more"></span><h2 id="2-1-Units-and-parameters"><a href="#2-1-Units-and-parameters" class="headerlink" title="2.1 Units and parameters"></a>2.1 Units and parameters</h2><ul><li>Units: a fixed quantities that we use for purposses of reference (e.g.: time, length, mass)</li><li>unit of charge<ul><li>Gaussian unit (esu)<script type="math/tex; mode=display">  [\mathrm{esu}^{2}] = [\mathrm{N}\cdot \mathrm{m}^{2}]</script></li><li>SI unit (coulombs)</li></ul></li><li>dimensionful parameters and dimensionless parameters</li></ul><h2 id="2-2-Intervals-and-Lorentz-transformation"><a href="#2-2-Intervals-and-Lorentz-transformation" class="headerlink" title="2.2 Intervals and Lorentz transformation"></a>2.2 Intervals and Lorentz transformation</h2><ul><li>4-coordinate</li><li>interval (sign: $(+,-,-,-)$, so time-like means $\mathrm{d} s^2 &gt; 0$)<ul><li>finite</li><li>infinitesimal</li><li>Einstein’s summation convention</li></ul></li><li>metric<ul><li>lower indices</li><li>scalar product</li><li>inverse of $\eta_{\mu\nu}$</li></ul></li><li>Lorentz transformation and boost<ul><li>the corresponding matric transformation of coordinate transformation $x’^\mu = L^{\mu}_{~~~\nu} x^\nu$</li><li>determinant of $L$ ($\det L = \pm 1$)</li></ul></li><li>other types of Lorentz transformation (spatial rotation)</li><li>Lorentz vector<ul><li>timelike ($v^2 &lt; 0$), spacelike ($v^2 &gt; 0$), <em>null</em> ($v^2 = 0$)</li></ul></li></ul><h2 id="2-3-Light-cone-coordinates"><a href="#2-3-Light-cone-coordinates" class="headerlink" title="2.3 Light-cone coordinates"></a>2.3 Light-cone coordinates</h2><ul><li>usage: quantization of the relativistic string</li><li>$x^+$ and $x^-$:<ul><li>definition<script type="math/tex; mode=display">  \begin{align}      & x^+ \equiv \dfrac{1}{\sqrt{2}} (x^0 + x^1) \\      & x^- \equiv \dfrac{1}{\sqrt{2}} (x^0 - x^1).  \end{align}</script></li><li>property: for special light rays, light-cone time will freeze</li><li>index: $+, -, 2, 3$</li></ul></li><li>light-cone components of Lorentz vector</li><li>example: light-cone velocity</li><li>note: light-cone coordinate can’t be got from Lorentz transformation</li></ul><h2 id="2-4-Relativistic-energy-and-momentum"><a href="#2-4-Relativistic-energy-and-momentum" class="headerlink" title="2.4 Relativistic energy and momentum"></a>2.4 Relativistic energy and momentum</h2><ul><li>review of relativistic energy and momentum<script type="math/tex; mode=display">  \dfrac{E^{2}}{c^{2}} - \boldsymbol{p} \cdot \boldsymbol{p} = m^2 c^2</script>  there $m$, $c$ are both constant</li><li>4-momentum</li><li>proper time<ul><li>differential relation<script type="math/tex; mode=display">  \dfrac{\mathrm{d} t}{\mathrm{d} s} = \dfrac{\gamma}{c}</script></li></ul></li><li>4-velocity</li><li>relationship between 4-velocity and 4-momentum<script type="math/tex; mode=display">  p^\mu = m u^\mu</script></li></ul><h2 id="2-5-Light-cone-energy-and-momentum"><a href="#2-5-Light-cone-energy-and-momentum" class="headerlink" title="2.5 Light-cone energy and momentum"></a>2.5 Light-cone energy and momentum</h2><ul><li>$p^+$ and $p^-$</li><li>physical enengy in light-cone coordinate:<script type="math/tex; mode=display">  -p_+ = p^- = \frac{E_\mathrm{cl}}{c}</script></li></ul><h2 id="2-6-Lorentz-invariance-with-extral-dimensions"><a href="#2-6-Lorentz-invariance-with-extral-dimensions" class="headerlink" title="2.6 Lorentz invariance with extral dimensions"></a>2.6 Lorentz invariance with extral dimensions</h2><ul><li>5 spatial + 1 time: 10 rotations + 5 boosts</li></ul><h2 id="2-7-Compact-extra-dimensions"><a href="#2-7-Compact-extra-dimensions" class="headerlink" title="2.7 Compact extra dimensions"></a>2.7 Compact extra dimensions</h2><ul><li>identification turned a noncompact dimension into a compact one</li><li>fundamental domain</li><li>coordinate choose (in fact, one can choose any period function $f$ of distance $x$ as a new coordinate)</li><li>torus</li></ul><h2 id="2-8-Orbifolds"><a href="#2-8-Orbifolds" class="headerlink" title="2.8 Orbifolds"></a>2.8 Orbifolds</h2><ul><li>orbifold: a space obtained by identification that have fixed points<ul><li>example 1: $\mathbb{R}^1 / \mathbb{Z}_2$</li><li>example 2: $\mathbb{C} / \mathbb{Z}_N$</li></ul></li><li>Chapter 13: quantum strings on an orbifold</li></ul><h2 id="2-9-Quantum-mechanics-and-the-square-well"><a href="#2-9-Quantum-mechanics-and-the-square-well" class="headerlink" title="2.9 Quantum mechanics and the square well"></a>2.9 Quantum mechanics and the square well</h2><ul><li>plank constant</li><li>commutation relation of $x^i$ and $p_j$</li><li>Schrodinger equation with square well potential<ul><li>energy<script type="math/tex; mode=display">  E_k = \dfrac{\hbar^2}{2m} \left( \dfrac{k \pi}{a} \right)^{2}</script></li></ul></li></ul><h2 id="2-10-Square-well-with-an-extra-dimension"><a href="#2-10-Square-well-with-an-extra-dimension" class="headerlink" title="2.10 Square well with an extra dimension"></a>2.10 Square well with an extra dimension</h2><ul><li>Schrodinger equation with $(x, y) \sim (x, y+ 2 \pi R)$<ul><li>energy<script type="math/tex; mode=display">  E_{k, l} = \dfrac{\hbar^2}{2m} \left[ \left( \dfrac{k \pi}{a} \right)^{2} + \left( \dfrac{l}{R} \right)^{2} \right]</script></li><li>extra dimension hidden in high energy scale</li></ul></li><li>chapter 17: new low-lying states appears when dimension much smaller than string length $\mathscr{l}_\mathrm{s}$</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>Zwiebach, Barton. “A First Course in String Theory,” 2009<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>PHYS String Theory</category>
      
      <category>BOOK A First Course in String Theory</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHYS</tag>
      
      <tag>READ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TRICK] 插件 vimtex 中的 Text Objects</title>
    <link href="/CS_vim/2021-05-08_TRICK_text_objects_in_vimtex/"/>
    <url>/CS_vim/2021-05-08_TRICK_text_objects_in_vimtex/</url>
    
    <content type="html"><![CDATA[<p>本文记录了插件 <code>vimtex</code> 中定义的的文本对象 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label=":h vimtex.txt">[1]</span></a></sup></p><span id="more"></span><p><code>vimtex</code> 中的文本对象如下</p><ul><li><code>ic</code> <code>ac</code>: Commands</li><li><code>id</code> <code>ad</code>: Delimiters</li><li><code>ie</code> <code>ae</code>: LaTeX environments</li><li><code>i$</code> <code>a$</code>: Inline math structures</li><li><code>iP</code> <code>aP</code>: Sections</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><code>:h vimtex.txt</code><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS Vim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>TRICK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[READ] Chapter 1 A Brief Introduction</title>
    <link href="/PHYS_string_theory/BOOK_a_first_course_in_string_theory/2021-05-08_READ_chapter_1_introduction/"/>
    <url>/PHYS_string_theory/BOOK_a_first_course_in_string_theory/2021-05-08_READ_chapter_1_introduction/</url>
    
    <content type="html"><![CDATA[<blockquote><p>This essay is a reading notes of <em>A First Course in String Theory</em>, <em>Chapter 1 A brief introduction</em> <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Zwiebach, Barton. “A First Course in String Theory,” 2009">[1]</span></a></sup></p></blockquote><span id="more"></span><h2 id="1-1-The-road-to-unification"><a href="#1-1-The-road-to-unification" class="headerlink" title="1.1 The road to unification"></a>1.1 The road to unification</h2><ul><li>review of four basic forces</li><li>quantization of electric force, week force, strong force (include unification of electric and weekforce)</li><li>particles in <em>Standard Model (SM)</em> (60 types)<ul><li>bosons (12 types): force carriers, 8 (QCD) + 4 (QED)</li><li>fermions (48 types): matter particle, lepton (12) + quarks (36)</li></ul></li><li>problem of Standard Model<ul><li>does not include gravity</li><li>too many parameters (twenty)</li></ul></li></ul><h2 id="1-2-String-theory-as-a-unified-theory-of-physics"><a href="#1-2-String-theory-as-a-unified-theory-of-physics" class="headerlink" title="1.2 String theory as a unified theory of physics"></a>1.2 String theory as a unified theory of physics</h2><ul><li>view phoints of decay process $\alpha \to \beta + \gamma$ of string theory</li><li>only parameter in string theory: $\mathscr{l}_s$</li><li>spatial dimension of string theory: 26 for bosonic string, 10 for superstring</li><li>types of string (open, close, bosonic, superstring)</li><li>five ten-dimensional superstring and M-theory</li></ul><h2 id="1-3-String-theory-and-its-verification"><a href="#1-3-String-theory-and-its-verification" class="headerlink" title="1.3 String theory and its verification"></a>1.3 String theory and its verification</h2><ul><li>lenth scale of string: less than $10^{-16} \mathrm{cm}$ (ref: Plank scale $\mathscr{l}_p \sim 10^{-33} \mathrm{cm}$)</li><li>chapter 3: D-brane</li><li>chapter 7: cosmic string</li><li>supersymmetry</li><li>Standard Model can emerge from string theory</li><li>solution selection problems and the <em>landscape</em> of string theory</li><li>gravity from quantum vibrations of relativistic string</li></ul><h2 id="1-4-Developments-and-outlook"><a href="#1-4-Developments-and-outlook" class="headerlink" title="1.4 Developments and outlook"></a>1.4 Developments and outlook</h2><ul><li>use string theory to understand conventional problems<ul><li>Chapter 15: D-branes</li><li>Chapter 23: Ads/CFT</li></ul></li><li>black hole entropy and string theory (chapter 22)</li><li>inflation and string theory</li><li>string theory have no complete formulation (e.g., had no similar equations like Einstein’s gravity field equation in GR)</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>Zwiebach, Barton. “A First Course in String Theory,” 2009<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>PHYS String Theory</category>
      
      <category>BOOK A First Course in String Theory</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHYS</tag>
      
      <tag>READ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TRICK] Fluid 主题中的日期显示</title>
    <link href="/CS_Hexo/2021-05-06_TRICK_date_in_Fluid/"/>
    <url>/CS_Hexo/2021-05-06_TRICK_date_in_Fluid/</url>
    
    <content type="html"><![CDATA[<p>Fluid 主题的配置文件中有配置项 <code>post: date:</code>, 但这并不是控制日期的输入格式的, 而是控制输出格式的.</p><span id="more"></span><p>&emsp;&emsp;Fluid 主题的配置文件中有配置项 <code>post: date:</code>, 但这并不是控制日期的输入格式的, 而是控制输出格式的. 基本配置为</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">date:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 格式参照 ISO-8601 日期格式化</span><br>    <span class="hljs-comment"># See: http://momentjs.cn/docs/#/parsing/string-format/</span><br>    <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;YYYY.MM.DD, HH:mm&quot;</span><br></code></pre></div></td></tr></table></figure><p>如注释中所述, 日期格式化标准为 ISO-8601 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Moment.js 文档 (moment(String))">[1]</span></a></sup> . 要注意, 该设置 <strong>并不影响在 Front-matter 中的日期输入格式</strong>. 不论该设置如何改变, Front-matter 中的日期输入方式始终不变. 例如, 在 Front-matter 中写入</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">title: &#x27;[TRICK] Fluid 主题中的日期显示&#x27;<br>data: 2021-05-06 22:55<br></code></pre></div></td></tr></table></figure><p>则输出的日期形如 <code>2021.05.06, 22:54</code> (可参考本文标题下方的显示效果).</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="http://momentjs.cn/docs/#/parsing/string-format/">Moment.js 文档 (moment(String))</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>TRICK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[DEBUG] 运行 brew clean 时碰到权限问题</title>
    <link href="/CS_macOS/2021-05-06_DEBUG_brew_clean_permisson/"/>
    <url>/CS_macOS/2021-05-06_DEBUG_brew_clean_permisson/</url>
    
    <content type="html"><![CDATA[<p>之前执行 <code>brew cleanup</code> 时多次碰到权限问题, 这可通过参考这篇文章中的权限设置方式解决.</p><span id="more"></span><p>&emsp;&emsp;之前执行 <code>brew cleanup</code> 时多次碰到权限问题</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">brew cleanup: Error: Permission denied<br></code></pre></div></td></tr></table></figure><p>这可通过参考这篇文章 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="使用brew遇到的update和cleanup问题">[1]</span></a></sup> 中的权限设置方式解决. 不过个人感觉 <code>777</code> 权限有点大, 不知道有没有更合适的处理方法.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://blog.csdn.net/qq_40177015/article/details/111591809?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&amp;spm=1001.2101.3001.4242">使用brew遇到的update和cleanup问题</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS macOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>DEBUG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 CDN 为网站加速</title>
    <link href="/CS_Web/2021-05-06_cdn/"/>
    <url>/CS_Web/2021-05-06_cdn/</url>
    
    <content type="html"><![CDATA[<p>本文简要介绍了 CDN 的基本概念, 以及使用腾讯云 CDN 服务的基本配置流程.</p><span id="more"></span><h2 id="1-CDN-概述"><a href="#1-CDN-概述" class="headerlink" title="1 CDN 概述"></a>1 CDN 概述</h2><p>&emsp;&emsp;一般而言, 个人网站的服务器在带宽选择上基本是 1 到数 M. 换算成下载速度, 基本只有几百 Kb/s. 这还是总的下载速度, 如果考虑到多人同时访问网站, 速度只会更慢.</p><p>&emsp;&emsp;为了解决静态资源的访问速度问题, 可以考虑使用 CDN 进行加速. CDN 全称是 <em>内容分发网络 (Content Delivery Network)</em> <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="CDN是什么？使用CDN有什么优势？">[1]</span></a></sup> . 粗率来说, 其运行机制可以被理解为: 静态资源被复制到 CDN 的服务器, 用户访问静态资源时, 优先根据离其较近的服务器选择访问节点进行访问. 可见, 用户在访问资源时并不直接访问网站服务器. 因此不占用网站带宽, 且访问速度是由 CDN 服务器带宽来决定的. 另一面, CDN 在同带宽下相较服务器更为低廉, 因此是网站加速的首选技术. 此外, 对于纯静态的网站, 原则上连服务器都不需要, 直接采用 cos-cdn 方案即可 (Hexo 中有对应的插件 <code>hexo-deployer-cos-cdn</code> <sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="Hexo-deployer-cos-cdn 插件安装使用指南">[2]</span></a></sup> ).</p><h2 id="2-使用腾讯云的-CDN-服务"><a href="#2-使用腾讯云的-CDN-服务" class="headerlink" title="2 使用腾讯云的 CDN 服务"></a>2 使用腾讯云的 CDN 服务</h2><p>&emsp;&emsp;笔者使用的是腾讯云的 CDN 服务, 其配置方式有详细的参考文档 <sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="从零开始配置 CDN">[3]</span></a></sup> , 在此仅进行概述. 腾讯云的 CDN 服务是针对域名进行加速的, 在购买了 CDN 服务后, 受限要添加上需要加速的域名 <sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="接入域名">[4]</span></a></sup>, 之后可找到生成的 CDN 域名. 将该域名加入 DNS 列表 (这一步需要在自己的域名供应商处操作), 类型为 <code>CNAME</code>, 其意义是解析到域名.</p><h2 id="3-升级至-HTTPS"><a href="#3-升级至-HTTPS" class="headerlink" title="3 升级至 HTTPS"></a>3 升级至 HTTPS</h2><p>&emsp;&emsp;略. 这一步只需要在 CDN 服务中的控制台找到相应配置项并上传 HTTPS 证书即可, 整个过程比从头为服务器配置 HTTPS 更简单.</p><h2 id="4-其它注意事项"><a href="#4-其它注意事项" class="headerlink" title="4 其它注意事项"></a>4 其它注意事项</h2><h3 id="域名解析流程分析"><a href="#域名解析流程分析" class="headerlink" title="域名解析流程分析"></a>域名解析流程分析</h3><p>&emsp;&emsp;简单来说, 如果你在域名解析处将 <code>www.example.com</code> 设置为解析到 CDN 域名, 则访问时将先由该域名解析到对应 CDN 域名, 再由根据用户所处位置访问具体的某一个 CDN 服务器.</p><h3 id="检验域名解析结果"><a href="#检验域名解析结果" class="headerlink" title="检验域名解析结果"></a>检验域名解析结果</h3><p>&emsp;&emsp;可通过指令 <sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="配置 CNAME">[5]</span></a></sup></p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">nslookup -qt=cname &lt;domain_name&gt;<br></code></pre></div></td></tr></table></figure><p>查看域名解析情况. 如果 CDN 域名加速成功, 理论上结果会返回多个 IP. 如果域名解析对应的是服务器 IP, 则该指令会返回服务器 IP.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.zhihu.com/question/36514327/answer/1604554133">CDN是什么？使用CDN有什么优势？</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.lixl.cn/2020/020936412.html">Hexo-deployer-cos-cdn 插件安装使用指南</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://cloud.tencent.com/document/product/228/3149">从零开始配置 CDN</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://cloud.tencent.com/document/product/228/41215">接入域名</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://cloud.tencent.com/document/product/228/3121?from=information.detail.腾讯云cname配置">配置 CNAME</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[DEBUG] ERROR Deployer not found: git</title>
    <link href="/CS_Hexo/2021-05-04_DEBUG_deployer_not_found/"/>
    <url>/CS_Hexo/2021-05-04_DEBUG_deployer_not_found/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;今天上午在折腾完站内引用后, 发现运行 <code>hexo g -d</code> 后出现报错</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">ERROR Deployer not found: git<br></code></pre></div></td></tr></table></figure><p>经查阅 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="hexo d命令报错 ERROR Deployer not found: git">[1]</span></a></sup> 发现这是由于缺少 <code>hexo-deployer-git</code> 插件. 因此为解决此 Bug, 使用 <code>npm</code> 按照该插件即可</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">npm install hexo-deployer-git --save<br></code></pre></div></td></tr></table></figure><p>PS: 之前为了 debug 无法站内引用的问题, 新建了一个 Hexo 文件夹, 之后用这个文件夹中的 <code>node_modules/</code> 文件夹替换了旧 Hexo 文件夹中的 <code>node_modules/</code>. 看起来这个插件并不是 Hexo 自带的, 可能之前在第一次搭建 Hexo 博客时无意中已经装上了此插件, 所以才没有感觉.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://blog.csdn.net/qq_21808961/article/details/84476504">hexo d命令报错 ERROR Deployer not found: git</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>DEBUG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 Hexo 中引用站内文章</title>
    <link href="/CS_Hexo/2021-05-04_cite_local_post/"/>
    <url>/CS_Hexo/2021-05-04_cite_local_post/</url>
    
    <content type="html"><![CDATA[<h2 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1 基本使用"></a>1 基本使用</h2><p>&emsp;&emsp;Hexo 中使用 Tag 插件实现站内文章的引用. 基本格式为</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">&#123;% post<span class="hljs-emphasis">_link <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">path</span>&gt;</span></span> [title] %&#125;</span><br></code></pre></div></td></tr></table></figure><p>其中 <code>&lt;path&gt;</code> 是站内文章的路径 (无 <code>.md</code> 后缀名), 其是相对于 <code>$HEXO/source/_post</code> 的. 可选项 <code>[title]</code> 是最终渲染出的超链接显示的文字, 默认为文章标题. 例如, 文件 <code>hello_world.md</code> 位于 <code>_post/hello-world</code>, 引用它可通过</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> &#123;% post<span class="hljs-emphasis">_link hello-world %&#125;</span><br><span class="hljs-emphasis">- &#123;% post_</span>link hello-world 站内引用示例 %&#125;<br></code></pre></div></td></tr></table></figure><p>渲染结果为</p><ul><li><a href="/hello-world/" title="Hello World">Hello World</a></li><li><a href="/hello-world/" title="站内引用示例">站内引用示例</a></li></ul><p>实际撰写博客时, 笔者个人习惯在 <code>_post</code> 下按分类建立子文件夹, 此时可在 <code>&lt;path&gt;</code> 的位置加上子文件夹路径. 如我们有一篇文章位于</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">_post</span>/CS_Web/<span class="hljs-number">2021</span>-<span class="hljs-number">05</span>-<span class="hljs-number">04</span>_http_and_https<br></code></pre></div></td></tr></table></figure><p>引用时可采用</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> &#123;% post<span class="hljs-emphasis">_link CS_</span>Web/2021-05-04<span class="hljs-emphasis">_http_</span>and<span class="hljs-emphasis">_https %&#125;</span><br></code></pre></div></td></tr></table></figure><p>最终效果为</p><ul><li><a href="/CS_Web/2021-05-04_http_and_https/" title="什么是 HTTP 与 HTTPS 协议?">什么是 HTTP 与 HTTPS 协议?</a></li></ul><h2 id="2-文件名含空格"><a href="#2-文件名含空格" class="headerlink" title="2 文件名含空格"></a>2 文件名含空格</h2><p>&emsp;&emsp;原则上来说, 对于编程时可能会引用到的文件, 其路径中最好不要含有空格等特殊字符. 由于笔者在 Hexo 的写作中特别注意这一点, 目前还没有碰到这种情况. 对于这种情况, 文章 “<a href="https://blog.jijian.link/2020-01-08/hexo-anchor-link/">hexo 链接到站内文章指定锚点</a>“ 中给出了一个例子, 这里文件为 <code>_post/hexo blog.md</code></p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">&#123;% post<span class="hljs-emphasis">_link &#x27;hexo blog&#x27; %&#125;</span><br></code></pre></div></td></tr></table></figure><p>亦即可尝试通过加上单引号来实现引用.</p><h2 id="3-Debug"><a href="#3-Debug" class="headerlink" title="3 Debug"></a>3 Debug</h2><h3 id="无法引用子目录中的文件"><a href="#无法引用子目录中的文件" class="headerlink" title="无法引用子目录中的文件"></a>无法引用子目录中的文件</h3><p>&emsp;&emsp;今早在尝试该功能时, 发现无法引用 <code>_post</code> 的子目录下的文件, 并在本应出现超链接的位置一直显示 <code>Post not found</code>. 通过一番测试, 发现了两个原因.</p><p>&emsp;&emsp;第一个是之前笔者作死把 <code>_config.yml</code> 中的 <code>new_post_name</code> 选项进行了修改</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># modified</span><br><span class="hljs-attr">new_post_name:</span> <span class="hljs-string">:year-:month-:day_:title.md</span> <span class="hljs-comment"># File name of new posts</span><br><br><span class="hljs-comment"># original</span><br><span class="hljs-attr">new_post_name:</span> <span class="hljs-string">:title.md</span> <span class="hljs-comment"># File name of new posts</span><br></code></pre></div></td></tr></table></figure><p>将内容从 <code>modified</code> 中的调整回默认的 <code>original</code> 中的后, 才可正确引用.</p><p>&emsp;&emsp;第二个原因至今不明确. 笔者在 debug 时在空文件夹 (不妨以 <code>$HEXO_NEW</code> 表示) 中重新使用 <code>hexo init</code> 以及安装主题后, 采用相同的配置文件可以正常进行站内引用. 但之前的博客文件夹 (不妨以 <code>$HEXO</code> 表示) 中死活无法正确引用. 后将 <code>$HEXO/node_modules</code> 文件夹以 <code>$HEXO_NEW/node_modules</code> 替换后, 站内引用回复正常. 个人猜测可能是昨天调试模块时把什么弄炸了… 所以如果你在检查完第一步后仍无法修复 bug, 可以尝试重装 Hexo.</p><p>&emsp;&emsp;最后提一下怀疑是该 bug 产生原因, 但事实证明无关的因素:</p><ul><li>Fluid 插件: 装上插件后可正常引用</li><li>Asset 文件夹: 无论是否开启, 无论 <code>marked: prependRoot:</code> 与 <code>marked: postAsset</code> 如何设置, 都不影响站内引用.</li></ul>]]></content>
    
    
    <categories>
      
      <category>CS Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>什么是 HTTP 与 HTTPS 协议?</title>
    <link href="/CS_Web/2021-05-04_http_and_https/"/>
    <url>/CS_Web/2021-05-04_http_and_https/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;简单来说, HTTP 与 HTTPS <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="HTTP和HTTPS有什么区别？">[1]</span></a></sup> 都是是通信协议. 但二者最大的区别在于, HTTP 是通过明文进行数据传输, 而 HTTPS 在传输过程中进行加密 (通过 SSL/TLS 协议). 试想这样一个过程: 在数据传输途中, 其被第三方进行了截获. 如果是采用的 HTTP 协议, 则截获者可以直接读懂传输的数据; 但如果采用的是 HTTPS 协议, 截获者必须找到正确的破译方法才能读懂其中的数据. 由此可见, 为了网站数据通信的安全性—-特别是设计密码输入时, 采用 HTTPS 协议很有必要.</p><p>&emsp;&emsp;那么如何区分自己平时访问的网页是 HTTP 协议还是 HTTPS 协议呢? 设我们有一个名为 <code>11.11.11.11</code> 的公网 IP, 使用 HTTP 对其进行访问时, 基本格式为 </p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">11.11</span>.<span class="hljs-number">11.11</span><br></code></pre></div></td></tr></table></figure><p>而使用 HTTPS 协议进行访问时, 基本格式为 </p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span><span class="hljs-number">11.11</span>.<span class="hljs-number">11.11</span><br></code></pre></div></td></tr></table></figure><p>可见, 二者的区别在于域名前指定通信协议的字符.</p><p>&emsp;&emsp;另一方面, 现在的浏览器都会自动检测协议的安全性. 一般来说, 如果浏览器地址栏中提示 “Not Secure”, 则一般为 HTTP 协议; 如果有一个类似锁的图标 (或显示 “Secure” 等), 则一般为 HTTPS 协议. 此外, 采用 HTTP 协议时, 地址栏中一般不会把 <code>http://</code> 字段显示出来, 而采用 HTTPS 协议时,  <code>https://</code> 字段一般会被显示出来.</p><p><img src="http_1.png" alt="HTTP 协议: 浏览器提示 &quot;Not Secure&quot;" title="HTTP 协议: 浏览器提示 &quot;Not Secure&quot;"></p><p><img src="https_1.png" alt="HTTPS 协议: 无 &quot;Not Secure&quot; 提示" title="HTTP 协议: 无 &quot;Not Secure&quot; 提示"></p><p><img src="http_2.png" alt="HTTP 协议: 不显示通信协议" title="HTTP 协议: 不显示通信协议"></p><p><img src="https_2.png" alt="HTTPS 协议: 地址栏显示通信协议" title="HTTPS 协议: 地址栏显示通信协议"></p><p>&emsp;&emsp;由于 HTTPS 通常通过 SSL/TLS 协议, 因此开启 HTTPS 协议需要相应的证书. 不过现在这类证书一般都可以免费申请 (如笔者是直接在腾讯云申请的证书).</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/151764515">HTTP和HTTPS有什么区别？</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用腾讯云和 Hexo 搭建个人博客</title>
    <link href="/CS_Web/2021-05-03_build_blog_with_tencent_and_hexo/"/>
    <url>/CS_Web/2021-05-03_build_blog_with_tencent_and_hexo/</url>
    
    <content type="html"><![CDATA[<p><em>Macbook Air</em></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>&emsp;&emsp;基本思路 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="将hexo个人博客部署到个人云服务器—最详细踩坑教程">[1]</span></a></sup> 是在本地先进行 Hexo 的配置 (可参考我的这篇文章: <a href="/CS_Hexo/2021-05-02_hexo_quick_start/" title="Hexo 快速上手">Hexo 快速上手</a>) 后, 在远程服务器搭建远程 git 库. 每次 <code>deploy</code> 时, 通过 <code>hexo-deployer-git</code> 插件先将本地的 <code>hexo</code> 生成的 <code>public</code> 内容推送到服务器上的远程库, 再通过 <code>hook</code> 自动将远程库中的内容拉取到网站存储的目录. 其中远程服务器采用 <code>Nginx</code> <sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="8分钟带你深入浅出搞懂Nginx">[2]</span></a></sup></p><h2 id="1-云服务器的带宽选择"><a href="#1-云服务器的带宽选择" class="headerlink" title="1 云服务器的带宽选择"></a>1 云服务器的带宽选择</h2><p>&emsp;&emsp;带宽选择方面 <sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="云服务器1M的带宽到底多大？90%的网站够用了">[3]</span></a></sup>, 如果是静态博客, 通过 CDN 加速后可获得相当满意的访问速度, 因此一般来说不需要太大 (对于纯静态博客, 甚至可以只使用 <code>cos-cdn</code> 而不需要服务器! Hexo 有插件 <code>hexo-deployer-cos-cdn</code> 来辅助实现 <sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="Hexo-deployer-cos-cdn 插件安装使用指南">[4]</span></a></sup> ). 对于以静态资源小型博客, 配置 CDN 加速的情况下, 1M 量级的带宽就足够了. 笔者自己选用的是3M 带宽的腾讯云服务器.</p><h2 id="2-配置-Git-远程仓库"><a href="#2-配置-Git-远程仓库" class="headerlink" title="2 配置 Git 远程仓库"></a>2 配置 Git 远程仓库</h2><h3 id="1-新建用户"><a href="#1-新建用户" class="headerlink" title="(1) 新建用户"></a>(1) 新建用户</h3><p>&emsp;&emsp;习惯上最好不要直接使用 <code>root</code> 用户进行网站的文件管理, 而一般创建一个 <code>git</code> 用户来运行 <code>git</code> 服务 <sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="搭建Git服务器">[5]</span></a></sup> . Linux 中有两种创建用户的指令, <code>adduser</code> 和 <code>useradd</code> <sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="一天一点linux(18):adduser和useradd的区别">[6]</span></a></sup> . 这里我们使用</p><h3 id="2-Hook-设置"><a href="#2-Hook-设置" class="headerlink" title="(2) Hook 设置"></a>(2) Hook 设置</h3><p>&emsp;&emsp;进行 <code>deploy</code> 以后, <code>public</code> 中的文件并非直接上传到服务器上的目标文件夹 <code>/var/www</code> 中. 因此需要自动化工具将内容拉取到目标文件 </p><p>这期间可能会碰到因文件权限问题而无法正常运行 hook 的情况, 这时要记得修改拉取所涉及到的文件夹的权限, 使当前用户具有操作权限 <sup id="fnref:7" class="footnote-ref"><a href="#fn:7" rel="footnote"><span class="hint--top hint--rounded" aria-label="git钩子函数允许的权限目录记得设置为git组的权限">[7]</span></a></sup> .</p><h3 id="3-DEBUG-权限问题"><a href="#3-DEBUG-权限问题" class="headerlink" title="(3) DEBUG: 权限问题"></a>(3) DEBUG: 权限问题</h3><p>&emsp;&emsp;笔者在配置完远程仓库, 并在 <code>deploy</code> 设置好推送至的远程库地址 <code>repo</code> 后, 执行 <code>hexo g -d</code> 时发现出现 <code>unpack failed</code> 的错误 <sup id="fnref:8" class="footnote-ref"><a href="#fn:8" rel="footnote"><span class="hint--top hint--rounded" aria-label="【Git服务器】搭建Git服务器（源码安装）">[8]</span></a></sup> <sup id="fnref:9" class="footnote-ref"><a href="#fn:9" rel="footnote"><span class="hint--top hint--rounded" aria-label="【Git学习】解决git push操作的时候出错，提示 error: unpack failed: unable to create temporary object directory">[9]</span></a></sup>. 经排查, 该问题的出现不在于 <code>hexo</code>, 而是由于笔者登录帐号是使用的 <code>git</code>, 其不具有将文件写入远程库的权限. 使用指令 <code>chmod</code> 修改远程库权限后, 该 bug 被消除.</p><h2 id="3-启用-HTTPS"><a href="#3-启用-HTTPS" class="headerlink" title="3 启用 HTTPS"></a>3 启用 HTTPS</h2><p>&emsp;&emsp;关于 HTTP/HTTPS 协议的简介可以参考我的这篇博客: <a href="/CS_Web/2021-05-04_http_and_https/" title="什么是 HTTP 与 HTTPS 协议?">什么是 HTTP 与 HTTPS 协议?</a></p><h3 id="1-获取-SSL-证书"><a href="#1-获取-SSL-证书" class="headerlink" title="(1) 获取 SSL 证书"></a>(1) 获取 SSL 证书</h3><p>&emsp;&emsp;笔者自己是选用的腾讯云的服务器, 所以为了部署方便, 也是在腾讯云上申请的 SSL 证书. 对于域名型 (DV) 证书, 可免费进行申请 <sup id="fnref:10" class="footnote-ref"><a href="#fn:10" rel="footnote"><span class="hint--top hint--rounded" aria-label="域名型（DV）免费 SSL 证书申请流程">[10]</span></a></sup></p><h3 id="2-为-Nginx-服务器进行配置"><a href="#2-为-Nginx-服务器进行配置" class="headerlink" title="(2) 为 Nginx 服务器进行配置"></a>(2) 为 Nginx 服务器进行配置</h3><p>&emsp;&emsp;配置方式可参考文章 <sup id="fnref:11" class="footnote-ref"><a href="#fn:11" rel="footnote"><span class="hint--top hint--rounded" aria-label="hexo 博客开启 https (SSL 证书)">[11]</span></a></sup> . 要注意, 文中提到的配置文件 <code>/etc/nginx/nginx.conf</code> 可能默认并不存在, 需要自己手动创建. 另外可通过 <code>nginx -t</code> 指令来查看配置文件的位置.</p><p>&emsp;&emsp;另一面, 该文中强制全局 HTTPS 是采用在 <code>listen 80</code> 的 <code>server</code> 中添加语句 (自己操作时记得把域名字段改为自己的域名)</p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span> default_server;<br><span class="hljs-attribute">listen</span>       [::]:<span class="hljs-number">80</span> default_server;<br><span class="hljs-attribute">server_name</span>  staunchkai.com;<br><span class="hljs-attribute">root</span>         /home/hexo;<br><br><span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^(.*)</span> https://staunchkai.com<span class="hljs-variable">$1</span> <span class="hljs-literal">permanent</span>;   <span class="hljs-comment"># 添加的语句</span><br></code></pre></div></td></tr></table></figure><p>从字面上看, 应该是强制将用户在地址栏输入的内容加上 <code>https://</code> 后重新进行解析. 但如果你使用了 CDN 服务 (如腾讯云等), 可能会导致反复进入 CDN 域名而非进入服务器域名 (造成 “递归访问”), 从而 <strong>导致网站无法通过 CDN 域名访问</strong>. 因此, 如果采用了 CDN 服务, 请在 CDN 服务供应商处启用 HTTPS (往往比这里的操作更简单).</p><h2 id="4-启用-SSH-密钥"><a href="#4-启用-SSH-密钥" class="headerlink" title="4 启用 SSH 密钥*"></a>4 启用 SSH 密钥*</h2><p>&emsp;&emsp;一般进入服务器时可以通过输入帐号密码来实现. 但在每次推送时, 如果都要输入密码, 未免有些麻烦. 为实现免密登录及推送, 可考虑使用密钥.</p><h2 id="5-CC-知识共享-协议"><a href="#5-CC-知识共享-协议" class="headerlink" title="5 CC (知识共享) 协议"></a>5 CC (知识共享) 协议</h2><p>&emsp;&emsp;一般写博客时会附加上一定的版权声明, 通常采用 CC (Creat Commons, 知识共享) 协议. CC 协议下有不同的类型, 如本站博客默认采用的 <code>CC BY-NC-SA</code> 就相当于声明了署名, 非商业, 传递时保持一致性. 对于 CC 协议的详细介绍可参考这篇文章 <sup id="fnref:12" class="footnote-ref"><a href="#fn:12" rel="footnote"><span class="hint--top hint--rounded" aria-label="“知识共享”（CC协议）简单介绍">[12]</span></a></sup>.</p><h2 id="6-备案"><a href="#6-备案" class="headerlink" title="6 备案"></a>6 备案</h2><p>&emsp;&emsp;个人网站除了进行 ICP 备案外还要进行公安备案 <sup id="fnref:13" class="footnote-ref"><a href="#fn:13" rel="footnote"><span class="hint--top hint--rounded" aria-label="个人网站域名备案之后,需不需要到公安局备案?">[13]</span></a></sup>. 备案过程中会遇到 “前置许可” 一项, 对于不涉及没涉及新闻、出版、教育、尾声、药监、文化、广电等的一般博客而言是不需要勾选的, 一般只有大型企业的网站才会涉及前置审批, 且勾选后要上传相关审批文件 <sup id="fnref:14" class="footnote-ref"><a href="#fn:14" rel="footnote"><span class="hint--top hint--rounded" aria-label="公安备案不通过是怎么回事?公安备案通不过怎么办?">[14]</span></a></sup>.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/120743882">将hexo个人博客部署到个人云服务器—最详细踩坑教程</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/34943332">8分钟带你深入浅出搞懂Nginx</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/359335446">云服务器1M的带宽到底多大？90%的网站够用了</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://www.lixl.cn/2020/020936412.html">Hexo-deployer-cos-cdn 插件安装使用指南</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://www.liaoxuefeng.com/wiki/896043488029600/899998870925664">搭建Git服务器</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span><a href="https://segmentfault.com/a/1190000007316406">一天一点linux(18):adduser和useradd的区别</a><a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span><a href="https://blog.csdn.net/weixin_34342992/article/details/91874625">git钩子函数允许的权限目录记得设置为git组的权限</a><a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:8" class="footnote-text"><span><a href="https://hexo.wwxiong.com/hexo_blog/2018/01/03/2018/2018-01-03-git-server-install/">【Git服务器】搭建Git服务器（源码安装）</a><a href="#fnref:8" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:9" class="footnote-text"><span><a href="https://blog.csdn.net/ouyang_peng/article/details/81431208">【Git学习】解决git push操作的时候出错，提示 error: unpack failed: unable to create temporary object directory</a><a href="#fnref:9" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:10" class="footnote-text"><span><a href="https://cloud.tencent.com/document/product/400/6814">域名型（DV）免费 SSL 证书申请流程</a><a href="#fnref:10" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:11" class="footnote-text"><span><a href="https://blog.csdn.net/StaunchKai/article/details/82901437">hexo 博客开启 https (SSL 证书)</a><a href="#fnref:11" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:12" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/20641764">“知识共享”（CC协议）简单介绍</a><a href="#fnref:12" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:13" class="footnote-text"><span><a href="https://www.zhihu.com/question/22891465">个人网站域名备案之后,需不需要到公安局备案?</a><a href="#fnref:13" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:14" class="footnote-text"><span><a href="https://www.chaicp.com/list/442.html">公安备案不通过是怎么回事?公安备案通不过怎么办?</a><a href="#fnref:14" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>TODO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过 Fluid 主题为 Hexo 博客添加评论功能及站点统计</title>
    <link href="/CS_Hexo/2021-05-03_add_comment_with_fluid/"/>
    <url>/CS_Hexo/2021-05-03_add_comment_with_fluid/</url>
    
    <content type="html"><![CDATA[<h2 id="1-在主题配置文件中开启评论"><a href="#1-在主题配置文件中开启评论" class="headerlink" title="1 在主题配置文件中开启评论"></a>1 在主题配置文件中开启评论</h2><p>&emsp;&emsp;首先在主题的 <code>post</code> 选项下开启主题并选择想启用的评论插件 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Fluid: 评论">[1]</span></a></sup> . 在 <code>_config.fluid.yml</code> 下设置</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">comments:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">valine</span><br></code></pre></div></td></tr></table></figure><p>由于本博客搭建时采用的是 <code>Valine</code> <sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="Valine Docs">[2]</span></a></sup>, 这里也以 <code>Valine</code> 为例. 在 <code>type</code> 中支持的类型请查看官方参考文档 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Fluid: 评论">[1]</span></a></sup> . 这里笔者个人比较青睐于 Valine, 主要原因如下:</p><ol><li>轻量级, 简洁</li><li>其是基于 LeanCloud <sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="LeanCloud">[3]</span></a></sup> 的, 而配置站点访问统计时同样可以使用 LeanCloud </li><li>后续有一个名为 <code>Waline</code> <sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="Waline">[4]</span></a></sup> 的评论系统. 其实基于 <code>Valine</code> 的, 但增加了后端. 如果想要评论系统具备后端, 从 <code>Valine</code> 到 <code>Waline</code> 的转换会比较顺畅,  <code>Waline</code> 的官方文档也提供了<a href="https://waline.js.org/migration.html#迁移至-cloudbase">迁移指南</a> .</li></ol><h2 id="2-通过-Valine-开启评论功能"><a href="#2-通过-Valine-开启评论功能" class="headerlink" title="2 通过 Valine 开启评论功能"></a>2 通过 Valine 开启评论功能</h2><p>&emsp;&emsp;在进行了上一节的基本设置以后, 下面介绍如何 (借助 <code>Fluid</code>) 开始使用 Valine <sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="Valine: 快速开始">[5]</span></a></sup> . </p><h3 id="第一步-注册-LeanCloud-帐号"><a href="#第一步-注册-LeanCloud-帐号" class="headerlink" title="第一步: 注册 LeanCloud 帐号"></a>第一步: 注册 <code>LeanCloud</code> 帐号</h3><p>&emsp;&emsp;首先要注册一个 <code>LeanCloud</code> <sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="LeanCloud">[3]</span></a></sup> 帐号, 进入进入控制台后点击左下角创建应用 (应用名按自己喜好起即可, 笔者直接起的是 <code>Valine</code>)</p><p><img src="create_app.jpg" alt="创建应用" title="创建应用"></p><p>之后进入刚刚创建的应用, 选择左下角的 <code>设置</code> -&gt; <code>应用Key</code>, 即可看到 ID 及Key</p><p><img src="app_key.jpg" alt="查看应用 ID 及 Key" title="查看应用 ID 及 Key"></p><h3 id="第二步-将新应用信息写入-Fluid-的配置文件"><a href="#第二步-将新应用信息写入-Fluid-的配置文件" class="headerlink" title="第二步: 将新应用信息写入 Fluid 的配置文件"></a>第二步: 将新应用信息写入 Fluid 的配置文件</h3><p>&emsp;&emsp;首先在 <code>_config.fluid.yml</code> (理论上原始配置源于 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">hexo-theme-fluid/_config.yml</a>. 关于评论插件的配置方式详见下一节) 中搜索 <code>valine:</code>, 按照上一步获得的信息填写好 <code>appid</code>, <code>appkey</code>, <code>serverURLs</code> 即可.</p><h3 id="第三部-重启并生成评论界面"><a href="#第三部-重启并生成评论界面" class="headerlink" title="第三部: 重启并生成评论界面"></a>第三部: 重启并生成评论界面</h3><p>&emsp;&emsp;重启 Hexo 后即可.</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment"># local</span><br>$ hexo clean &amp;&amp; hexo s <span class="hljs-comment"># local</span><br><br><span class="hljs-comment"># deploy to server</span><br>$ hexo clean &amp;&amp; hexo g -d<br></code></pre></div></td></tr></table></figure><h2 id="3-配置插件选项"><a href="#3-配置插件选项" class="headerlink" title="3 配置插件选项"></a>3 配置插件选项</h2><p>&emsp;&emsp;插件选项同样在 <code>_config.fluid.yml</code> 中进行配置, 不同插件的可选项详见 Fluid 官方参考文档的相关连接 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Fluid: 评论">[1]</span></a></sup>. 值得注意的是, 评论插件的可选项是 <strong>一级选项</strong>, 亦即是与 <code>post</code> 等同级的选项. 另外, 在官方配置文件靠末尾的地方, 已经给出了相应插件的基本配置信息, 因此 <strong>不必自己新建立插件选项</strong>. 如在原始的 <code>config.fluid.yml</code> (亦即 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">hexo-theme-fluid/_config.yml</a>) 中搜索 <code>valine:</code>, 将会找到</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># Valine</span><br><span class="hljs-comment"># 基于 LeanCloud</span><br><span class="hljs-comment"># Based on LeanCloud</span><br><span class="hljs-comment"># See: https://valine.js.org/configuration.html</span><br><span class="hljs-attr">valine:</span><br>  <span class="hljs-attr">appid:</span><br>  <span class="hljs-attr">appkey:</span><br>  <span class="hljs-attr">placeholder:</span> <span class="hljs-string">说点什么</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">retro</span><br>  <span class="hljs-attr">meta:</span> [<span class="hljs-string">&#x27;nick&#x27;</span>, <span class="hljs-string">&#x27;mail&#x27;</span>, <span class="hljs-string">&#x27;link&#x27;</span>]<br>  <span class="hljs-attr">pageSize:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">lang:</span> <span class="hljs-string">zh-CN</span><br>  <span class="hljs-attr">highlight:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">recordIP:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">serverURLs:</span><br></code></pre></div></td></tr></table></figure><p>插件 <code>Valine</code> 支持的选项可参考: <a href="https://valine.js.org/configuration.html#visitor">Valine: 配置项</a>.</p><h2 id="4-开启站点统计"><a href="#4-开启站点统计" class="headerlink" title="4 开启站点统计"></a>4 开启站点统计</h2><p>&emsp;&emsp;作为站主, 当然会想知道自己的网站的访问情况. 站点统计分为两类, 一类是网站的总访问量与访客数, 另一类是单篇文章的浏览量, 下面分别介绍.</p><h3 id="开启-PV-与-UV-统计"><a href="#开启-PV-与-UV-统计" class="headerlink" title="开启 PV 与 UV 统计"></a>开启 PV 与 UV 统计</h3><p>&emsp;&emsp;Fluid 目前支持两种方式进行 PV 与 UV 统计 <code>LeanCloud</code> 与<a href="http://busuanzi.ibruce.info">不蒜子</a>. 由于前面在使用 <code>Valine</code> 时已经注册过<code>LeanCloud</code> 了. 为了方便, 笔者在  PV 与 UV 统计上同样是通过 <code>LeanCloud</code> 的方式.  第一步要在 <code>_config.fluid.yml</code> 中开启统计并设置使用的工具</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">web_analytics:</span> <span class="hljs-comment"># 网页访问统计</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 默认为false，启用网页统计改为true即可</span><br>  <span class="hljs-attr">leancloud:</span><br>    <span class="hljs-attr">app_id:</span>     <span class="hljs-comment"># 可用之前 Valine 所用的 id</span><br>    <span class="hljs-attr">app_key:</span>    <span class="hljs-comment"># 可用之前 Valine 所用的 key</span><br>    <span class="hljs-attr">server_url:</span> <span class="hljs-comment"># 可用之前 Valine 所用的 url</span><br></code></pre></div></td></tr></table></figure><p>第二步设置统计的显示形式</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">footer:</span><br>  <span class="hljs-attr">statistics:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;busuanzi&quot;</span>           <span class="hljs-comment"># 可选 leancloud | busuanzi  根据自己需求选择</span><br>    <span class="hljs-attr">pv_format:</span> <span class="hljs-string">&quot;总访问量 &#123;&#125; 次&quot;</span>  <span class="hljs-comment"># 显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同</span><br>    <span class="hljs-attr">uv_format:</span> <span class="hljs-string">&quot;总访客数 &#123;&#125; 人&quot;</span><br></code></pre></div></td></tr></table></figure><p>最终将在网页底部显示访问信息</p><p><img src="PV_UV.png" alt="网站总访客数与访问人次" title="网站总访客数与访问人次"></p><h3 id="文章浏览量"><a href="#文章浏览量" class="headerlink" title="文章浏览量"></a>文章浏览量</h3><p>&emsp;&emsp;经过之前对 <code>web_analytics</code> 的配置后, 文章阅读数的功能可直接在 <code>_config.fluid.yma</code> 的 <code>post</code> 中开启 <sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="Fluid: 日期/字数/阅读时长/阅读数">[6]</span></a></sup></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">meta:</span><br>    <span class="hljs-attr">views:</span>  <span class="hljs-comment"># 阅读次数</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;leancloud&quot;</span>  <span class="hljs-comment"># 统计数据来源，可选：leancloud | busuanzi</span><br>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;&#123;&#125; 次&quot;</span><br></code></pre></div></td></tr></table></figure><p>效果如下</p><p><img src="page_view.png" alt="文章浏览量" title="文章浏览量"></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://hexo.fluid-dev.com/docs/guide/#评论">Fluid: 评论</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://valine.js.org">Valine Docs</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://www.leancloud.cn">LeanCloud</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://waline.js.org">Waline</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://valine.js.org/quickstart.html">Valine: 快速开始</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span><a href="https://hexo.fluid-dev.com/docs/guide/#日期-字数-阅读时长-阅读数">Fluid: 日期/字数/阅读时长/阅读数</a><a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TRICK] Hexo 中的草稿</title>
    <link href="/CS_Hexo/2021-05-06_TRICK_drafts_in_Hexo/"/>
    <url>/CS_Hexo/2021-05-06_TRICK_drafts_in_Hexo/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;Hexo 中 <code>source</code> 文件夹下的特殊文件夹除了 <code>_posts</code> 以外还有 <code>_drafts</code>. 其中的内容在通常的 <code>hexo g</code>, <code>hexo s</code> 指令下并不会被渲染, 只有加上参数 <code>--draft</code> 才会被渲染并在网页中显示.</p><span id="more"></span><p>&emsp;&emsp;Hexo 中 <code>source</code> 文件夹下的特殊文件夹除了 <code>_posts</code> 以外还有 <code>_drafts</code>. 其中的内容在通常的 <code>hexo g</code>, <code>hexo s</code> 指令下并不会被渲染, 只有加上参数 <code>--draft</code> 才会被渲染并在网页中显示. 如</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">hexo s --draft<br>hexo g --draft<br></code></pre></div></td></tr></table></figure><p>利用该特性, 可以避免作为草稿的文章被发布到网站上.</p><p>&emsp;&emsp;Hexo 实际上提供了更丰富的 <code>hexo publish</code> 指令等来辅助进行草稿的发布 (详见官方参考文档 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://hexo.io/zh-cn/docs/writing#草稿">[1]</span></a></sup>), 不过笔者并不太喜欢这种范式. 相较而言, 我更青睐于给未完成的文章打上 <code>TODO</code> 的 tag.</p><p>test</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://hexo.io/zh-cn/docs/writing#草稿">https://hexo.io/zh-cn/docs/writing#草稿</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>TRICK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 Hexo 的 Fluid 主题中使用 LaTeX 公式</title>
    <link href="/CS_Hexo/2021-05-03_hexo_with_LaTeX/"/>
    <url>/CS_Hexo/2021-05-03_hexo_with_LaTeX/</url>
    
    <content type="html"><![CDATA[<h2 id="1-在-Fluid-主题中开启数学公式"><a href="#1-在-Fluid-主题中开启数学公式" class="headerlink" title="1 在 Fluid 主题中开启数学公式"></a>1 在 Fluid 主题中开启数学公式</h2><p>&emsp;&emsp;Hexo 主题 Fluid 中提供了数学公式支持 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="LaTeX 数学公式">[1]</span></a></sup>, 主要流程分为如下几步</p><ol><li><strong>在主题配置文件中开启数学公式:</strong> 这需要在 Fluid 主题的配置文件 <code>_config.fluid.yml</code> 中进行配置 (摘录于主题默认配置文件 <sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="hexo-theme-fluid/_config.yml">[2]</span></a></sup>) <figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br><span class="hljs-attr">math:</span><br>    <span class="hljs-comment"># 开启后文章默认可用，自定义页面如需使用，需在 Front-matter 中指定 `math: true`</span><br>    <span class="hljs-comment"># If you want to use math on the custom page, you need to set `math: true` in Front-matter</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 开启后，只有在文章 Front-matter 里指定 `math: true` 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度</span><br>    <span class="hljs-comment"># If true, only set `math: true` in Front-matter will enable math, to load faster when the page does not contain math</span><br>    <span class="hljs-attr">specific:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># Options: mathjax | katex</span><br>    <span class="hljs-attr">engine:</span> <span class="hljs-string">mathjax</span><br></code></pre></div></td></tr></table></figure> 关于 mathjax 与 katex 引擎的比较见 Fluid 主题的参考文档 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="LaTeX 数学公式">[1]</span></a></sup>.</li><li><strong>更换 Markdown 渲染器:</strong> 第一步先卸载默认渲染器 <figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">npm uninstall hexo-renderer-marked --save<br></code></pre></div></td></tr></table></figure> 第二步根据需要安装如下两个渲染器<strong>之一</strong> (<strong>不能同时存在两个渲染器!</strong>)<ul><li>使用 mathjax 渲染:  <figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">npm install hexo-renderer-kramed --save<br></code></pre></div></td></tr></table></figure></li><li>使用 katex 渲染:  <figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">npm install @upupming/hexo-renderer-markdown-it-plus --save<br></code></pre></div></td></tr></table></figure></li></ul></li></ol><h2 id="2-解决-mathjax-无法渲染行间公式的问题"><a href="#2-解决-mathjax-无法渲染行间公式的问题" class="headerlink" title="2 解决 mathjax 无法渲染行间公式的问题"></a>2 解决 mathjax 无法渲染行间公式的问题</h2><p>&emsp;&emsp;在按照上面步骤中执行操作后, 如果使用 mathjax 进行渲染, 可能会发现通过通常的诸如 <script type="math/tex">F = ma</script> 的的行内公式无法渲染的问题. 经调查, 这是由 markdown 渲染时转义字符的设置引起的 <sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="在Hexo中渲染MathJax数学公式">[3]</span></a></sup>. 目前笔者仅配置过 mathjax 的渲染, 如果使用 katex 渲染时同样出现此问题, 或可考虑一下是否同样存在转义字符的问题.</p><p>&emsp;&emsp;解决方式是调整插件 <code>kramed</code> 中关于行间的字符转义配置. 以 <code>$HEXO</code> 代表 Hexo 博客的根目录, (比如说配置 Hexo 的配置文件就应该在 <code>$HEXO/_config.ylm</code>). 打开文件 <code>$HEXO/node_modules\kramed\lib\rules\inline.js</code>, 取消 <code>\,&#123;,&#125;</code> 的转义. 具体而言, 分下面两步进行修改 <sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="在Hexo中渲染MathJax数学公式">[3]</span></a></sup> :</p><ol><li>修改的 <code>escape</code> 变量值 (在第 11 行左右): <figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//  escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/,</span><br><span class="hljs-built_in">escape</span>: <span class="hljs-regexp">/^\\([`*\[\]()#$+\-.!_&gt;])/</span><br></code></pre></div></td></tr></table></figure></li><li>修改 <code>em</code> 变量值 (在第 20 行左右): <figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//  em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br>em: <span class="hljs-regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span> <br></code></pre></div></td></tr></table></figure></li></ol><h2 id="3-公式使用"><a href="#3-公式使用" class="headerlink" title="3 公式使用"></a>3 公式使用</h2><p>&emsp;&emsp;经过上述配置后理论上就可以按照通常的 Markdown 中的 LaTeX 公式语法来输入公式了. 如:</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 行内公式 (一对单美元符号): $F = ma$<br><span class="hljs-bullet">-</span> 行间公式 (一对双美元符号):<br><span class="hljs-code">    $$</span><br><span class="hljs-code">    G_&#123;\mu\nu&#125; = R_&#123;\mu\nu&#125; - \dfrac&#123;1&#125;&#123;2&#125; R g_&#123;\mu\nu&#125; = 8 \pi T_&#123;\mu\nu&#125;</span><br><span class="hljs-code">    $$</span><br></code></pre></div></td></tr></table></figure><p>效果为:</p><ul><li>行内公式 (一对单美元符号): $F = ma$</li><li>行间公式 (一对双美元符号):<script type="math/tex; mode=display">  G_{\mu\nu} = R_{\mu\nu} - \dfrac{1}{2} R g_{\mu\nu} = 8 \pi G T_{\mu\nu}</script></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://hexo.fluid-dev.com/docs/guide/#latex-数学公式">LaTeX 数学公式</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">hexo-theme-fluid/_config.yml</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://www.jianshu.com/p/7ab21c7f0674">在Hexo中渲染MathJax数学公式</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown 语法速查</title>
    <link href="/CS_Web/2021-05-02_markdown_syntax_ref/"/>
    <url>/CS_Web/2021-05-02_markdown_syntax_ref/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;本文并不打算全面地介绍 Markdown, 主要致力于记录一些次常用的 Markdown 语法以备使用.</p><h2 id="图片及超链接"><a href="#图片及超链接" class="headerlink" title="图片及超链接"></a>图片及超链接</h2><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">![<span class="hljs-string">fig name</span>](<span class="hljs-link">path &quot;alt name&quot;</span>)<br>[<span class="hljs-string">link display</span>](<span class="hljs-link">link</span>)<br></code></pre></div></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><h3 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h3><p>&emsp;&emsp;表格基本格式为 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Markdown 表格">[1]</span></a></sup></p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">| item 1 | item 2 |<br>|--------|--------|<br>| cell   | cell   |<br>| cell   | cell   |<br></code></pre></div></td></tr></table></figure><p>注意<em>如果处于同一缩进级, 表格与前面的文字部分要空一行</em>. 其中可在表头与内容的分割线处通过 <code>:-</code>, <code>-:</code>, <code>:-:</code> 指定对齐方式, 如:</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">| left | right | center |<br>|:-----|------:|:------:|<br>| cell | cell  | cell   |<br>| cell | cell  | cell   |<br></code></pre></div></td></tr></table></figure><p>如 Vim 等文本编辑器通常提供有辅助源代码对齐的插件. 对于 Vim 插件 <code>plasticboy/vim-markdown</code> <sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="plasticboy/vim-markdown">[2]</span></a></sup>, 其提供了对齐表格的指令 <code>:TableFormat</code>, 笔者将其设为了 NORMAL 模式下的快捷键 <code>&lt;localleader&gt;la</code>.</p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><div class="table-container"><table><thead><tr><th>item 1</th><th>item 2</th></tr></thead><tbody><tr><td>cell</td><td>cell</td></tr><tr><td>cell</td><td>cell</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:left">left</th><th style="text-align:right">right</th><th style="text-align:center">center</th></tr></thead><tbody><tr><td style="text-align:left">cell</td><td style="text-align:right">cell</td><td style="text-align:center">cell</td></tr><tr><td style="text-align:left">cell</td><td style="text-align:right">cell</td><td style="text-align:center">cell</td></tr></tbody></table></div><h2 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h2><p>&emsp;&emsp;之前 (2021.04.30) 从 macOS 的 <em>Note</em> 中复制复选框列表到 Markdown 源文件时, 意外地发现列表开头自动变为了诸如 <code>[x]</code>, <code>[]</code> 的形式, 这才意识到部分 Markdown 或许也支持复选框 <sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="Markdown 复选框 (todo list)">[3]</span></a></sup>.</p><h3 id="Syntax-1"><a href="#Syntax-1" class="headerlink" title="Syntax"></a>Syntax</h3><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">[x] A<br>[ ] B<br><span class="hljs-bullet">-</span> [x] 已选中<br><span class="hljs-bullet">-</span> [ ] 未选中<br></code></pre></div></td></tr></table></figure><p>应注意 “未选中” 框中间有一个空格. (由于本网站的 Markdown 渲染器尚未部署该功能, 故这里不给出效果预览)</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.runoob.com/markdown/md-table.html">Markdown 表格</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://github.com/plasticboy/vim-markdown">plasticboy/vim-markdown</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="http://amwiki.org/doc/?file=020-教程学习篇/005-学习markdown/12-Markdown复选框">Markdown 复选框 (todo list)</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TODO</tag>
      
      <tag>syntax</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 快速上手</title>
    <link href="/CS_Hexo/2021-05-02_hexo_quick_start/"/>
    <url>/CS_Hexo/2021-05-02_hexo_quick_start/</url>
    
    <content type="html"><![CDATA[<p>本文绝大部分内容参考自 Hexo 的官方参考文档 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Hexo 官方中文文档">[1]</span></a></sup>, 旨在记录笔者本人建立博客过程中觉得比较实用的东西亦即个人体会.</p><h2 id="建站及-Hexo-目录结构"><a href="#建站及-Hexo-目录结构" class="headerlink" title="建站及 Hexo 目录结构"></a>建站及 Hexo 目录结构</h2><p>&emsp;&emsp;类似于 <code>git</code> 使用时需要进行初始化, 使用 Hexi 建站时同样需要进行初始化 <sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="Hexo 建站">[2]</span></a></sup>. 如</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">$ hexo init &lt;folder&gt;<br>$ <span class="hljs-built_in">cd</span> &lt;folder&gt;<br>$ npm install<br></code></pre></div></td></tr></table></figure><p>其中第一行是 <code>hexo</code> 的初始化语句, 第二行是跳转至建站的路径, 第三行是在路径下使用 <code>npm</code> 安装所需插件. 新建完成后的目录结构为</p><figure class="highlight sqf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sqf">.<br>├── <span class="hljs-variable">_config</span>.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── <span class="hljs-variable">_drafts</span><br>|   └── <span class="hljs-variable">_posts</span><br>└── themes<br></code></pre></div></td></tr></table></figure><p>各个路径的简介如下 (详细介绍见官方文档 <sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="Hexo 建站">[2]</span></a></sup>)</p><ul><li><code>_config.yml</code>: Hexo 的 (全局) 配置文件</li><li><code>package.json</code>: 通过 <code>npm install</code> 安装的包</li><li><code>scaffolds</code>: 模板文件夹. 如使用指令 <code>hexo new [layout] &lt;title&gt;</code> <sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="Hexo 写作">[3]</span></a></sup>, 将按照 <code>scaffolds</code> 中的模板文件 <code>[layout].md</code> 在当前目录下建立标题为 <code>&lt;title&gt;</code> 的新文件. (如果设置了资源文件夹<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="Hexo资 源文件夹">[5]</span></a></sup>, 除了建立 <code>&lt;title&gt;.md</code> 以外, 还会在当前位置建立名为 <code>&lt;title&gt;</code> 的文件夹)</li><li><code>source</code>: 存放博客的核心—Markdown 文件及图片等资源的地方. 该文件夹中除了 <code>_posts</code> 文件夹以外的以下划线 <code>_</code> 开头的文件夹将被忽略, 你可以利用此特性在 <code>source</code> 文件夹下额外建立一个 <code>_draft</code> 的文件夹来存放草稿 <sup id="fnref:8" class="footnote-ref"><a href="#fn:8" rel="footnote"><span class="hint--top hint--rounded" aria-label="Hexo 草稿">[8]</span></a></sup> .</li><li><code>theme</code>: 主题文件</li></ul><h2 id="Markdown-写作"><a href="#Markdown-写作" class="headerlink" title="Markdown 写作"></a>Markdown 写作</h2><p>&emsp;&emsp;采用 Hexo 等博客框架的一大优势就是可以直接使用 Markdown 进行写作, 并自动生成最终所需的 HTML 文件, 而无需直接面对 HTML 文件. 相比通常的 Markdown 语法, Hexo 有自己独有的一些特点. 笔者将简单介绍如下</p><h3 id="Front-Matter"><a href="#Front-Matter" class="headerlink" title="Front Matter"></a>Front Matter</h3><p>&emsp;&emsp;相比于一般的 Markdonw 语法, Hexo 提供了 Front Matter <sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="Hexo Front-matter">[6]</span></a></sup>用以指定每篇文章的变量. 如标题名, 建立日期, 分类, 标签等. Front Matter 区域在 Markdonw 文件开头, 以两条三横线分隔, 如</p><figure class="highlight md"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">---<br>title: <br>math: true<br>data: 2021-05-02<br>categories:<br><span class="hljs-bullet">-</span> <br>tags: <br>---<br></code></pre></div></td></tr></table></figure><p>其中若有项目没有指定值. 将采用默认值. 部分参数控制的功能如下</p><ul><li><code>layout</code>: 文章布局, 默认为 <code>config.default_layout</code></li><li><code>title</code>: 文章标题, 默认为文章的文件名</li><li><code>date</code>: 文章的建立日期, 默认为文件建立日期.</li><li><code>update</code>: 文章更新日期</li><li><code>comments</code>: 是否开启文章评论</li><li><p><code>tags</code>: 标签. 若希望有多个标签, 可采取类似 Markdown list 的形式, 如</p>  <figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">tags:<br><span class="hljs-bullet">-</span> CS<br><span class="hljs-bullet">-</span> TODO<br></code></pre></div></td></tr></table></figure></li><li><p><code>categories:</code>文章的分类. 采用类似 Markdown list 的形式, 前一个分类为后一个分类的父分类. 如</p>  <figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">categories:<br><span class="hljs-bullet">-</span> Diary<br><span class="hljs-bullet">-</span> Life<br></code></pre></div></td></tr></table></figure><p>  其含义为: 该文件属于父分类 <code>Diary</code> 的子分类 <code>Life</code>. 关于为文章添加多个分类的方法详见官方参考文档 <sup><a href="#fn_Front Matter" id="reffn_Front Matter">Front Matter</a></sup>.</p></li></ul><p>部分主题 <code>theme</code> 提供了更丰富的 Front Matter. 如 Fluid 主题 <sup><a href="#fn_Fluid" id="reffn_Fluid">Fluid</a></sup> 提供了 <code>math</code>, <code>mermaid</code> 等来控制数学公式和 <code>mermaid</code> 流程图 <sup id="fnref:7" class="footnote-ref"><a href="#fn:7" rel="footnote"><span class="hint--top hint--rounded" aria-label="Mermaid">[7]</span></a></sup> 的渲染开关.</p><h3 id="Tag-插件"><a href="#Tag-插件" class="headerlink" title="Tag 插件"></a>Tag 插件</h3><p>&emsp;&emsp;官方文档直接翻译的是 “标签插件 <sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="Hexo 标签插件（Tag Plugins）">[4]</span></a></sup>“. 这个名字一开始让我有些不明所以. 后来才认识到, 这个词语应分为两部分: “标签 (Tag)” 与 “插件 (Plugin)”, 亦即这是一类插件, 不过是比较特殊的一类插件. “Plugin” 表明, 这类功能的实现往往需要一些第三方程序—-也就是插件提供; “Tag” 表明, 这类功能的实现主要是由一种被称为 “标签 (Tag)” 的特殊语法来实现. 其与 “HTML 标签” 在使用上有相似之处, 但毕竟是不同的东西, 要注意与 “HTML 标签” 进行区分. 当然, 这一节的标题特意将前半部分用英文、而后半部分用中文, 亦是为了强调对这个名词的正确断句.</p><p>&emsp;&emsp;标签的基本形式形如 <code>&#123;% <syntax> %&#125;</code>, 其中 <code>&lt;syntax&gt;</code> 部分没有特别统一的形式, 需要根据使用的具体插件进行学习. 官方文档 <sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="Hexo 标签插件（Tag Plugins）">[4]</span></a></sup> 中给出了一些插件的例子.</p><p>&emsp;&emsp;值得主要, 既然这些东西属于 “插件”, 自然必须安装了对应的第三方程序才能使用. 如果你发现一段代码在其他人的文章介绍里可以进行渲染, 但在自己的 Hexo 却无法实现, 就得怀疑是否是因为没有安装相应插件了.</p><h2 id="资源-Asset-文件夹"><a href="#资源-Asset-文件夹" class="headerlink" title="资源 (Asset) 文件夹"></a>资源 (Asset) 文件夹</h2><p>&emsp;&emsp;相比于在 <code>source</code> 文件夹下建立诸如 <code>fig</code> 文件夹来统一管理文章所用到的资源 (如图片插入), 笔者更喜欢采取 “project” 的范式来撰写文章. 亦即将每一篇视为一个独立的 “project”, 不同 “project” 的资源彼此独立存储, 以减少不同 “project” 之间的耦合, 增强各自的独立性. 为在 Hexo 中实现此目的, 可在 <code>_config.yml</code> 中配置 <sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="Hexo资 源文件夹">[5]</span></a></sup></p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">marked:</span><br>  <span class="hljs-attr">prependRoot:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">postAsset:</span> <span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><p>当这些选项开启后, 可在与文章同名的文件夹中放置资源, 并在对应文章中通过相对该文件夹的路径来引用资源. 例如, <code>source/</code> 下有博客 <code>hello.md</code>, 以及文件夹 <code>source/hello/</code>, 该文件夹中有子文件夹 <code>fig/</code>, 其中有图片 <code>test.png</code>. 那么在 <code>hello.md</code> 中使用该图片时, 可以直接使用相对与 <code>source/hello/</code> 的路径 <code>fig/test.png</code>, 而非相对 <code>source</code> 的路径. </p><p>&emsp;&emsp;在官方中文文档中, 资源文件夹对应的是 Asset 文件夹, 而非 Source 文件夹. 笔者个人认为, Asset 文件夹的功效其实更接近英文 “Assistant”, 亦即辅助. 实际上, 官方文档中将 “Asset” 诠释为 “<code>source</code> 文件夹中除了文章以外的所有文件”. 从这个角度来说, 将此文件夹理解为 “使博客内容更加丰富的辅助文件” 也颇为贴切.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://hexo.io/zh-cn/docs/index.html">Hexo 官方中文文档</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://hexo.io/zh-cn/docs/setup">Hexo 建站</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://hexo.io/zh-cn/docs/writing">Hexo 写作</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://hexo.io/zh-cn/docs/tag-plugins.html">Hexo 标签插件（Tag Plugins）</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://hexo.io/zh-cn/docs/asset-folders">Hexo资 源文件夹</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span><a href="https://hexo.io/zh-cn/docs/front-matter">Hexo Front-matter</a><a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span><a href="https://mermaid-js.github.io/mermaid/#/">Mermaid</a><a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:8" class="footnote-text"><span><a href="https://hexo.io/zh-cn/docs/writing#草稿">Hexo 草稿</a><a href="#fnref:8" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 macOS 上使用 Firefox 运行 Flash</title>
    <link href="/CS_Web/2021-05-02_Firefox_flash/"/>
    <url>/CS_Web/2021-05-02_Firefox_flash/</url>
    
    <content type="html"><![CDATA[<h2 id="Flash-插件的兼容性"><a href="#Flash-插件的兼容性" class="headerlink" title="Flash 插件的兼容性"></a>Flash 插件的兼容性</h2><p>&emsp;&emsp;从不久前开始, 几乎所有浏览器都取消了对 Flash 的支持. 但鉴于部分老旧网页的服务仍需 Flash 插件 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Adobe Flash Playerhttps://www.flash.cn">[1]</span></a></sup> (比如新建网站时公安备案的网站 <sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="全国互联网安全管理平台">[2]</span></a></sup>, 目前其在填写网站备案信息时会提示需要 Flash 插件), 保留一款支持 Flash 的浏览器很有必要.</p><p>&emsp;&emsp;Firefox 的较新版本是不支持 Flash 的. 想要正确运行 Flash 插件, 需要安装较旧的版本. 根据插件兼容性说明 (见 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Adobe Flash Playerhttps://www.flash.cn">[1]</span></a></sup> 主页面), 其对 macOS 的支持情况为:</p><ul><li>系统要求:Mac OS X 10.10 版或更高版本</li><li>浏览器要求: 低于14版本的Safari、低于85版本的Mozilla Firefox、低于88版本内核的Google Chrome</li></ul><p>安装方式同一般的 macOS App 一致: 在网站上 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Adobe Flash Playerhttps://www.flash.cn">[1]</span></a></sup> 下载对应的 <code>.dmg</code> 文件, 并根据提示安装即可.</p><h2 id="关闭-Flash-插件的自动更新"><a href="#关闭-Flash-插件的自动更新" class="headerlink" title="关闭 Flash 插件的自动更新"></a>关闭 Flash 插件的自动更新</h2><p>&emsp;&emsp;笔者在下载旧版本后一开始可能正常运行 Flash 插件, 但等一段时间以后就又无法运行了. 经检查发现, 关键原因在于 Firefox 默认进行自动更新.</p><p>&emsp;&emsp;Firefox 本身是无法直接关闭自动更新的. 欲停止自动更新, 需配置 Firefox 的策略文件 <sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="禁用 Firefox 自动更新（macOS 版）">[3]</span></a></sup>. 首先打开文件 (没有则自行新建. 其本质上是一个文本文件)</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">Firefox.app<span class="hljs-regexp">/Contents/</span>Resources<span class="hljs-regexp">/distribution/</span>policies.json<br></code></pre></div></td></tr></table></figure><p>并向其中写入如下内容以禁止自动更新</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&#123;<br>  <span class="hljs-string">&quot;policies&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;DisableAppUpdate&quot;</span>: <span class="hljs-literal">true</span><br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>操作完成后在 <em>Firefox</em> 菜单栏 <code>Firefox</code> -&gt; <code>关于 Firefox</code> 界面可看见 <code>更新已被系统管理员禁用</code> 的字样.</p><p><img src="forbid_update.png" alt="禁用更新成功后" title="禁用更新成功后"></p><p>&emsp;&emsp;注意, 一旦 Firefox 已经自动更新, 目前笔者尚未发现直接降级的方法, 此时最好卸载当前 Firefox 后重新安装旧版</p><h2 id="打开本地-Flash-文件"><a href="#打开本地-Flash-文件" class="headerlink" title="打开本地 Flash 文件"></a>打开本地 Flash 文件</h2><h3 id="获取-Flash-文件-swf"><a href="#获取-Flash-文件-swf" class="headerlink" title="获取 Flash 文件 (.swf)"></a>获取 Flash 文件 (<code>.swf</code>)</h3><p>&emsp;&emsp;Flash 文件的后缀一般为 <code>.swf</code>. 一般来说, 如果想要下载网页上的某个 Flash 资源 (如一个 Flash 小游戏), 可通过开发者页面 (如 Chrome 下按 <code>F12</code>) 以查看对应的 HTML 源码. 在源码中搜索 <code>.swf</code>, 找到想要下载的 Flash 文件链接后, 下载对应文件即可 (如 <em>Safari</em> 中可通过右击鼠标, 找到 <code>Download Linked File</code> 并点击来实现)</p><h3 id="使用-Firefox-打开本地-swf-文件"><a href="#使用-Firefox-打开本地-swf-文件" class="headerlink" title="使用 Firefox 打开本地 .swf 文件"></a>使用 Firefox 打开本地 <code>.swf</code> 文件</h3><p>&emsp;&emsp;对 <em>Firefox</em>, 打开本地文件时 Flash 插件默认是不启用的. 欲对本地文件启用 Flash 插件 <sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="火狐始终打不开本地swf文件">[4]</span></a></sup>, 在地址栏中输入 <code>about:config</code>, 搜索找到 <code>plugins.http_https_only</code> 项, 双击将其设置为 <code>flase</code> 即可.</p><p><strong>关于选项名的理解 :</strong> 选项名 <code>plugins.http_https_only</code> 可理解为 “只在打开 http/https 启用 (Firefox 的) 插件”. 由于 <code>http/https</code> 是不同计算机进行通信时的通信协议, 该选项若为 <code>ture</code>, 则意味着只有在和其它计算机进行通信时才能启用 Firefox 插件. 换而言之, 该选项若打开, 则在访问本地资源时无法启用 Firefox 插件, 因而要将其设置为 <code>false</code> 以实现启用 Flash 插件打开本地 <code>.swf</code> 文件的需求.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="link">Adobe Flash Player</a><a href="https://www.flash.cn">https://www.flash.cn</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="http://www.beian.gov.cn/portal/index.do">全国互联网安全管理平台</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://blog.csdn.net/netgc/article/details/107593377">禁用 Firefox 自动更新（macOS 版）</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://blog.csdn.net/pkowner/article/details/79416652">火狐始终打不开本地swf文件</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CS Web</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/hello-world/"/>
    <url>/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></div></td></tr></table></figure><p>More info: [Writin]<a href="https://hexo.io/docs/writing.html">https://hexo.io/docs/writing.html</a>)</p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo server<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo generate<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="中文测试"><a href="#中文测试" class="headerlink" title="中文测试"></a>中文测试</h3><p>&emsp;&emsp;这是一句中文</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 插件简介</title>
    <link href="/CS_Hexo/2021-04-19_Hexo_plugin_introduce/"/>
    <url>/CS_Hexo/2021-04-19_Hexo_plugin_introduce/</url>
    
    <content type="html"><![CDATA[<blockquote><p>写这篇文章的目的是为了记录使用 HEXO 的过程中了解到的插件</p></blockquote><h2 id="hexo-pdf"><a href="#hexo-pdf" class="headerlink" title="hexo-pdf"></a><code>hexo-pdf</code></h2><blockquote><p>(2021-04-19) </p></blockquote><ul><li><strong>Introduce:</strong> Hexo tag for embeded pdf</li><li><strong>Install:</strong>  <figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">npm install --save hexo-pdf<br></code></pre></div></td></tr></table></figure></li><li><strong>Example:</strong>  <figure class="highlight django"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">pdf</span> http://7xov2f.com1.z0.glb.clouddn.com/bash_freshman.pdf %&#125;</span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name">pdf</span> ./bash_freshman.pdf %&#125;</span><br></code></pre></div></td></tr></table></figure></li></ul><p><strong>Reference :</strong> </p><ul><li><a href="https://github.com/superalsrk/hexo-pdf">superalsrk/hexo-pdf</a></li><li><a href="https://www.jianshu.com/p/111452a36e94">HEXO博客中插入PDF</a></li></ul><h2 id="fluid-dev-hexo-theme-fluid"><a href="#fluid-dev-hexo-theme-fluid" class="headerlink" title="fluid-dev/hexo-theme-fluid"></a><code>fluid-dev/hexo-theme-fluid</code></h2><blockquote><p>(2021-04-18) </p></blockquote><ul><li><strong>Introduce:</strong> Hexo theme plugin</li></ul><p><strong>Reference :</strong></p><ul><li><a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid-dev/hexo-theme-fluid</a></li><li><a href="https://zhuanlan.zhihu.com/p/137679728">一款被大厂选用的 Hexo 博客主题</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>CS Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ref</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 的文件命名格式</title>
    <link href="/CS_Hexo/2021-04-19-name_rule_of_hexo_markdown/"/>
    <url>/CS_Hexo/2021-04-19-name_rule_of_hexo_markdown/</url>
    
    <content type="html"><![CDATA[<h2 id="日期开头的分隔符问题"><a href="#日期开头的分隔符问题" class="headerlink" title="日期开头的分隔符问题"></a>日期开头的分隔符问题</h2><p>&emsp;&emsp;今天尝试在文件名开头使用以下划线分隔的日期, 如 <code>2020_12_05_DG_in_spherical_coordinate</code>, 在网页渲染时会出现无法渲染的情况. 但之后因不明原因, 该情况又自己消失了.</p><h2 id="asset-文件夹的分隔符问题"><a href="#asset-文件夹的分隔符问题" class="headerlink" title="asset 文件夹的分隔符问题"></a><code>asset</code> 文件夹的分隔符问题</h2><p>&emsp;&emsp;另一个关于文件命名的问题是, 使用指令 <code>hexo new &lt;file_name&gt;</code> 时, 如果 <code>&lt;file_name&gt;</code> 中含有下划线, 则自动生成的 <code>asset</code> 文件夹的名字中下划线将全被替换为短横线.</p>]]></content>
    
    
    <categories>
      
      <category>CS Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
